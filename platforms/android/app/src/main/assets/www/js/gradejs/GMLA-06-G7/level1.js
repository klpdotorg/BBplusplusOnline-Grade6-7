Game.GMLA_06_G7level1 = function () { };


Game.GMLA_06_G7level1.prototype =
{
    init: function (param, score) {
        _this = this;

        this.Stararr = param;
        this.score = score;
        _this = this;
        _this.languageSelected = window.languageSelected;

        if (_this.languageSelected == null
            || _this.languageSelected == " "
            || _this.languageSelected == "") {
            _this.languageSelected = "ENG";
        }
        else //// console.log("Language selected: " + _this.languageSelected);
            _this.clickSound = document.createElement('audio');
        _this.clickSoundsrc = document.createElement('source');
        _this.clickSoundsrc.setAttribute("src", window.baseUrl + "sounds/ClickSound.mp3");
        _this.clickSound.appendChild(_this.clickSoundsrc);

        _this.celebrationSound = document.createElement('audio');
        _this.celebrationSoundsrc = document.createElement('source');
        _this.celebrationSoundsrc.setAttribute("src", window.baseUrl + "sounds/celebration.mp3");
        _this.celebrationSound.appendChild(_this.celebrationSoundsrc);

        _this.counterCelebrationSound = document.createElement('audio');
        _this.counterCelebrationSoundsrc = document.createElement('source');
        _this.counterCelebrationSoundsrc.setAttribute("src", window.baseUrl + "sounds/counter_celebration.mp3");
        _this.counterCelebrationSound.appendChild(_this.counterCelebrationSoundsrc);

        _this.wrongans = document.createElement('audio');
        _this.wronganssrc = document.createElement('source');
        _this.wronganssrc.setAttribute("src", window.baseUrl + "sounds/WrongCelebrationSound.mp3");
        _this.wrongans.appendChild(_this.wronganssrc);

        _this.wrongSound = document.createElement('audio');
        _this.wrongSoundsrc = document.createElement('source');
        _this.wrongSoundsrc.setAttribute("src", window.baseUrl + "sounds/WrongCelebrationSound.mp3");
        _this.wrongSound.appendChild(_this.wrongSoundsrc);

        _this.gameSound = document.createElement('audio');
        _this.gameSoundsrc = document.createElement('source');
        _this.gameSoundsrc.setAttribute("src", window.baseUrl + "sounds/Game Positive.mp3");
        _this.gameSound.appendChild(_this.gameSoundsrc);

        _this.biteSound = document.createElement('audio');
        _this.biteSoundsrc = document.createElement('source');
        _this.biteSoundsrc.setAttribute("src", window.baseUrl + "sounds/Bite.mp3");
        _this.biteSound.appendChild(_this.biteSoundsrc);

        _this.hintSound = document.createElement('audio');
        _this.hintSoundsrc = document.createElement('source');
        _this.hintSoundsrc.setAttribute("src", window.baseUrl + "sounds/tinkle.mp3");
        _this.hintSound.appendChild(_this.hintSoundsrc);

        _this.assetSound = document.createElement('audio');
        _this.assetSoundsrc = document.createElement('source');
        _this.assetSoundsrc.setAttribute("src", window.baseUrl + "sounds/Next_option_sound.mp3");
        _this.assetSound.appendChild(_this.assetSoundsrc);

        _this.valueSound = document.createElement('audio');
        _this.valueSoundsrc = document.createElement('source');
        _this.valueSoundsrc.setAttribute("src", window.baseUrl + "sounds/clung.mp3");
        _this.valueSound.appendChild(_this.valueSoundsrc);

        _this.dragSound = document.createElement('audio');
        _this.dragSoundsrc = document.createElement('source');
        _this.dragSoundsrc.setAttribute("src", window.baseUrl + "sounds/ladder-original.mp3");
        _this.dragSound.appendChild(_this.dragSoundsrc);

        // _this.Ask_Question1 = _this.createAudio("V1");
        // _this.Ask_Question2 = _this.createAudio("V2 full");
        // _this.Ask_Question2_2 = _this.createAudio("V9");
        // _this.Ask_Question3 = _this.createAudio("V3");
        // _this.Ask_Question4 = _this.createAudio("V4");
        // _this.Ask_Question5 = _this.createAudio("V5");
        // _this.Ask_Question6 = _this.createAudio("V6");
        // _this.Ask_Question7 = _this.createAudio("V7");
        // _this.Ask_Question8 = _this.createAudio("V8");

        telInitializer.gameIdInit("GMLA_06_G7", gradeSelected);
        console.log(gameID, "gameID...");
    },

    create: function (game) {

        //* show the demo video
        _this.time.events.add(1, function () {

            // _this.ViewDemoVideo();
        });

        //* start the game with delay. Since the Demo video will pause the game, the timer will freeze
        //* and then start after the game is unpaused and continues to call the gameCreate function.
        _this.time.events.add(1500, function () {
            console.log("//////////////////")
            _this.gameCreate(game);
        });
    },

    ViewDemoVideo: function () {
        //* pause the game before going to the demovideo 
        _this.game.paused = true;
        _this.DemoVideo();  //* at the end of demo video/skip pressed, it will unpause the game.
    },

    gameCreate: function (game) {
        currentlyPlayingAudio = null;//for audio

        _this.questionid = null;
        _this.noofAttempts = 0;
        _this.sceneCount = 0;
        _this.AnsTimerCount = 0;

        _this.microConcepts;

        _this.count1 = 0;//0
        _this.speakerbtn;
        _this.background;
        _this.count = 0;
        _this.starsGroup;
        _this.selectedAns1 = '';
        _this.selectedAns2 = '';
        _this.selectedAns3 = '';
        _this.AnswerBox;
        _this.seconds = 0;
        _this.minutes = 0;
        _this.answer = 0;
        _this.stage = 0;
        _this.Question_flag = 0;
        _this.starting = 0;
        _this.objectCounter = 0;
        _this.i = 0;
        _this.j = 0;
        _this.limit = 0;
        _this.finalval = '';
        _this.fourNotEntered = false;
        _this.fouransLen = 0;

        _this.scale_flag = 0;
        _this.potractor_flag = 0;
        _this.optionCounter = 0;

        _this.one_b_flag = 0;
        _this.two_b_flag = 0;
        _this.three_b_flag = 0;
        _this.x_b_flag = 0;
        _this.y_b_flag = 0;
        _this.z_b_flag = 0;
        _this.anim_flag = 0;

        _this.wrong_flag_x = 0;
        _this.wrong_flag_y = 0;
        _this.wrong_flag_z = 0;

        _this.rightbtnFlag = 0;

        _this.objectsArray = ['sandwich', 'waffer', 'cheese', 'watermelon', 'pizza', 'biscuit'];
        //'sandwich', 'waffer', 'cheese', 'watermelon', 'pizza', 'biscuit'
        _this.shuffleArray(_this.objectsArray);
        console.log(_this.objectsArray, "_this.objectsArray");

        _this.findingCongarence = [];

        _this.shake = new Phaser.Plugin.Shake(game);
        game.plugins.add(_this.shake);

        _this.counterForTimer = 0;

        _this.arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];

        _this.boxPosition_x = [80, 445, 80];
        _this.boxPosition_y = [70, 70, 286];

        _this.hint_flag = 0;
        _this.speakerbtnClicked = false;
        _this.rightbtn_Clicked = false;

        _this.background = _this.add.tileSprite(0, 0, _this.world.width, _this.world.height, 'BG1');
        //** include the background file, navigation bar, stars, timer objects.

        _this.navBar = _this.add.sprite(0, 0, 'navBar');

        _this.backbtn = _this.add.sprite(5, 6, 'backbtn');
        _this.backbtn.inputEnabled = true;
        _this.backbtn.input.useHandCursor = true;
        _this.backbtn.events.onInputDown.add(function () {
            _this.state.start('grade7Geometry');
        });

        _this.speakerbtn = _this.add.sprite(600, 6, 'CommonSpeakerBtn');

        _this.speakerbtn.events.onInputDown.add(function () {
            telInitializer.tele_interactEvent("TOUCH", "speaker");
            if (_this.speakerbtnClicked == false && _this.rightbtn_Clicked == false) {
                _this.speakerbtn.inputEnabled = false;
                _this.speakerbtn.input.useHandCursor = false;
                _this.clickSound.play();

                if (_this.Question_flag == 0) {
                    _this.stopAudio_QV();

                    _this.Ask_Question1 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a1.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question1.play();
                }
                else if (_this.Question_flag == 1) {
                    _this.stopAudio_QV();

                    _this.Ask_Question2 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a2.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question2.play();
                    // _this.Ask_Question2.addEventListener('ended', () => {
                    //     console.log("Ask_Question2 played");
                    //     _this.Ask_Question2_2.play();
                    // });
                }
                else if (_this.Question_flag == 2) {
                    _this.stopAudio_QV();

                    _this.Ask_Question3 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a3.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question3.play();
                }
                else if (_this.Question_flag == 3) {
                    _this.stopAudio_QV();

                    _this.Ask_Question4 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a4.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question4.play();
                }
                else if (_this.Question_flag == 4) {
                    _this.stopAudio_QV();

                    _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question5.play();
                }
                else if (_this.Question_flag == 5) {
                    _this.stopAudio_QV();

                    _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question6.play();
                }
                else if (_this.Question_flag == 6) {
                    _this.stopAudio_QV();

                    _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question7.play();
                }
                else if (_this.Question_flag == 7) {
                    _this.stopAudio_QV();
                    _this.Ask_Question8 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
                    // _this.pauseVoice();
                    // _this.Ask_Question8.play();
                }

                _this.time.events.add(3000, function () {
                    _this.speakerbtnClicked = false;
                    _this.EnableVoice();
                });
            }

        }, _this);

        _this.timebg = _this.add.sprite(305, 6, 'timebg');
        _this.timeDisplay = _this.add.text(330, 22, _this.minutes + ' : ' + _this.seconds);
        _this.timeDisplay.anchor.setTo(0.5);
        _this.timeDisplay.align = 'center';
        _this.timeDisplay.font = 'Oh Whale';
        _this.timeDisplay.fontSize = 20;
        _this.timeDisplay.fill = '#ADFF2F';

        //bulb 
        _this.hintBtn = _this.add.sprite(670, 6, 'bulb');
        _this.hintBtn.scale.setTo(0.5, 0.6);
        _this.hintBtn.smoothed = false;
        _this.hintBtnAnim = _this.hintBtn.animations.add('hint');
        _this.hintBtnAnim.play(15);
        _this.hintBtnAnim.onComplete.add(function () {
            _this.hintBtnAnim.play(15);
        }, _this);
        _this.hintBtn.inputEnabled = true;
        _this.hintBtn.input.useHandCursor = true;

        _this.hintBtn.events.onInputDown.add(function () {
            //// console.log("inside hintbutton function");
            //* show the demo video
            _this.hintBtn.inputEnabled = false;
            _this.hintBtn.input.useHandCursor = false;
            _this.time.events.add(1, function () {
                //// console.log(_this.hintBtn.inputEnabled, "status of hintBtn");
                // _this.ViewDemoVideo();
                _this.ViewHintInstruction();
            });

        });

        _this.generateStarsForTheScene(6);

        //* include variables for use - objGroup (where egg objects can be added)
        _this.objGroup;
        _this.numGroup;

        _this.greenObjectArray = [];

        //* start the game with first question
        _this.time.events.add(1000, _this.getQuestion);
    },

    playAudio: function (src) {

        // Pause and reset the currently playing audio
        if (currentlyPlayingAudio) {
            currentlyPlayingAudio.pause();
            currentlyPlayingAudio.currentTime = 0;
        }

        var audio = new Audio();
        var source = document.createElement('source');
        source.setAttribute('src', src);
        audio.appendChild(source);
        audio.play();

        // Set the currently playing audio
        currentlyPlayingAudio = audio;

        // Remove the reference to the audio element when it finishes playing
        audio.addEventListener('ended', function () {
            currentlyPlayingAudio = null;
        });

        return audio;
    },
    // Function to stop the currently playing audio
    stopAudio_QV: function () {
        console.log("currently playing audio stop");
        if (currentlyPlayingAudio) {
            currentlyPlayingAudio.pause();
            currentlyPlayingAudio.currentTime = 0;
            currentlyPlayingAudio = null;
        }
    },



    createAudio: function (src) {
        audio = document.createElement('audio');
        audiosrc = document.createElement('source');
        audiosrc.setAttribute("src", window.baseUrl + "questionSounds/GMLA-06-G7/" + _this.languageSelected + "/" + src + ".mp3");
        audio.appendChild(audiosrc);
        // audio.play();

        return audio;

    },

    //* function to enable the speaker button once pressed.
    EnableVoice: function () {
        if (_this.speakerbtnClicked == false && _this.rightbtn_Clicked == false) {
            _this.speakerbtn.inputEnabled = true;
            _this.speakerbtn.input.useHandCursor = true;
            _this.speakerbtnClicked = false;
        }
    },

    updateTimer: function () {
        _this.counterForTimer++;
        if (_this.counterForTimer > 59) {
            _this.counterForTimer = 0;

            if (_this.minutes < 10) {
                _this.minutes = _this.minutes + 1;
                _this.seconds = 0;//00
            }
            else {
                _this.minutes = _this.minutes + 1;
            }
        }
        else {
            if (_this.counterForTimer < 10)
                _this.seconds = '0' + _this.counterForTimer;
            else
                _this.seconds = _this.counterForTimer;
        }
        _this.timeDisplay.setText(_this.minutes + ':' + _this.seconds);
        //timer.setText(minutes + ':'+ seconds );
    },

    generateStarsForTheScene: function (count) {
        _this.starsGroup = _this.add.group();
        for (var i = 0; i < count; i++) {
            _this.starsGroup.create(_this.world.centerX - 15, 10, 'starAnim');
            for (var j = 0; j < i; j++) {
                if (_this.starsGroup.getChildAt(j)) {
                    _this.starsGroup.getChildAt(j).x -= 15;
                    _this.starsGroup.getChildAt(i).x += 15;
                }
            }
        }

    },

    getQuestion: function (target) {
        _this.completed = 0;
        _this.current = 0;
        _this.choice = _this.arr[_this.starting++];

        if (_this.timer) {
            _this.timer.stop();
            _this.timer = null;
        }
        _this.timer = _this.time.create(false);

        //  Set a TimerEvent to occur after 2 seconds
        _this.timer.loop(1000, function () {
            _this.AnsTimerCount++;
        }, _this);

        //  Start the timer running - this is important!
        //  It won't start automatically, allowing you to hook it to button events and the like.
        _this.timer.start();

        /*******************For Navigation Bar*********************/
        _this.timer1 = _this.time.create(false);

        _this.timer1.loop(1000, function () {
            _this.updateTimer();
        }, _this);

        _this.timer1.start();

        /************************$$$$$$$$$$**********************/

        //  Start the timer running - this is important!
        //  It won't start automatically, allowing you to hook it to button events and the like.

        _this.speakerbtn.inputEnabled = true;
        _this.speakerbtn.input.useHandCursor = true;

        _this.Question_flag = 0;

        _this.Initial_randomizing();
        // _this.optionShowing();

        console.log("inside get question.....");
        _this.hintBtn.inputEnabled = true;
        _this.hintBtn.input.useHandCursor = true;
        _this.hint_flag = 1;

        _this.questionid = 1;
    },

    stopVoice: function () {
        if (_this.Ask_Question1) {
            _this.Ask_Question1.pause();
            _this.Ask_Question1 = null;
        }
        if (_this.Ask_Question2) {
            _this.Ask_Question2.pause();
            _this.Ask_Question2 = null;
        }
        if (_this.Ask_Question3) {
            _this.Ask_Question3.pause();
            _this.Ask_Question3 = null;
        }
        if (_this.Ask_Question4) {
            _this.Ask_Question4.pause();
            _this.Ask_Question4 = null;
        }
        if (_this.Ask_Question5) {
            _this.Ask_Question5.pause();
            _this.Ask_Question5 = null;
        }
        if (_this.Ask_Question6) {
            _this.Ask_Question6.pause();
            _this.Ask_Question6 = null;
        }
        if (_this.Ask_Question7) {
            _this.Ask_Question7.pause();
            _this.Ask_Question7 = null;
        }
        if (_this.Ask_Question8) {
            _this.Ask_Question8.pause();
            _this.Ask_Question8 = null;
        }
        // if (_this.Ask_Question2_2) {
        //     _this.Ask_Question2_2.pause();
        //     _this.Ask_Question2_2 = null;
        // }


        if (_this.celebrationSound) {
            if (_this.celebrationSound.isPlaying) {
                _this.celebrationSound.stop();
                _this.celebrationSound = null;
            }
        }

    },
    pauseVoice: function () {
        if (_this.Ask_Question1) {
            _this.Ask_Question1.pause();
            _this.Ask_Question1.currentTime = 0.0;
        }
        if (_this.Ask_Question2) {
            _this.Ask_Question2.pause();
            _this.Ask_Question2.currentTime = 0.0;
        }
        // if (_this.Ask_Question2_2) {
        //     _this.Ask_Question2_2.pause();
        //     _this.Ask_Question2_2.currentTime = 0.0;
        // }
        if (_this.Ask_Question3) {
            _this.Ask_Question3.pause();
            _this.Ask_Question3.currentTime = 0.0;
        }
        if (_this.Ask_Question4) {
            _this.Ask_Question4.pause();
            _this.Ask_Question4.currentTime = 0.0;
        }
        if (_this.Ask_Question5) {
            _this.Ask_Question5.pause();
            _this.Ask_Question5.currentTime = 0.0;
        }
        if (_this.Ask_Question6) {
            _this.Ask_Question6.pause();
            _this.Ask_Question6.currentTime = 0.0;
        }
        if (_this.Ask_Question7) {
            _this.Ask_Question7.pause();
            _this.Ask_Question7.currentTime = 0.0;
        }
        if (_this.Ask_Question8) {
            _this.Ask_Question8.pause();
            _this.Ask_Question8.currentTime = 0.0;
        }
    },
    shuffleArray: function (array) {
        let len = array.length,
            currentIndex;
        for (currentIndex = len - 1; currentIndex > 0; currentIndex--) {
            let randIndex = Math.floor(Math.random() * (currentIndex + 1));
            var temp = array[currentIndex];
            array[currentIndex] = array[randIndex];
            array[randIndex] = temp;
        }
    },

    Initial_randomizing: function () {
        /**
         * there are two part of questions.
         * first one is 1.	Match triangles which are congruent.(3 question)
         * second one is 2.	Find the missing side or angle of a triangle by observing its congruent pair.(3 question)
         
         * in the first one we have 4 choice of question (sss,sas,asa,rhs)
         * b.	SSS Congruence of two triangles: three sides of the one are equal to the three corresponding sides of the other.
         * c.	SAS Congruence of two triangles: two sides and the angle included between them in one of the triangles are equal to the corresponding sides and the angle included between them of the other triangle.
         * d.	ASA Congruence of two triangles: two angles and the side included between them in one of the triangles are equal to the corresponding angles and the side included between them of the other triangle.
         * e.	RHS Congruence of two right-angled triangles: , two right-angled triangles are congruent if the hypotenuse and a leg of one of the triangles are equal to the hypotenuse and the corresponding leg of the other triangle.
          */

        /**
         * here we have to find the length of the 3 sides and 3 angles of the triangle. 
         * 
        */
        // Define the lengths of the three sides
        // _this.side_1 = Math.floor(Math.random() * (15 - 5)) + 5;//a
        // _this.side_2 = Math.floor(Math.random() * (15 - 5)) + 5;//b
        // _this.side_3 = Math.floor(Math.random() * (15 - 5)) + 5;//c


        if (_this.objectsArray[_this.count1] == 'watermelon') {

            //randomization for watermelon.
            _this.object_Angle_y = Math.floor(Math.random() * (78 - 73)) + 73;//angle c
            console.log(_this.object_Angle_y, "_this.object_Angle_y");

            _this.object_Angle_z = 40;//angle a

            _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
            console.log(_this.object_Angle_x, "_this.object_Angle_x");
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            //randomization for sandwich.
            _this.object_Angle_y = 90;//angle c
            console.log(_this.object_Angle_y, "_this.object_Angle_y");

            _this.object_Angle_z = 45;//angle a

            _this.object_Angle_x = 45;//angle b
            console.log(_this.object_Angle_x, "_this.object_Angle_x");

        }
        if (_this.objectsArray[_this.count1] == 'waffer') {

            //randomization for waffer.
            if (_this.count1 > 2) {
                _this.object_Angle_y = Math.floor(Math.random() * (70 - 60)) + 60;//angle c//70-60
                console.log(_this.object_Angle_y, "_this.object_Angle_y");

                _this.object_Angle_z = 53;//angle a

                _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
                console.log(_this.object_Angle_x, "_this.object_Angle_x");
            }
            else {
                _this.object_Angle_y = Math.floor(Math.random() * (63 - 55)) + 55;//angle c//70-60
                console.log(_this.object_Angle_y, "_this.object_Angle_y");

                _this.object_Angle_z = 53;//angle a

                _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
                console.log(_this.object_Angle_x, "_this.object_Angle_x");
            }

        }
        if (_this.objectsArray[_this.count1] == 'cheese') {

            //randomization for waffer.
            if (_this.count1 > 2) {
                //randomization for waffer.
                _this.object_Angle_y = Math.floor(Math.random() * (70 - 60)) + 60;//angle c
                console.log(_this.object_Angle_y, "_this.object_Angle_y");

                _this.object_Angle_z = 55;//angle a

                _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
                console.log(_this.object_Angle_x, "_this.object_Angle_x");
            }
            else {
                _this.object_Angle_y = Math.floor(Math.random() * (64 - 55)) + 55;//angle c
                console.log(_this.object_Angle_y, "_this.object_Angle_y");

                _this.object_Angle_z = 50;//angle a

                _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
                console.log(_this.object_Angle_x, "_this.object_Angle_x");
            }

        }
        if (_this.objectsArray[_this.count1] == 'pizza') {

            //randomization for waffer.
            _this.object_Angle_y = 55;//angle c
            console.log(_this.object_Angle_y, "_this.object_Angle_y");

            _this.object_Angle_z = 65;//angle a

            _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
            console.log(_this.object_Angle_x, "_this.object_Angle_x");

        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {

            //randomization for biscuit.
            if (_this.count1 > 2) {
                _this.object_Angle_y = Math.floor(Math.random() * (70 - 60)) + 60;//angle c
                console.log(_this.object_Angle_y, "_this.object_Angle_y");

                _this.object_Angle_z = 56;//angle a

                _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
                console.log(_this.object_Angle_x, "_this.object_Angle_x");
            }
            else {
                _this.object_Angle_y = Math.floor(Math.random() * (68 - 60)) + 60;//angle c
                console.log(_this.object_Angle_y, "_this.object_Angle_y");

                _this.object_Angle_z = 68;//angle a

                _this.object_Angle_x = 180 - (_this.object_Angle_y + _this.object_Angle_z);//angle b
                console.log(_this.object_Angle_x, "_this.object_Angle_x");
            }
        }

        // Convert _this.object_Angle_z degrees to radians
        _this.object_Angle_z_sin = _this.object_Angle_z * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_z = Math.sin(_this.object_Angle_z_sin);
        _this.sinA = _this.sineOfAngle_z.toFixed(2);
        console.log(_this.sinA, "a angle.."); // Output: 0.5

        // Convert _this.watermelon_Angle_b degrees to radians
        _this.object_Angle_x_sin = _this.object_Angle_x * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_x = Math.sin(_this.object_Angle_x_sin);
        _this.sinB = _this.sineOfAngle_x.toFixed(2);
        console.log(_this.sinB, "b angle.."); // Output: 0.5

        // Convert _this.object_Angle_y degrees to radians
        _this.object_Angle_y_sin = _this.object_Angle_y * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_y = Math.sin(_this.object_Angle_y_sin);
        _this.sinC = _this.sineOfAngle_y.toFixed(2);
        console.log(_this.sinC, "c angle.."); // Output: 0.5


        if (_this.objectsArray[_this.count1] == 'biscuit') {
            _this.side_2 = Math.floor(Math.random() * (10 - 8)) + 8;//b 8,9,10 fixed
            //we have to find the other two sides based on angle.
            // Z = y*sinZ / sinY     _this.side_1 = _this.side_2*_this.sinA / _this.sinC
            //x = y*sinX / sinY      _this.side_3 = _this.side_2*_this.sinB / _this.sinC
            _this.side_3 = Math.round(((_this.side_2 * _this.sinA) / _this.sinC).toFixed(4));
            _this.side_1 = Math.round(((_this.side_2 * _this.sinB) / _this.sinC).toFixed(4));

            console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinB) / _this.sinC);
            console.log(_this.side_2, "_this.side_2");
            console.log(_this.side_3, "_this.side_3", (_this.side_2 * _this.sinA) / _this.sinC);

        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            _this.side_1 = Math.floor(Math.random() * (11 - 8)) + 8;//a 9
            // y = z*sinY / sinZ     _this.side_1 = _this.side_2*_this.sinA / _this.sinC
            //x = Z*sinX / sinZ      _this.side_3 = _this.side_2*_this.sinB / _this.sinC

            _this.side_2 = Math.round(((_this.side_1 * _this.sinC) / _this.sinA).toFixed(4));//b
            _this.side_3 = _this.side_1;//c


            console.log(_this.side_1, "_this.side_1");
            console.log(_this.side_2, "_this.side_2", (_this.side_1 * _this.sinC) / _this.sinA);
            console.log(_this.side_3, "_this.side_3");
        }
        if (_this.objectsArray[_this.count1] == 'watermelon') {
            _this.side_2 = Math.floor(Math.random() * (12 - 7)) + 7;//a 9   y
            //z = x*sinz / sinX      _this.side_3 = _this.side_1*_this.sinB / _this.sinC
            _this.side_1 = Math.round(((_this.side_2 * _this.sinC) / _this.sinB).toFixed(4));//x
            _this.side_3 = Math.round(((_this.side_2 * _this.sinA) / _this.sinB).toFixed(4));//z

            console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinC) / _this.sinB);
            console.log(_this.side_2, "_this.side_2");
            console.log(_this.side_3, "_this.side_3", (_this.side_2 * _this.sinA) / _this.sinB);
        }
        if (_this.objectsArray[_this.count1] == 'cheese' || _this.objectsArray[_this.count1] == 'waffer') {
            _this.side_2 = Math.floor(Math.random() * (9 - 7)) + 7;//a 9   x
            //z = x*sinz / sinX      _this.side_3 = _this.side_1*_this.sinB / _this.sinC
            _this.side_1 = Math.round(((_this.side_2 * _this.sinC) / _this.sinB).toFixed(4));//a
            _this.side_3 = Math.round(((_this.side_2 * _this.sinA) / _this.sinB).toFixed(4));//c

            console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinC) / _this.sinB);
            console.log(_this.side_2, "_this.side_2");
            console.log(_this.side_3, "_this.side_3", (_this.side_2 * _this.sinA) / _this.sinB);
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            _this.side_2 = Math.floor(Math.random() * (14 - 10)) + 10;//b//y
            _this.side_1 = Math.round(((_this.side_2 * _this.sinA) / _this.sinC).toFixed(4));//x
            _this.side_3 = _this.side_1;//z

            console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinA) / _this.sinC);
            console.log(_this.side_2, "_this.side_2");
            console.log(_this.side_3, "_this.side_3");
        }

        if (_this.side_1 + _this.side_2 > _this.side_3 && _this.side_2 + _this.side_3 > _this.side_1 && _this.side_3 + _this.side_1 > _this.side_2) {
            // The three sides can form a triangle
            console.log("The three sides can form a triangle.");

        }
        else {
            while (!(_this.side_1 + _this.side_2 > _this.side_3 && _this.side_2 + _this.side_3 > _this.side_1 && _this.side_3 + _this.side_1 > _this.side_2)) {
                console.log("again The three sides can form a triangle.");

                if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.side_2 = Math.floor(Math.random() * (10 - 8)) + 8;//b 8,9,10 fixed
                    //we have to find the other two sides based on angle.
                    // Z = y*sinZ / sinY     _this.side_1 = _this.side_2*_this.sinA / _this.sinC
                    //x = y*sinX / sinY      _this.side_3 = _this.side_2*_this.sinB / _this.sinC
                    _this.side_3 = Math.round(((_this.side_2 * _this.sinA) / _this.sinC).toFixed(4));
                    _this.side_1 = Math.round(((_this.side_2 * _this.sinB) / _this.sinC).toFixed(4));

                    console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinB) / _this.sinC);
                    console.log(_this.side_2, "_this.side_2");
                    console.log(_this.side_3, "_this.side_3", (_this.side_2 * _this.sinA) / _this.sinC);

                }
                if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.side_1 = Math.floor(Math.random() * (11 - 8)) + 8;//a 9
                    // y = z*sinY / sinZ     _this.side_1 = _this.side_2*_this.sinA / _this.sinC
                    //x = Z*sinX / sinZ      _this.side_3 = _this.side_2*_this.sinB / _this.sinC

                    _this.side_2 = Math.round(((_this.side_1 * _this.sinC) / _this.sinA).toFixed(4));//b
                    _this.side_3 = _this.side_1;//c


                    console.log(_this.side_1, "_this.side_1");
                    console.log(_this.side_2, "_this.side_2", (_this.side_1 * _this.sinC) / _this.sinA);
                    console.log(_this.side_3, "_this.side_3");
                }
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.side_2 = Math.floor(Math.random() * (12 - 7)) + 7;//a 9   y
                    //z = x*sinz / sinX      _this.side_3 = _this.side_1*_this.sinB / _this.sinC
                    _this.side_1 = Math.round(((_this.side_2 * _this.sinC) / _this.sinB).toFixed(4));//x
                    _this.side_3 = Math.round(((_this.side_2 * _this.sinA) / _this.sinB).toFixed(4));//z

                    console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinC) / _this.sinB);
                    console.log(_this.side_2, "_this.side_2");
                    console.log(_this.side_3, "_this.side_3", (_this.side_2 * _this.sinA) / _this.sinB);
                }
                if (_this.objectsArray[_this.count1] == 'cheese' || _this.objectsArray[_this.count1] == 'waffer') {
                    _this.side_2 = Math.floor(Math.random() * (9 - 7)) + 7;//a 9   x
                    //z = x*sinz / sinX      _this.side_3 = _this.side_1*_this.sinB / _this.sinC
                    _this.side_1 = Math.round(((_this.side_2 * _this.sinC) / _this.sinB).toFixed(4));//a
                    _this.side_3 = Math.round(((_this.side_2 * _this.sinA) / _this.sinB).toFixed(4));//c

                    console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinC) / _this.sinB);
                    console.log(_this.side_2, "_this.side_2");
                    console.log(_this.side_3, "_this.side_3", (_this.side_2 * _this.sinA) / _this.sinB);
                }
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.side_2 = Math.floor(Math.random() * (14 - 10)) + 10;//b//y
                    _this.side_1 = Math.round(((_this.side_2 * _this.sinA) / _this.sinC).toFixed(4));//x
                    _this.side_3 = _this.side_1;//z

                    console.log(_this.side_1, "_this.side_1", (_this.side_2 * _this.sinA) / _this.sinC);
                    console.log(_this.side_2, "_this.side_2");
                    console.log(_this.side_3, "_this.side_3");
                }

            }
        }

        console.log(_this.side_1, "_this.side_1");
        console.log(_this.side_2, "_this.side_2");
        console.log(_this.side_3, "_this.side_3");

        _this.watermelonGroup = _this.add.group();
        _this.watermelonGroup_2 = _this.add.group();
        _this.watermelonGroup_3 = _this.add.group();
        _this.watermelonGroup_4 = _this.add.group();

        _this.sandwitchGroup = _this.add.group();
        _this.sandwitchGroup_2 = _this.add.group();
        _this.sandwitchGroup_3 = _this.add.group();
        _this.sandwitchGroup_4 = _this.add.group();

        _this.wafferGroup = _this.add.group();
        _this.wafferGroup_2 = _this.add.group();
        _this.wafferGroup_3 = _this.add.group();
        _this.wafferGroup_4 = _this.add.group();

        _this.CheeseGroup = _this.add.group();
        _this.CheeseGroup_2 = _this.add.group();
        _this.CheeseGroup_3 = _this.add.group();
        _this.CheeseGroup_4 = _this.add.group();

        _this.pizzaGroup = _this.add.group();
        _this.pizzaGroup_2 = _this.add.group();
        _this.pizzaGroup_3 = _this.add.group();
        _this.pizzaGroup_4 = _this.add.group();

        _this.biscuitGroup = _this.add.group();
        _this.biscuitGroup_2 = _this.add.group();
        _this.biscuitGroup_3 = _this.add.group();
        _this.biscuitGroup_4 = _this.add.group();

        _this.wGroup = _this.add.group();

        _this.showInitialScreen();


        // _this.protractor = _this.add.image(400, 300, 'protractor_2');
        // //_this.protractor.pivot.setTo(400, 300);
        // _this.protractor.scale.setTo(0.5,0.5);//0.87,1
        // // _this.protractor.angle = 10;
        // // _this.protractor.scale.setTo(0.87, 1);
        // _this.protractor.anchor.setTo(0.5);

        // _this.add.tween(_this.protractor).to({ angle: 90 }, 5000, Phaser.Easing.Linear.None, true);

        // // Create a container
        // var container = _this.add.group();

        // // Create the protractor object and add it to the container
        // _this.protractor = _this.add.image(0, 0, 'protractor_2');
        // _this.protractor.scale.setTo(0.43,0.5);
        // container.add(_this.protractor);

        // // Set the position and pivot point of the container
        // container.x = 400;
        // container.y = 200;
        // container.pivot.setTo(0.5, 0.5); // Set the pivot point to the center of the container

        // // Rotate the container by 60 degrees
        // container.angle = 60;

        //     _this.protractor = _this.add.image(300, 100, 'protractor_2');
        //    _this.protractor.scale.setTo(0.87,1);
        //     _this.protractor.anchor.setTo(0.5, 0.5); // Set the pivot point to the center of the protractor

        //     // Create a container and add the protractor to it
        //     var container = _this.add.group();
        //     container.add(_this.protractor);

        //     // Set the position of the container
        //     container.x = _this.protractor.x;
        //     container.y = _this.protractor.y;

        //     // Set the rotation angle in degrees
        //     var rotationAngle = 60;

        //     // Convert the angle to radians
        //     var rotationRadians = Phaser.Math.degToRad(rotationAngle);

        //     // Rotate the container
        //     container.rotation = rotationRadians;




    },

    showInitialScreen: function () {
        //console.log("showInitialScreen");
        _this.yellowBoxarr_x = _this.add.group();
        _this.yellowBoxarr_y = _this.add.group();
        _this.yellowBoxarr_z = _this.add.group();
        if (_this.count1 > 2) {
            _this.stopAudio_QV();

            _this.Question_flag = 3;
            if (_this.count1 == 3) {
                _this.Ask_Question4 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a4.mp3');
                // _this.Ask_Question4.play();
            }
            //partb panales
            _this.panel_1 = _this.add.image(80, 80, 'panle_4');//white screen
            _this.panel_1.scale.setTo(0.9, 0.93);
            _this.panel_2 = _this.add.image(490, 80, 'panle_4');//white screen
            _this.panel_2.scale.setTo(0.9, 0.93);
        }
        else {
            _this.stopAudio_QV();

            _this.Question_flag = 0;
            if (_this.count1 == 0) {
                // _this.Ask_Question1.play();
                _this.Ask_Question1 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a1.mp3');
            }
            //parta panales
            _this.panel_4 = _this.add.image(100, 80, 'panle_4');//white screen
            _this.panel_4.scale.setTo(1.7, 1.1);

            _this.tick = _this.add.sprite(880, 450, 'TickBtn');
            // _this.tick.inputEnabled = true;
            // _this.tick.input.useHandCursor = true;
            _this.tick.events.onInputDown.add(_this.tickValidation, _this);
        }

        if (_this.objectsArray[_this.count1] == 'sandwich') _this.sandwich_firstScreen();

        else if (_this.objectsArray[_this.count1] == 'waffer') _this.waffer_firstScreen();

        else if (_this.objectsArray[_this.count1] == 'cheese') _this.cheese_firstScreen();

        else if (_this.objectsArray[_this.count1] == 'pizza') _this.pizza_firstScreen();

        else if (_this.objectsArray[_this.count1] == 'biscuit') _this.biscuit_firstScreen();

        else {
            if (_this.objectsArray[_this.count1] == 'watermelon') _this.watermelon_firstScreen();
        }


    },
    twinkleEffect: function () {
        //yellow line will show and hide
        //console.log("twinkleEffect");
        _this.timert = _this.time.create(false);

        _this.timert.loop(300, function () {
            if (_this.yellowBoxarr_x.visible == false)
                _this.yellowBoxarr_x.visible = true;
            else
                _this.yellowBoxarr_x.visible = false;

        }, _this);

        _this.timert.loop(300, function () {
            if (_this.yellowBoxarr_y.visible == false)
                _this.yellowBoxarr_y.visible = true;
            else
                _this.yellowBoxarr_y.visible = false;

        }, _this);

        _this.timert.loop(300, function () {
            if (_this.yellowBoxarr_z.visible == false)
                _this.yellowBoxarr_z.visible = true;
            else
                _this.yellowBoxarr_z.visible = false;

        }, _this);

        _this.timert.start();
    },
    sandwich_firstScreen: function () {
        //console.log("sandwich");
        //in this function showing the sandwitch for part a and b. and numbers.
        if (_this.count1 > 2) {
            //first panel
            _this.sGroup = _this.add.group();
            //part b 
            //randomizing the option and showing the option
            _this.askQuestion_b = ['SSS', 'SAS', 'ASA', 'RHS'];//'SSS', 'SAS', 'ASA', 'RHS'
            _this.shuffleArray(_this.askQuestion_b);
            // console.log(_this.askQuestion_b, "_this.askQuestion_b");

            _this.sandwich = _this.add.sprite(160, 190, 'sandwichanim');//this should be rotate 
            _this.sandwich.scale.setTo(1.3);

            _this.sandwich_1dup = _this.add.sprite(160, 190, 'sandwichanim');//this should be rotate 
            _this.sandwich_1dup.scale.setTo(1.3);

            _this.sandwich_dup = _this.add.sprite(160, 190, 'sandwichanim');//this should be rotate 
            _this.sandwich_dup.scale.setTo(1.3);

            _this.sandwich_2 = _this.add.sprite(560, 190, 'sandwichanim');// this we can keep as original
            _this.sandwich_2.scale.setTo(1.3);
            _this.sandwich_2.alpha = 0;

            //* add tween to temp group and tween it to work space.
            tempDragAction = _this.add.tween(_this.sandwich_dup);
            tempDragAction.to({ x: 560, y: 190 }, 1500, 'Linear', true, 0);
            tempDragAction.start();
            tempDragAction.onComplete.add(function () {
                _this.dragSound.play();
                _this.sandwich_dup.destroy();
                _this.sandwich_2.alpha = 1;
                _this.sGroup.addChild(_this.sandwich);
                _this.sGroup.angle = 40;
                _this.sGroup.x = 200;
                _this.sGroup.y = -100;
                _this.sGroup.alpha = 0;


                _this.sandwich_1dup.anchor.setTo(0.5, 0.5);
                _this.sandwich_1dup.x = 290;//245
                _this.sandwich_1dup.y = 270;//290
                tempDragAction_2 = _this.game.add.tween(_this.sandwich_1dup).to({ x: 245, y: 290, angle: 40 }, 2500, Phaser.Easing.Linear.None, true);
                tempDragAction_2.onComplete.add(function () {
                    _this.sandwich_1dup.destroy();
                    _this.sGroup.alpha = 1;

                });
            });

            _this.time.events.add(5000, () => {
                // create a new graphics object. right side height
                _this.angle_1_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
                // draw the line
                _this.angle_1_line.moveTo(156, 215);//straight line//x1,y1
                _this.angle_1_line.lineTo(420, 215);
                _this.angle_1_line.lineTo(290, 350);
                _this.angle_1_line.lineTo(156, 215);
                _this.angle_1_line.endFill();


                _this.sGroup.addChild(_this.angle_1_line);

                if (_this.askQuestion_b[0] == 'SSS') {
                    _this.side_x = _this.add.text(160, 285, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(55, 145, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(60, 145, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(280, 160, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(245, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(250, 125, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(380, 285, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(240, 300, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(245, 300, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(120, 170, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 170, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(280, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.sGroup.addChild(_this.side_x);
                    _this.sGroup.addChild(_this.side_y);
                    _this.sGroup.addChild(_this.side_z);
                    _this.sGroup.addChild(_this.angle_1);
                    _this.sGroup.addChild(_this.angle_2);
                    _this.sGroup.addChild(_this.angle_3);
                    _this.angle_1.angle = 320;
                    _this.angle_2.angle = 320;
                    _this.angle_3.angle = 320;
                    _this.angle_1.y = 190;
                    _this.angle_2.x = 400;
                    _this.angle_2.y = 190;
                    _this.side_x.angle = 320;
                    _this.side_y.angle = 320;
                    _this.side_z.angle = 320;
                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                }
                if (_this.askQuestion_b[0] == 'SAS') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(160, 285, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(55, 145, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(60, 145, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);


                    _this.side_y = _this.add.text(280, 160, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(245, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(250, 125, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_y.addChild(_this.graphics_y);

                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(380, 285, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(240, 300, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(245, 300, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_z.addChild(_this.graphics_z);

                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(120, 170, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 170, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(280, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.sGroup.addChild(_this.side_x);
                    _this.sGroup.addChild(_this.side_y);
                    _this.sGroup.addChild(_this.side_z);
                    _this.sGroup.addChild(_this.angle_1);
                    _this.sGroup.addChild(_this.angle_2);
                    _this.sGroup.addChild(_this.angle_3);

                    _this.angle_1.angle = 320;
                    _this.angle_2.angle = 320;
                    _this.angle_3.angle = 320;
                    _this.angle_1.y = 190;
                    _this.angle_2.x = 400;
                    _this.angle_2.y = 190;
                    _this.side_x.angle = 320;
                    _this.side_y.angle = 320;
                    _this.side_z.angle = 320;

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                }
                if (_this.askQuestion_b[0] == 'ASA') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(160, 285, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(55, 145, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(60, 145, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);


                    _this.side_y = _this.add.text(280, 160, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(245, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(250, 125, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_y.addChild(_this.graphics_y);

                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(380, 285, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(240, 300, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(245, 300, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_z.addChild(_this.graphics_z);

                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(120, 170, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 170, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(280, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.sGroup.addChild(_this.side_x);
                    _this.sGroup.addChild(_this.side_y);
                    _this.sGroup.addChild(_this.side_z);
                    _this.sGroup.addChild(_this.angle_1);
                    _this.sGroup.addChild(_this.angle_2);
                    _this.sGroup.addChild(_this.angle_3);

                    _this.angle_1.angle = 320;
                    _this.angle_2.angle = 320;
                    _this.angle_3.angle = 320;
                    _this.angle_1.y = 190;
                    _this.angle_2.x = 400;
                    _this.angle_2.y = 190;
                    _this.side_x.angle = 320;
                    _this.side_y.angle = 320;
                    _this.side_z.angle = 320;

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_x.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.angle_1.visible = true;
                        _this.angle_2.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_2.visible = true;
                        //  _this.angle_1.visible = true;
                    }
                }
                if (_this.askQuestion_b[0] == 'RHS') {
                    _this.side_x = _this.add.text(160, 285, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(55, 145, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(60, 145, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);


                    _this.side_y = _this.add.text(280, 160, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(245, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(250, 125, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_y.addChild(_this.graphics_y);

                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(380, 285, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(240, 300, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(245, 300, 50, 40);//x,y,width,height
                    _this.yellowBoxarr_z.addChild(_this.graphics_z);

                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(120, 170, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 170, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(280, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.sGroup.addChild(_this.side_x);
                    _this.sGroup.addChild(_this.side_y);
                    _this.sGroup.addChild(_this.side_z);
                    _this.sGroup.addChild(_this.angle_1);
                    _this.sGroup.addChild(_this.angle_2);
                    _this.sGroup.addChild(_this.angle_3);

                    _this.angle_1.angle = 320;
                    _this.angle_2.angle = 320;
                    _this.angle_3.angle = 320;
                    _this.angle_1.y = 190;
                    _this.angle_2.x = 400;
                    _this.angle_2.y = 190;
                    _this.side_x.angle = 320;
                    _this.side_y.angle = 320;
                    _this.side_z.angle = 320;

                    _this.side_x.visible = false;
                    //_this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                }

                _this.valueSound.play();
                _this.sandwich_Part_B();
            });

        }
        else {
            console.log("sandwich");
            _this.sandwich = _this.add.sprite(340, 170, 'sandwichanim');
            _this.sandwich.scale.setTo(1.7);
            // _this.sandwich_1.anchor.setTo(0.5, 0.5);

            _this.circle_one = _this.add.sprite(280, 170, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(295, 178, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(680, 170, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(695, 178, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(490, 390, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(505, 398, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(355, 300, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(370, 307, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(470, 130, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(485, 137, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(600, 300, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(615, 307, 'z');
            _this.applyingStyle_White(_this.z_val);
        }

    },
    waffer_firstScreen: function () {
        //in this function showing the waffer for part a and b. and numbers.
        if (_this.count1 > 2) {
            //first panel
            _this.sGroup = _this.add.group();
            //part b 
            _this.tweenGroup = _this.add.group();
            //randomizing the option and showing the option
            _this.askQuestion_b = ['SSS', 'SAS', 'ASA'];//'SSS', 'SAS', 'ASA'
            _this.shuffleArray(_this.askQuestion_b);
            //console.log(_this.askQuestion_b, "_this.askQuestion_b");

            _this.waffer = _this.add.sprite(150, 150, 'waffer_full');//this should be rotate 
            _this.waffer.scale.setTo(1.5, 1.5);//1.3, 0.7

            _this.waffer_dup = _this.add.sprite(150, 150, 'waffer_full');//this should be rotate 
            _this.waffer_dup.scale.setTo(1.5, 1.5);//1.3, 0.7

            _this.waffer_2 = _this.add.sprite(550, 150, 'waffer_full');// this we can keep as original//600
            _this.waffer_2.scale.setTo(1.5, 1.5);
            _this.waffer_2.alpha = 0;

            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            // var triangle = _this.add.graphics(0, 0);

            //................
            // Define the triangle vertices
            var vertexA = new Phaser.Point(335, 170);
            var vertexB = new Phaser.Point(485, 390);
            var vertexC = new Phaser.Point(640 - ((80 * _this.sinA) / _this.sinB), 170);

            // Calculate the midpoints of the triangle sides
            var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
            var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
            var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

            // Calculate the slopes of the triangle sides
            var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
            var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

            // Check if the slopes are parallel (vertical lines)
            if (slopeAB === slopeBC) {
                console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
            } else {
                // Calculate the x-coordinate of the circumcenter
                var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                // Calculate the y-coordinate of the circumcenter
                var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
            }
            //................
            // Create a new graphics object
            var triangle = _this.add.graphics(circumcenterX, circumcenterY);

            triangle.pivot.setTo(circumcenterX, circumcenterY); //................

            // Draw the triangle on the graphics object
            triangle.beginFill(0x65B4C3); // Set the color of the triangle
            triangle.moveTo(335, 170); // Set the starting point of the triangle
            triangle.lineTo(485, 390); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle.lineTo(335, 170); // Draw the third line of the triangle to close the shape
            triangle.endFill();

            triangle.alpha = 0;
            //Rotate the triangle
            triangle.rotation += 1.0472; // 60
            triangle.x = 220;
            triangle.y = 275;
            _this.waffer.mask = triangle;

            // Create a new graphics object
            var triangle_dup = _this.add.graphics(circumcenterX, circumcenterY);

            triangle_dup.pivot.setTo(circumcenterX, circumcenterY); //................
            // Draw the triangle on the graphics object
            triangle_dup.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_dup.moveTo(335, 170); // Set the starting point of the triangle
            triangle_dup.lineTo(485, 390); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_dup.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle_dup.lineTo(335, 170); // Draw the third line of the triangle to close the shape
            triangle_dup.endFill();

            triangle_dup.alpha = 0;
            triangle_dup.rotation += 1.0472; // 60
            triangle_dup.x = 220;
            triangle_dup.y = 275;
            _this.waffer_dup.mask = triangle_dup;
            _this.tweenGroup.addChild(_this.waffer_dup);
            _this.tweenGroup.addChild(triangle_dup);

            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            var triangle_2 = _this.add.graphics(0, 0);

            // Draw the triangle on the graphics object
            triangle_2.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_2.moveTo(335, 170); // Set the starting point of the triangle
            triangle_2.lineTo(485, 390); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_2.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle_2.lineTo(335, 170); // Draw the third line of the triangle to close the shape
            triangle_2.endFill();

            triangle_2.alpha = 0;
            triangle_2.x = 220;

            _this.waffer_2.mask = triangle_2;
            //* add tween to temp group and tween it to work space.
            tempDragAction = _this.add.tween(_this.tweenGroup);
            tempDragAction.to({ x: 350, y: 0 }, 1500, 'Linear', true, 0);
            tempDragAction.start();
            tempDragAction.onComplete.add(function () {
                _this.dragSound.play();
                //* add tween to temp group and tween it to work space.
                tempDragAction_2 = _this.add.tween(_this.tweenGroup);
                tempDragAction_2.to({ x: 300, y: 330, angle: -60 }, 2500, 'Linear', true, 0);
                tempDragAction_2.start();
                tempDragAction_2.onComplete.add(function () {
                    _this.dragSound.play();
                    _this.tweenGroup.destroy();
                    _this.waffer_2.alpha = 1;
                });
            });


            _this.time.events.add(5000, () => {


                // create a new graphics object. right side height
                _this.angle_1_line = _this.add.graphics(circumcenterX, circumcenterY);
                // set the line style
                _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
                // draw the line
                _this.angle_1_line.moveTo(335, 170);//straight line//x1,y1
                _this.angle_1_line.lineTo(485, 390);
                _this.angle_1_line.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170);
                _this.angle_1_line.lineTo(335, 170);
                _this.angle_1_line.endFill();
                _this.angle_1_line.pivot.setTo(circumcenterX, circumcenterY); //................
                //Rotate the triangle
                _this.angle_1_line.rotation += 1.0472; // 60
                _this.angle_1_line.x = 220;
                _this.angle_1_line.y = 275;


                if (_this.askQuestion_b[0] == 'SSS') {
                    _this.side_x = _this.add.text(280, 390, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(210, 330, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(215, 330, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(180, 250, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(100, 175, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(100, 175, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(370, 230, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(310, 155, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(310, 155, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(110, 390, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(260, 120, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(410, 340, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;


                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                }
                if (_this.askQuestion_b[0] == 'SAS') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(280, 390, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(210, 330, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(215, 330, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(180, 250, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(100, 175, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(100, 175, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(370, 230, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(310, 155, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(310, 155, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(110, 390, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(260, 120, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(410, 340, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);


                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                }
                if (_this.askQuestion_b[0] == 'ASA') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(280, 390, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(210, 330, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(215, 330, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(180, 250, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(100, 175, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(100, 175, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(370, 230, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(310, 155, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(310, 155, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(110, 390, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(260, 120, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(410, 340, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);


                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_x.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.angle_1.visible = true;
                        _this.angle_2.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_2.visible = true;
                        //  _this.angle_1.visible = true;
                    }
                }

                _this.valueSound.play();
                _this.waffer_Part_B();
            });
        }
        else {
            _this.waffer = _this.add.sprite(340, 170, 'wafferanim');
            _this.waffer.scale.setTo(2, 1.4);

            _this.circle_one = _this.add.sprite(280, 150, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(295, 158, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(580, 150, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(595, 158, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(470, 400, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(485, 408, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(440, 120, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(455, 127, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(530, 290, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(545, 297, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.wafferMask();
        }
    },
    cheese_firstScreen: function () {
        //in this function showing the cheese for part a and b. and numbers.
        if (_this.count1 > 2) {
            //first panel
            _this.sGroup = _this.add.group();
            _this.tweenGroup = _this.add.group();
            //part b 
            //randomizing the option and showing the option
            _this.askQuestion_b = ['SSS', 'SAS', 'ASA'];//'SSS', 'SAS', 'ASA'
            _this.shuffleArray(_this.askQuestion_b);

            _this.cheese = _this.add.sprite(150, 150, 'cheese_full');//this should be rotate 
            _this.cheese.scale.setTo(1.5, 1.5);

            _this.cheese_dup = _this.add.sprite(150, 150, 'cheese_full');//this should be rotate 
            _this.cheese_dup.scale.setTo(1.5, 1.5);

            _this.cheese_2 = _this.add.sprite(560, 150, 'cheese_full');// this we can keep as original
            _this.cheese_2.scale.setTo(1.5, 1.5);
            _this.cheese_2.alpha = 0;

            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            // var triangle = _this.add.graphics(0, 0);

            //................
            // Define the triangle vertices
            var vertexA = new Phaser.Point(180, 170);
            var vertexB = new Phaser.Point(330, 365);
            var vertexC = new Phaser.Point(475 - ((80 * _this.sinA) / _this.sinB), 170);

            // Calculate the midpoints of the triangle sides
            var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
            var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
            var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

            // Calculate the slopes of the triangle sides
            var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
            var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

            // Check if the slopes are parallel (vertical lines)
            if (slopeAB === slopeBC) {
                console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
            } else {
                // Calculate the x-coordinate of the circumcenter
                var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                // Calculate the y-coordinate of the circumcenter
                var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
            }
            //................
            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            var triangle = _this.add.graphics(circumcenterX, circumcenterY);

            triangle.pivot.setTo(circumcenterX, circumcenterY); //................


            // Draw the triangle on the graphics object
            triangle.beginFill(0x65B4C3); // Set the color of the triangle
            triangle.moveTo(180, 170); // Set the starting point of the triangle
            triangle.lineTo(330, 365); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle.lineTo(475 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle.lineTo(180, 170); // Draw the third line of the triangle to close the shape
            triangle.endFill();

            triangle.alpha = 0;

            // Rotate the triangle
            triangle.rotation += 3.31613; // 190
            triangle.x = 340;
            //  triangle.y = 105;

            _this.cheese.mask = triangle;

            //for tweening object
            // Create a new graphics object
            var triangle_dup = _this.add.graphics(circumcenterX, circumcenterY);

            triangle_dup.pivot.setTo(circumcenterX, circumcenterY); //................


            // Draw the triangle on the graphics object
            triangle_dup.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_dup.moveTo(180, 170); // Set the starting point of the triangle
            triangle_dup.lineTo(330, 365); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_dup.lineTo(475 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle_dup.lineTo(180, 170); // Draw the third line of the triangle to close the shape
            triangle_dup.endFill();

            triangle_dup.alpha = 0;

            // Rotate the triangle
            triangle_dup.rotation += 3.31613; // 190
            triangle_dup.x = 340;

            _this.cheese_dup.mask = triangle_dup;
            _this.tweenGroup.addChild(_this.cheese_dup);
            _this.tweenGroup.addChild(triangle_dup);

            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            var triangle_2 = _this.add.graphics(0, 0);

            // Draw the triangle on the graphics object
            triangle_2.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_2.moveTo(560, 170); // Set the starting point of the triangle
            triangle_2.lineTo(710, 365); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_2.lineTo(855 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle_2.lineTo(560, 170); // Draw the third line of the triangle to close the shape
            triangle_2.endFill();

            triangle_2.alpha = 0;

            _this.cheese_2.mask = triangle_2;

            // _this.tweenGroup.x = 300;
            // _this.tweenGroup.y = 300;
            // _this.tweenGroup.pivot.setTo(circumcenterX, circumcenterY);
            // var newAngle = _this.tweenGroup.angle + 170;
            // _this.game.add.tween(_this.tweenGroup).to({ angle: newAngle }, 5000, Phaser.Easing.Linear.None, true);

            //* add tween to temp group and tween it to work space.
            tempDragAction = _this.add.tween(_this.tweenGroup);
            tempDragAction.to({ x: 380, y: -10 }, 1500, 'Linear', true, 0);
            tempDragAction.start();
            tempDragAction.onComplete.add(function () {
                _this.dragSound.play();

                _this.panel_2.addChild(_this.tweenGroup);
                _this.tweenGroup.x = 250;
                _this.tweenGroup.y = 190;
                _this.tweenGroup.scale.setTo(1.1);
                _this.tweenGroup.pivot.setTo(circumcenterX, circumcenterY);
                var newAngle = _this.tweenGroup.angle + 170;
                tempDragAction_2 = _this.game.add.tween(_this.tweenGroup).to({ angle: newAngle }, 2500, Phaser.Easing.Linear.None, true);
                // tempDragAction_2.onComplete.add(function () {
                //     // _this.tweenGroup.destroy();
                // _this.cheese_2.alpha = 0.5;
                // });
            });


            _this.time.events.add(5000, () => {
                _this.valueSound.play();
                // create a new graphics object. right side height
                _this.angle_1_line = _this.add.graphics(circumcenterX, circumcenterY);
                _this.angle_1_line.pivot.setTo(circumcenterX, circumcenterY);
                // set the line style
                _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
                // draw the line
                _this.angle_1_line.moveTo(180, 170);//straight line//x1,y1
                _this.angle_1_line.lineTo(330, 365);
                _this.angle_1_line.lineTo(475 - ((80 * _this.sinA) / _this.sinB), 170);
                _this.angle_1_line.lineTo(180, 170);
                _this.angle_1_line.endFill();

                // Rotate the triangle
                _this.angle_1_line.rotation += 3.31613; // 190
                _this.angle_1_line.x = 340;


                if (_this.askQuestion_b[0] == 'SSS') {
                    _this.side_x = _this.add.text(370, 250, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(310, 180, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(315, 180, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(270, 380, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(200, 320, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(208, 320, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(200, 210, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(120, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(120, 135, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(410, 360, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(120, 330, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(270, 120, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // _this.angle_1.visible = false;
                    // _this.angle_2.visible = false;
                    // _this.angle_3.visible = false;

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                }
                if (_this.askQuestion_b[0] == 'SAS') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(370, 250, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(310, 180, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(315, 180, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(270, 380, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(200, 320, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(208, 320, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(200, 210, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(120, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(120, 135, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(410, 360, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(120, 330, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(270, 120, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);


                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                }
                if (_this.askQuestion_b[0] == 'ASA') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(370, 250, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(310, 180, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(315, 180, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(270, 380, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(200, 320, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(208, 320, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(200, 210, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(120, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(120, 135, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(410, 360, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(120, 330, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(270, 120, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);


                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                }
                _this.cheese_Part_B();
            });
        }
        else {
            _this.cheese = _this.add.sprite(350, 180, 'cheeseanim');
            _this.cheese.scale.setTo(1.9, 1.4);

            _this.circle_one = _this.add.sprite(290, 160, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(305, 168, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(590, 160, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(605, 168, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(480, 400, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(495, 408, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(440, 130, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(455, 137, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(560, 290, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(575, 297, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.cheeseMask();
        }
    },
    watermelon_firstScreen: function () {
        //in this function showing the watermelon for part a and b. and numbers.
        if (_this.count1 > 2) {
            //first panel
            _this.sGroup = _this.add.group();
            _this.tweenGroup = _this.add.group();
            //part b 
            //randomizing the option and showing the option
            _this.askQuestion_b = ['SSS', 'SAS', 'ASA'];//'SSS', 'SAS', 'ASA'
            _this.shuffleArray(_this.askQuestion_b);
            //console.log(_this.askQuestion_b, "_this.askQuestion_b");

            _this.watermelon = _this.add.sprite(150, 150, 'watermelon_full');//this should be rotate 
            _this.watermelon.scale.setTo(1.5, 1.5);

            _this.watermelon_dup = _this.add.sprite(150, 150, 'watermelon_full');//this should be rotate 
            _this.watermelon_dup.scale.setTo(1.5, 1.5);

            _this.watermelon_2 = _this.add.sprite(570, 170, 'watermelonanim');// this we can keep as original
            _this.watermelon_2.alpha = 0;
            //  _this.watermelon_2.scale.setTo(1.3);

            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            // var triangle = _this.add.graphics(0, 0);
            //................
            // Define the triangle vertices
            var vertexA = new Phaser.Point(160, 170);
            var vertexB = new Phaser.Point(295, 320);
            var vertexC = new Phaser.Point(420 - ((80 * _this.sinA) / _this.sinB), 180);

            // Calculate the midpoints of the triangle sides
            var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
            var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
            var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

            // Calculate the slopes of the triangle sides
            var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
            var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

            // Check if the slopes are parallel (vertical lines)
            if (slopeAB === slopeBC) {
                console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
            } else {
                // Calculate the x-coordinate of the circumcenter
                var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                // Calculate the y-coordinate of the circumcenter
                var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
            }
            //................
            // Create a new graphics object
            var triangle = _this.add.graphics(circumcenterX, circumcenterY);

            triangle.pivot.setTo(circumcenterX, circumcenterY); //................

            // Draw the triangle on the graphics object
            triangle.beginFill(0x65B4C3); // Set the color of the triangle
            triangle.moveTo(160, 170); // Set the starting point of the triangle
            triangle.lineTo(295, 320); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle.lineTo(420 - ((80 * _this.sinA) / _this.sinB), 180); // Draw the second line of the triangle
            triangle.lineTo(160, 170); // Draw the third line of the triangle to close the shape
            triangle.endFill();

            triangle.alpha = 0;

            // Rotate the triangle
            triangle.rotation += 3.14159; // 110
            triangle.x = 330;
            //  triangle.y = 120;

            _this.watermelon.mask = triangle;


            // Create a new graphics object for duplicate object
            var triangle_dup = _this.add.graphics(circumcenterX, circumcenterY);

            triangle_dup.pivot.setTo(circumcenterX, circumcenterY); //................

            // Draw the triangle on the graphics object
            triangle_dup.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_dup.moveTo(160, 170); // Set the starting point of the triangle
            triangle_dup.lineTo(295, 320); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_dup.lineTo(420 - ((80 * _this.sinA) / _this.sinB), 180); // Draw the second line of the triangle
            triangle_dup.lineTo(160, 170); // Draw the third line of the triangle to close the shape
            triangle_dup.endFill();

            triangle_dup.alpha = 0;

            // Rotate the triangle
            triangle_dup.rotation += 3.14159; // 110
            triangle_dup.x = 330;
            //  triangle.y = 120;

            _this.watermelon_dup.mask = triangle_dup;
            _this.tweenGroup.addChild(_this.watermelon_dup);
            _this.tweenGroup.addChild(triangle_dup);


            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            var triangle_2 = _this.add.graphics(0, 0);

            // Draw the triangle on the graphics object
            triangle_2.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_2.moveTo(570, 170); // Set the starting point of the triangle
            triangle_2.lineTo(705, 320); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_2.lineTo(830 - ((80 * _this.sinA) / _this.sinB), 180); // Draw the second line of the triangle
            triangle_2.lineTo(570, 170); // Draw the third line of the triangle to close the shape
            triangle_2.endFill();

            triangle_2.alpha = 0;

            _this.watermelon_2.mask = triangle_2;

            //* add tween to temp group and tween it to work space.
            tempDragAction = _this.add.tween(_this.tweenGroup);
            tempDragAction.to({ x: 380, y: -10 }, 1500, 'Linear', true, 0);
            tempDragAction.start();
            tempDragAction.onComplete.add(function () {
                _this.dragSound.play();

                _this.panel_2.addChild(_this.tweenGroup);
                _this.tweenGroup.x = 232;//272
                _this.tweenGroup.y = 167;//187
                _this.tweenGroup.scale.setTo(1.1);
                _this.tweenGroup.pivot.setTo(circumcenterX, circumcenterY);
                var newAngle = _this.tweenGroup.angle + 182;
                tempDragAction_2 = _this.game.add.tween(_this.tweenGroup).to({ x: 272, y: 187, angle: newAngle }, 2500, Phaser.Easing.Linear.None, true);
            });


            _this.time.events.add(5000, () => {
                // create a new graphics object. right side height
                _this.angle_1_line = _this.add.graphics(circumcenterX, circumcenterY);
                _this.angle_1_line.pivot.setTo(circumcenterX, circumcenterY); //................
                // set the line style
                _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
                // draw the line
                _this.angle_1_line.moveTo(160, 170);//straight line//x1,y1
                _this.angle_1_line.lineTo(295, 320);
                _this.angle_1_line.lineTo(420 - ((80 * _this.sinA) / _this.sinB), 180);
                _this.angle_1_line.lineTo(160, 170);
                _this.angle_1_line.endFill();

                // Rotate the triangle
                _this.angle_1_line.rotation += 3.14159; // 110
                _this.angle_1_line.x = 330;

                if (_this.askQuestion_b[0] == 'SSS') {
                    _this.side_x = _this.add.text(330, 210, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(265, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(270, 135, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(270, 330, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(200, 265, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(205, 265, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(170, 230, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(85, 158, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(90, 158, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(400, 320, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(150, 320, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(240, 130, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });
                }
                if (_this.askQuestion_b[0] == 'SAS') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(330, 210, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(265, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(270, 135, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(270, 330, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(200, 265, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(205, 265, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(170, 230, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(85, 158, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(90, 158, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(400, 320, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(150, 320, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(240, 130, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                }
                if (_this.askQuestion_b[0] == 'ASA') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(330, 210, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(265, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(270, 135, 50, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(270, 330, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(200, 265, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(205, 265, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(170, 230, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(85, 158, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(90, 158, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(400, 320, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(150, 320, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(240, 130, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_x.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.angle_1.visible = true;
                        _this.angle_2.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_2.visible = true;
                        //  _this.angle_1.visible = true;
                    }
                }
                _this.valueSound.play();
                _this.watermelon_Part_B();
            });

        }
        else {
            _this.watermelon = _this.add.image(320, 200, 'watermelon');
            _this.watermelon.scale.setTo(1.6);

            _this.circle_one = _this.add.sprite(270, 160, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(285, 168, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(580, 160, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(595, 168, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(460, 380, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(475, 388, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(420, 150, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(435, 157, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(540, 290, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(555, 297, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.watermelonMask();
        }
    },
    pizza_firstScreen: function () {
        //in this function showing the pizza for part a and b. and numbers.
        if (_this.count1 > 2) {
            //first panel
            _this.sGroup = _this.add.group();
            //part b 
            //randomizing the option and showing the option
            _this.askQuestion_b = ['SSS', 'SAS', 'ASA'];//'SSS', 'SAS', 'ASA'
            _this.shuffleArray(_this.askQuestion_b);
            // console.log(_this.askQuestion_b, "_this.askQuestion_b");
            // }

            _this.pizza = _this.add.sprite(190, 140, 'pizza');//this should be rotate 
            _this.pizza.scale.setTo(0.8, 0.8);

            _this.pizza_dup = _this.add.sprite(190, 140, 'pizza');//this should be rotate 
            _this.pizza_dup.scale.setTo(0.8, 0.8);

            _this.pizza_2 = _this.add.sprite(590, 140, 'pizza');// this we can keep as original
            _this.pizza_2.scale.setTo(0.8, 0.8);
            _this.pizza_2.alpha = 0;

            _this.pizza_dup_1 = _this.add.sprite(190, 140, 'pizza');//this should be rotate 
            _this.pizza_dup_1.scale.setTo(0.8, 0.8);



            //* add tween to temp group and tween it to work space.
            tempDragAction = _this.add.tween(_this.pizza_dup);
            tempDragAction.to({ x: 590, y: 140 }, 1500, 'Linear', true, 0);
            tempDragAction.start();
            tempDragAction.onComplete.add(function () {
                _this.dragSound.play();
                _this.pizza_dup.destroy();
                _this.pizza_2.alpha = 1;
                _this.sGroup.addChild(_this.pizza);
                _this.sGroup.angle = 40;
                _this.sGroup.x = 240;
                _this.sGroup.y = -90;
                _this.sGroup.alpha = 0;

                _this.pizza_dup_1.anchor.setTo(0.5, 0.5);
                _this.pizza_dup_1.x = 270;//290
                _this.pizza_dup_1.y = 260;//300
                tempDragAction_2 = _this.game.add.tween(_this.pizza_dup_1).to({ x: 295, y: 300, angle: 40 }, 2500, Phaser.Easing.Linear.None, true);
                tempDragAction_2.onComplete.add(function () {
                    _this.pizza_dup_1.destroy();
                    _this.sGroup.alpha = 1;

                });
            });


            _this.time.events.add(5000, () => {
                // create a new graphics object. right side height
                _this.angle_1_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
                // draw the line
                _this.angle_1_line.moveTo(190, 140);//straight line//x1,y1
                _this.angle_1_line.lineTo(395, 200);
                _this.angle_1_line.lineTo(218, 395);
                _this.angle_1_line.lineTo(190, 140);
                _this.angle_1_line.endFill();

                _this.sGroup.addChild(_this.angle_1_line);

                if (_this.askQuestion_b[0] == 'SSS') {
                    _this.side_x = _this.add.text(190, 210, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(110, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(120, 135, 40, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(370, 200, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(310, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(320, 125, 40, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(270, 350, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(200, 285, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(205, 285, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(280, 100, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 310, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(120, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                }
                if (_this.askQuestion_b[0] == 'SAS') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(190, 210, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(110, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(120, 135, 40, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(370, 200, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(310, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(320, 125, 40, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(270, 350, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(200, 285, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(205, 285, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(280, 100, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 310, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(120, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });
                }
                if (_this.askQuestion_b[0] == 'ASA') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(190, 210, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(110, 135, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(120, 135, 40, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(370, 200, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(310, 125, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(320, 125, 40, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(270, 350, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(200, 285, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(205, 285, 50, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(280, 100, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(430, 310, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(120, 370, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_x.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.angle_1.visible = true;
                        _this.angle_2.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_2.visible = true;
                        //  _this.angle_1.visible = true;
                    }
                }

                _this.valueSound.play();
                _this.pizza_Part_B();
            });
        }
        else {
            _this.pizza = _this.add.image(380, 150, 'pizza');
            _this.pizza.scale.setTo(0.9);

            _this.circle_one = _this.add.sprite(330, 110, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(345, 118, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(610, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(625, 188, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(390, 440, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(405, 448, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(470, 130, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(485, 137, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(500, 330, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(515, 337, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
    },
    biscuit_firstScreen: function () {
        //in this function showing the biscuit for part a and b. and numbers.
        if (_this.count1 > 2) {
            //first panel
            _this.sGroup = _this.add.group();
            _this.tweenGroup = _this.add.group();
            //part b 
            //randomizing the option and showing the option
            _this.askQuestion_b = ['SSS', 'SAS', 'ASA'];//'SSS', 'SAS', 'ASA'
            _this.shuffleArray(_this.askQuestion_b);

            _this.biscuit = _this.add.sprite(170, 170, 'biscuit_full');//this should be rotate 
            _this.biscuit.scale.setTo(1.3, 1.3);

            _this.biscuit_dup = _this.add.sprite(170, 170, 'biscuit_full');//this should be rotate 
            _this.biscuit_dup.scale.setTo(1.3, 1.3);

            _this.biscuit_2 = _this.add.sprite(580, 170, 'biscuit_full');// this we can keep as original
            _this.biscuit_2.scale.setTo(1.3, 1.3);

            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            // var triangle = _this.add.graphics(0, 0);
            //................
            // Define the triangle vertices
            var vertexA = new Phaser.Point(170, 170);
            var vertexB = new Phaser.Point(255, 367);
            var vertexC = new Phaser.Point(455 - ((80 * _this.sinA) / _this.sinB), 170);

            // Calculate the midpoints of the triangle sides
            var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
            var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
            var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

            // Calculate the slopes of the triangle sides
            var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
            var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

            // Check if the slopes are parallel (vertical lines)
            if (slopeAB === slopeBC) {
                console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
            } else {
                // Calculate the x-coordinate of the circumcenter
                var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                // Calculate the y-coordinate of the circumcenter
                var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
            }
            //................
            // Create a new graphics object
            var triangle = _this.add.graphics(circumcenterX, circumcenterY);

            triangle.pivot.setTo(circumcenterX, circumcenterY); //................

            // Draw the triangle on the graphics object
            triangle.beginFill(0x65B4C3); // Set the color of the triangle
            triangle.moveTo(170, 170); // Set the starting point of the triangle
            triangle.lineTo(285, 367); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle.lineTo(455 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle.lineTo(170, 170); // Draw the third line of the triangle to close the shape
            triangle.endFill();

            triangle.alpha = 0;

            // Rotate the triangle
            triangle.rotation += 2.79253; // 110
            triangle.x = 330;
            triangle.y = 240;

            _this.biscuit.mask = triangle;


            //for tween obj
            // Create a new graphics object
            var triangle_dup = _this.add.graphics(circumcenterX, circumcenterY);

            triangle_dup.pivot.setTo(circumcenterX, circumcenterY); //................

            // Draw the triangle on the graphics object
            triangle_dup.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_dup.moveTo(170, 170); // Set the starting point of the triangle
            triangle_dup.lineTo(285, 367); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_dup.lineTo(455 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle_dup.lineTo(170, 170); // Draw the third line of the triangle to close the shape
            triangle_dup.endFill();

            triangle_dup.alpha = 0;

            // Rotate the triangle
            triangle_dup.rotation += 2.79253; // 110
            triangle_dup.x = 330;
            triangle_dup.y = 240;

            _this.biscuit_dup.mask = triangle_dup;
            _this.tweenGroup.addChild(_this.biscuit_dup);
            _this.tweenGroup.addChild(triangle_dup);



            // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
            // Create a new graphics object
            var triangle_2 = _this.add.graphics(0, 0);

            // Draw the triangle on the graphics object
            triangle_2.beginFill(0x65B4C3); // Set the color of the triangle
            triangle_2.moveTo(580, 170); // Set the starting point of the triangle
            triangle_2.lineTo(695, 367); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
            triangle_2.lineTo(865 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
            triangle_2.lineTo(580, 170); // Draw the third line of the triangle to close the shape
            triangle_2.endFill();

            triangle_2.alpha = 0;

            _this.biscuit_2.mask = triangle_2;
            _this.biscuit_2.alpha = 0;

            //* add tween to temp group and tween it to work space.
            tempDragAction = _this.add.tween(_this.tweenGroup);
            tempDragAction.to({ x: 390, y: -40 }, 1500, 'Linear', true, 0);
            tempDragAction.start();
            tempDragAction.onComplete.add(function () {
                _this.dragSound.play();

                _this.panel_2.addChild(_this.tweenGroup);
                _this.tweenGroup.x = 180;//280
                _this.tweenGroup.y = 130;//215
                _this.tweenGroup.scale.setTo(1.1);
                _this.tweenGroup.pivot.setTo(circumcenterX, circumcenterY);
                var newAngle = _this.tweenGroup.angle + 200;
                tempDragAction_2 = _this.game.add.tween(_this.tweenGroup).to({ x: 280, y: 215, angle: newAngle }, 2500, Phaser.Easing.Linear.None, true);
            });



            _this.time.events.add(5000, () => {

                // create a new graphics object. right side height
                _this.angle_1_line = _this.add.graphics(circumcenterX, circumcenterY);

                _this.angle_1_line.pivot.setTo(circumcenterX, circumcenterY); //................
                // set the line style
                _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
                // draw the line
                _this.angle_1_line.moveTo(170, 170);//straight line//x1,y1
                _this.angle_1_line.lineTo(285, 367);
                _this.angle_1_line.lineTo(455 - ((80 * _this.sinA) / _this.sinB), 170);
                _this.angle_1_line.lineTo(170, 170);
                _this.angle_1_line.endFill();

                // Rotate the triangle
                _this.angle_1_line.rotation += 2.79253; // 110
                _this.angle_1_line.x = 330;
                _this.angle_1_line.y = 240;

                if (_this.askQuestion_b[0] == 'SSS') {
                    _this.side_x = _this.add.text(310, 380, _this.side_1);//160,250
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(245, 315, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(250, 315, 40, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(320, 190, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(255, 110, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(260, 110, 45, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(170, 250, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(90, 175, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(95, 175, 45, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(420, 300, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(200, 130, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(190, 400, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });
                }
                if (_this.askQuestion_b[0] == 'SAS') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(310, 380, _this.side_1);//160,250
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(245, 315, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(250, 315, 40, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(320, 190, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(255, 110, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(260, 110, 45, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(170, 250, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(90, 175, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(95, 175, 45, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(420, 300, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(200, 130, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(190, 400, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        // _this.angle_1.visible = true;
                        _this.side_y.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.angle_2.visible = true;
                        _this.angle_1.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_z.visible = true;
                    }
                }
                if (_this.askQuestion_b[0] == 'ASA') {
                    _this.displayOp = [1, 2, 3];
                    _this.shuffleArray(_this.displayOp);

                    _this.side_x = _this.add.text(310, 380, _this.side_1);//160,250
                    _this.applyingStyle_Orange(_this.side_x);

                    _this.graphics_x = _this.add.graphics();
                    _this.graphics_x.lineStyle(3, 0xF55B04,);
                    if (_this.side_1 < 10)
                        _this.graphics_x.drawRect(245, 315, 40, 40);//x,y,width,height
                    else
                        _this.graphics_x.drawRect(250, 315, 40, 40);//x,y,width,height

                    _this.graphics_x.visible = false;
                    _this.yellowBoxarr_x.addChild(_this.graphics_x);
                    _this.panel_1.addChild(_this.yellowBoxarr_x);

                    _this.side_y = _this.add.text(320, 190, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);

                    _this.graphics_y = _this.add.graphics();
                    _this.graphics_y.lineStyle(3, 0xF55B04,);
                    if (_this.side_2 < 10)
                        _this.graphics_y.drawRect(255, 110, 40, 40);//x,y,width,height
                    else
                        _this.graphics_y.drawRect(260, 110, 45, 40);//x,y,width,height

                    _this.yellowBoxarr_y.addChild(_this.graphics_y);
                    _this.graphics_y.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_y);

                    _this.side_z = _this.add.text(170, 250, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);

                    _this.graphics_z = _this.add.graphics();
                    _this.graphics_z.lineStyle(3, 0xF55B04,);
                    if (_this.side_3 < 10)
                        _this.graphics_z.drawRect(90, 175, 40, 40);//x,y,width,height
                    else
                        _this.graphics_z.drawRect(95, 175, 45, 40);//x,y,width,height

                    _this.yellowBoxarr_z.addChild(_this.graphics_z);
                    _this.graphics_z.visible = false;
                    _this.panel_1.addChild(_this.yellowBoxarr_z);

                    _this.angle_1 = _this.add.text(420, 300, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                    _this.angle_2 = _this.add.text(200, 130, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                    _this.angle_3 = _this.add.text(190, 400, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    _this.time.events.add(500, () => {
                        _this.twinkleEffect();
                    });

                    _this.angle_1.visible = false;
                    _this.angle_2.visible = false;
                    _this.angle_3.visible = false;

                    _this.side_x.visible = false;
                    _this.side_y.visible = false;
                    _this.side_z.visible = false;

                    if (_this.displayOp[0] == 1) {
                        _this.angle_1.visible = true;
                        // _this.angle_2.visible = true;
                        _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_x.visible = true;
                    }
                    if (_this.displayOp[0] == 2) {
                        _this.angle_1.visible = true;
                        _this.angle_2.visible = true;
                        // _this.angle_3.visible = true;
                        _this.side_y.visible = true;
                        _this.side_z.visible = true;
                    }
                    if (_this.displayOp[0] == 3) {
                        _this.side_x.visible = true;
                        _this.side_y.visible = true;
                        _this.angle_3.visible = true;
                        _this.angle_2.visible = true;
                        //  _this.angle_1.visible = true;
                    }
                }

                _this.valueSound.play();
                _this.biscuit_Part_B();
            });
        }
        else {
            _this.biscuit = _this.add.image(360, 150, 'biscuits');
            _this.biscuit.scale.setTo(1.5);

            _this.circle_one = _this.add.sprite(420, 90, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(435, 98, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(620, 330, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(635, 338, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(320, 370, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(335, 378, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 230, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 237, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(530, 200, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(545, 207, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(470, 375, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(485, 382, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.buiscuitMask();
        }
    },

    //below functions are used for masking the objects based on the angle.
    buiscuitMask: function () {
        // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
        // Create a new graphics object
        var triangle = _this.add.graphics(0, 0);

        // Draw the triangle on the graphics object
        triangle.beginFill(0x65B4C3); // Set the color of the triangle
        triangle.moveTo(445, 148); // Set the starting point of the triangle
        triangle.lineTo(612, 342); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
        triangle.lineTo(360 - ((252 * _this.sinA) / _this.sinC), 395); // Draw the second line of the triangle
        triangle.lineTo(445, 148); // Draw the third line of the triangle to close the shape
        triangle.endFill();
        triangle.endFill();
        triangle.alpha = 0;
        _this.biscuit.mask = triangle;

    },
    sandwitchMask: function () {
        console.log("sandwitch");

        // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
        // Create a new graphics object
        var triangle = _this.add.graphics(0, 0);

        // Draw the triangle on the graphics object
        triangle.beginFill(0x65B4C3); // Set the color of the triangle
        triangle.moveTo(320, 200); // Set the starting point of the triangle
        triangle.lineTo(485, 365); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
        triangle.lineTo(700 - ((200 * _this.sinA) / _this.sinB), 200); // Draw the second line of the triangle
        triangle.lineTo(320, 200); // Draw the third line of the triangle to close the shape
        triangle.endFill();

        triangle.alpha = 0;

        // _this.sandwich.mask = triangle;

        // create a new graphics object. right side height
        _this.swTriangle_1 = _this.add.graphics(0, 0);
        // set the line style
        _this.swTriangle_1.lineStyle(6, 0x40E0D0, 1);
        // draw the line
        _this.swTriangle_1.moveTo(280, 170);//straight line//x1,y1
        _this.swTriangle_1.lineTo(485, 395);
        //_this.swTriangle_1.lineTo(650, 200);

    },
    watermelonMask: function () {
        // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
        // Create a new graphics object
        var triangle = _this.add.graphics(0, 0);

        // Draw the triangle on the graphics object
        triangle.beginFill(0x65B4C3); // Set the color of the triangle
        triangle.moveTo(320, 200); // Set the starting point of the triangle
        triangle.lineTo(485, 365); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
        triangle.lineTo(700 - ((200 * _this.sinA) / _this.sinB), 200); // Draw the second line of the triangle
        triangle.lineTo(320, 200); // Draw the third line of the triangle to close the shape
        triangle.endFill();

        triangle.alpha = 0;

        _this.watermelon.mask = triangle;

        // // create a new graphics object. right side height
        // _this.swvar triangle_1 = _this.add.graphics(0, 0);
        // // set the line style
        // _this.swTriangle_1.lineStyle(6, 0x40E0D0, 1);
        // // draw the line
        // _this.swTriangle_1.moveTo(320, 200);//straight line//x1,y1
        // _this.swTriangle_1.lineTo(485, 365);
        // _this.swTriangle_1.lineTo(650, 200);


    },
    wafferMask: function () {
        // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
        // Create a new graphics object
        var triangle = _this.add.graphics(0, 0);

        // Draw the triangle on the graphics object
        triangle.beginFill(0x65B4C3); // Set the color of the triangle
        triangle.moveTo(335, 170); // Set the starting point of the triangle
        triangle.lineTo(485, 390); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
        triangle.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170); // Draw the second line of the triangle
        triangle.lineTo(335, 170); // Draw the third line of the triangle to close the shape
        triangle.endFill();

        triangle.alpha = 0;

        _this.waffer.mask = triangle;
    },
    cheeseMask: function () {
        // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
        // Create a new graphics object
        var triangle = _this.add.graphics(0, 0);

        // Draw the triangle on the graphics object
        triangle.beginFill(0x65B4C3); // Set the color of the triangle
        triangle.moveTo(350, 180); // Set the starting point of the triangle
        triangle.lineTo(500, 390); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
        triangle.lineTo(645 - ((80 * _this.sinA) / _this.sinB), 180); // Draw the second line of the triangle
        triangle.lineTo(350, 180); // Draw the third line of the triangle to close the shape
        triangle.endFill();

        triangle.alpha = 0;

        _this.cheese.mask = triangle;


    },

    //this function is used for second panel circle and numbers displaying.
    sandwich_Part_B: function () {
        //second panel
        if (_this.askQuestion_b[0] == 'SSS') {
            _this.stopAudio_QV();

            _this.Question_flag = 4;
            // if (_this.count1 == 3) {
            // _this.Ask_Question5.play();
            _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
            // }
            _this.circle_one = _this.add.sprite(510, 180, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(522, 186, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(820, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(832, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(670, 360, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(682, 366, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(573, 285, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 150, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 154, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

        }
        if (_this.askQuestion_b[0] == 'SAS') {
            _this.stopAudio_QV();

            _this.Question_flag = 5;
            // if (_this.count1 == 3) {
            // _this.Ask_Question6.play();
            _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(510, 180, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(522, 186, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(820, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(832, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(670, 360, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(682, 366, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(573, 285, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 150, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 154, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.circle_y.visible = false;
            _this.circle_z.visible = false;
            _this.x_val.visible = false;
            _this.y_val.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'ASA') {
            _this.stopAudio_QV();

            _this.Question_flag = 6;
            // if (_this.count1 == 3) {
            // _this.Ask_Question7.play();
            _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
            // }
            _this.circle_one = _this.add.sprite(510, 180, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(522, 186, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(820, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(832, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(670, 360, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(682, 366, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(573, 285, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 150, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 154, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            _this.circle_y.visible = false;
            _this.y_val.visible = false;
            _this.circle_z.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'RHS') {
            _this.stopAudio_QV();

            _this.Question_flag = 7;
            // if (_this.count1 == 3) {
            // _this.Ask_Question8.play();
            _this.Ask_Question8 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(510, 180, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(522, 186, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(820, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(832, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(670, 360, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(682, 366, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(573, 285, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 150, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 154, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            // _this.circle_three.visible = false;
            // _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            // _this.circle_y.visible = false;
            // _this.y_val.visible = false;
            // _this.circle_z.visible = false;
            // _this.z_val.visible = false;
        }
    },
    waffer_Part_B: function () {
        //second panel
        if (_this.askQuestion_b[0] == 'SSS') {
            _this.stopAudio_QV();

            _this.Question_flag = 4;
            // if (_this.count1 == 3) {
            // _this.Ask_Question5.play();
            _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
            // }
            _this.circle_one = _this.add.sprite(505, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(517, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(795, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(807, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(675, 395, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(687, 401, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 270, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(572, 275, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(650, 115, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(663, 119, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 260, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 265, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

        }
        if (_this.askQuestion_b[0] == 'SAS') {
            _this.stopAudio_QV();
            _this.Question_flag = 5;
            // if (_this.count1 == 3) {
            // _this.Ask_Question6.play();
            _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(505, 140, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(517, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(795, 140, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(807, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(675, 395, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(687, 401, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 270, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(572, 275, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(650, 115, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(663, 119, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 260, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 265, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.circle_y.visible = false;
            _this.circle_z.visible = false;
            _this.x_val.visible = false;
            _this.y_val.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'ASA') {
            _this.stopAudio_QV();
            _this.Question_flag = 6;
            // if (_this.count1 == 3) {
            // _this.Ask_Question7.play();
            _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
            // }
            _this.circle_one = _this.add.sprite(505, 140, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(517, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(795, 140, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(807, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(675, 395, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(687, 401, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(560, 270, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(572, 275, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(650, 115, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(663, 119, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(770, 260, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(782, 265, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            _this.circle_y.visible = false;
            _this.y_val.visible = false;
            _this.circle_z.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
            }
        }
    },
    cheese_Part_B: function () {
        //second panel
        if (_this.askQuestion_b[0] == 'SSS') {
            _this.stopAudio_QV();
            _this.Question_flag = 4;
            // if (_this.count1 == 3) {
            // _this.Ask_Question5.play();
            _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
            // }
            _this.circle_one = _this.add.sprite(515, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(527, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(790, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(802, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(700, 380, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(712, 386, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(570, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(582, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 125, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 129, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

        }
        if (_this.askQuestion_b[0] == 'SAS') {
            _this.stopAudio_QV();
            _this.Question_flag = 5;
            // if (_this.count1 == 3) {
            // _this.Ask_Question6.play();
            _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(515, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(527, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(790, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(802, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(700, 380, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(712, 386, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(570, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(582, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 125, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 129, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.circle_y.visible = false;
            _this.circle_z.visible = false;
            _this.x_val.visible = false;
            _this.y_val.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'ASA') {
            _this.stopAudio_QV();
            _this.Question_flag = 6;
            // if (_this.count1 == 3) {
            // _this.Ask_Question7.play();
            _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
            // }
            _this.circle_one = _this.add.sprite(515, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(527, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(790, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(802, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(700, 380, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(712, 386, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(570, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(582, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(670, 125, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(683, 129, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            _this.circle_y.visible = false;
            _this.y_val.visible = false;
            _this.circle_z.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
            }
        }
    },
    watermelon_Part_B: function () {
        //second panel
        if (_this.askQuestion_b[0] == 'SSS') {
            _this.stopAudio_QV();
            _this.Question_flag = 4;
            // if (_this.count1 == 3) {
            // _this.Ask_Question5.play();
            _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
            // }
            _this.circle_one = _this.add.sprite(520, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(532, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(785, 150, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(797, 156, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(685, 330, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(697, 336, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(590, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(602, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(660, 125, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(673, 129, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

        }
        if (_this.askQuestion_b[0] == 'SAS') {
            _this.stopAudio_QV();
            _this.Question_flag = 5;
            // if (_this.count1 == 3) {
            // _this.Ask_Question6.play();
            _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(520, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(532, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(785, 150, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(797, 156, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(685, 330, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(697, 336, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(590, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(602, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(660, 125, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(673, 129, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.circle_y.visible = false;
            _this.circle_z.visible = false;
            _this.x_val.visible = false;
            _this.y_val.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'ASA') {
            _this.stopAudio_QV();
            _this.Question_flag = 6;
            // if (_this.count1 == 3) {
            // _this.Ask_Question7.play();
            _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
            // }
            _this.circle_one = _this.add.sprite(520, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(532, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(785, 150, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(797, 156, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(685, 330, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(697, 336, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(590, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(602, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(660, 125, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(673, 129, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            _this.circle_y.visible = false;
            _this.y_val.visible = false;
            _this.circle_z.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
            }
        }
    },
    pizza_Part_B: function () {
        //second panel
        if (_this.askQuestion_b[0] == 'SSS') {
            _this.stopAudio_QV();
            _this.Question_flag = 4;
            // if (_this.count1 == 3) {
            // _this.Ask_Question5.play();
            _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
            // }
            _this.circle_one = _this.add.sprite(540, 110, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(552, 116, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(800, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(812, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(600, 395, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(612, 401, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(550, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(562, 254, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(680, 120, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(693, 123, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(730, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(742, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

        }
        if (_this.askQuestion_b[0] == 'SAS') {
            _this.stopAudio_QV();
            _this.Question_flag = 5;
            // if (_this.count1 == 3) {
            // _this.Ask_Question6.play();
            _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(540, 110, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(552, 116, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(800, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(812, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(600, 395, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(612, 401, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(550, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(562, 254, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(680, 120, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(693, 123, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(730, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(742, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.circle_y.visible = false;
            _this.circle_z.visible = false;
            _this.x_val.visible = false;
            _this.y_val.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'ASA') {
            _this.stopAudio_QV();
            _this.Question_flag = 6;
            // if (_this.count1 == 3) {
            // _this.Ask_Question7.play();
            _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
            // }
            _this.circle_one = _this.add.sprite(540, 110, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(552, 116, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(800, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(812, 186, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(600, 395, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(612, 401, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(550, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(562, 254, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(680, 120, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(693, 123, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(730, 280, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(742, 284, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            _this.circle_y.visible = false;
            _this.y_val.visible = false;
            _this.circle_z.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
            }
        }
    },
    biscuit_Part_B: function () {
        //second panel
        if (_this.askQuestion_b[0] == 'SSS') {
            _this.stopAudio_QV();
            _this.Question_flag = 4;
            // if (_this.count1 == 3) {
            // _this.Ask_Question5.play();
            _this.Ask_Question5 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a5.mp3');
            // }
            _this.circle_one = _this.add.sprite(530, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(542, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(795, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(807, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(680, 370, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(692, 376, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(590, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(602, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(660, 115, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(673, 119, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

        }
        if (_this.askQuestion_b[0] == 'SAS') {
            _this.stopAudio_QV();
            _this.Question_flag = 5;
            // if (_this.count1 == 3) {
            // _this.Ask_Question6.play();
            _this.Ask_Question6 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a6.mp3');
            // }
            _this.circle_one = _this.add.sprite(530, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(542, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(795, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(807, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(680, 370, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(692, 376, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(590, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(602, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(660, 115, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(673, 119, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.circle_y.visible = false;
            _this.circle_z.visible = false;
            _this.x_val.visible = false;
            _this.y_val.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
        }
        if (_this.askQuestion_b[0] == 'ASA') {
            _this.stopAudio_QV();
            _this.Question_flag = 6;
            // if (_this.count1 == 3) {
            // _this.Ask_Question7.play();
            _this.Ask_Question7 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a7.mp3');
            // }
            _this.circle_one = _this.add.sprite(530, 140, 'color_circle');//angle z
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.8);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.one_bInput);

            _this.one = _this.add.text(542, 146, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(795, 140, 'color_circle');//angle x
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.8);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.two_bInput);

            _this.two = _this.add.text(807, 146, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(680, 370, 'color_circle');//angle y
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.8);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.three_bInput);

            _this.three = _this.add.text(692, 376, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(590, 250, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.8);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.x_bInput);

            _this.x_val = _this.add.text(602, 255, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(660, 115, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.8);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.y_bInput);

            _this.y_val = _this.add.text(673, 119, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(750, 250, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.8);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.z_bInput);

            _this.z_val = _this.add.text(762, 254, 'z');
            _this.applyingStyle_White(_this.z_val);

            _this.circle_one.visible = false;
            _this.one.visible = false;
            _this.circle_two.visible = false;
            _this.two.visible = false;
            _this.circle_three.visible = false;
            _this.three.visible = false;

            _this.circle_x.visible = false;
            _this.x_val.visible = false;
            _this.circle_y.visible = false;
            _this.y_val.visible = false;
            _this.circle_z.visible = false;
            _this.z_val.visible = false;

            if (_this.displayOp[0] == 1) {
                _this.circle_one.visible = true;
                _this.one.visible = true;
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_y.visible = true;
                _this.y_val.visible = true;
            }
            if (_this.displayOp[0] == 2) {
                _this.circle_two.visible = true;
                _this.two.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_z.visible = true;
                _this.z_val.visible = true;
            }
            if (_this.displayOp[0] == 3) {
                _this.circle_x.visible = true;
                _this.x_val.visible = true;
                _this.circle_three.visible = true;
                _this.three.visible = true;
                _this.circle_one.visible = true;
                _this.one.visible = true;
            }
        }
    },

    //used for part a
    //the below functions are used for oninputdown. when clicking on the circles the value will display. and also protractor and scale also will display.
    oneInput: function () {
        _this.clickSound.play();
        _this.circle_one.frame = 0;
        _this.circle_one.inputEnabled = false;
        _this.circle_one.input.useHandCursor = false;
        _this.circle_one.name = "1";
        if (_this.optionCounter == 2)  //if 3 options are selected 
        {
            // console.log("done 3");
            _this.time.events.add(2500, () => {
                if (_this.protractor.exists) {
                    _this.time.events.add(1300, () => {
                        _this.tick.inputEnabled = true;
                        _this.tick.input.useHandCursor = true;
                        _this.checkASA();
                    });
                }
                else {
                    _this.checkASA();
                    console.log("done 3");
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                }

            });



            if (_this.circle_one) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
            if (_this.circle_two) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
            if (_this.circle_three) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
            if (_this.circle_x) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
            if (_this.circle_y) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
            if (_this.circle_z) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
        }

        _this.option_one_flag = 1;

        _this.optionCounter++;
        if (_this.objectsArray[_this.count1] == 'watermelon') {

            // create a new graphics object. right side height
            _this.angle_1_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_1_line.moveTo(700 - ((200 * _this.sinA) / _this.sinB), 200);//straight line//x1,y1
            _this.angle_1_line.lineTo(320, 200);
            _this.angle_1_line.lineTo(485, 365);
            // draw the arc
            _this.angle_1_line.arc(320, 200, 60, _this.math.degToRad(90 - _this.object_Angle_z - 2), _this.math.degToRad(0), true);

            _this.angle_1_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();
                // create a new graphics object. right side height
                _this.angle_arc_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line.arc(320, 200, 60, _this.math.degToRad(90 - _this.object_Angle_z - 2), _this.math.degToRad(0), true);
                _this.angle_arc_line.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.findingCongarence.push(_this.circle_one.name);
                    console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.valueSound.play();

                    // create a new graphics object. right side height
                    _this.angle_arc_line = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line.arc(320, 200, 60, _this.math.degToRad(90 - _this.object_Angle_z - 2), _this.math.degToRad(0), true);
                    _this.angle_arc_line.endFill();

                    _this.angle_1 = _this.add.text(285, 168, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {

            // create a new graphics object. right side height
            _this.angle_1_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_1_line.moveTo(680, 200);//straight line//x1,y1
            _this.angle_1_line.lineTo(330, 205);
            _this.angle_1_line.lineTo(500, 375);
            // draw the arc
            _this.angle_1_line.arc(320, 200, 60, _this.math.degToRad(90 - _this.object_Angle_z), _this.math.degToRad(3), true);

            _this.angle_1_line.endFill();

            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line.arc(320, 200, 60, _this.math.degToRad(90 - _this.object_Angle_z - 2), _this.math.degToRad(3), true);
                _this.angle_arc_line.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();

                    // create a new graphics object. right side height
                    _this.angle_arc_line = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line.arc(320, 200, 60, _this.math.degToRad(90 - _this.object_Angle_z - 2), _this.math.degToRad(0), true);
                    _this.angle_arc_line.endFill();

                    _this.angle_1 = _this.add.text(295, 178, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            // create a new graphics object. right side height
            _this.angle_1_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_1_line.moveTo(640 - ((80 * _this.sinA) / _this.sinB), 170);//straight line//x1,y1
            _this.angle_1_line.lineTo(335, 170);
            _this.angle_1_line.lineTo(485, 390);
            // draw the arc
            _this.angle_1_line.arc(335, 170, 60, _this.math.degToRad(90 - 35), _this.math.degToRad(0), true);

            _this.angle_1_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line.arc(335, 170, 60, _this.math.degToRad(90 - 35), _this.math.degToRad(0), true);
                _this.angle_arc_line.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(295, 158, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);

                    // create a new graphics object. right side height
                    _this.angle_arc_line = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line.arc(335, 170, 60, _this.math.degToRad(90 - 35), _this.math.degToRad(0), true);
                    _this.angle_arc_line.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            // create a new graphics object. right side height
            _this.angle_1_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_1_line.moveTo(645 - ((80 * _this.sinA) / _this.sinB), 180);//straight line//x1,y1
            _this.angle_1_line.lineTo(350, 180);
            _this.angle_1_line.lineTo(500, 390);
            // draw the arc
            _this.angle_1_line.arc(350, 180, 60, _this.math.degToRad(90 - 35), _this.math.degToRad(0), true);

            _this.angle_1_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();
                // create a new graphics object. right side height
                _this.angle_arc_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line.arc(350, 180, 60, _this.math.degToRad(90 - 35), _this.math.degToRad(0), true);
                _this.angle_arc_line.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(305, 168, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);

                    // create a new graphics object. right side height
                    _this.angle_arc_line = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line.arc(350, 180, 60, _this.math.degToRad(90 - 35), _this.math.degToRad(0), true);
                    _this.angle_arc_line.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {

            // create a new graphics object. right side height
            _this.angle_1_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_1_line.moveTo(610, 215);//straight line//x1,y1
            _this.angle_1_line.lineTo(377, 150);
            _this.angle_1_line.lineTo(412, 435);
            // draw the arc
            _this.angle_1_line.arc(377, 150, 60, _this.math.degToRad(90 - 10), _this.math.degToRad(15), true);

            _this.angle_1_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line.arc(377, 150, 60, _this.math.degToRad(90 - 10), _this.math.degToRad(15), true);
                _this.angle_arc_line.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(345, 118, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);

                    // create a new graphics object. right side height
                    _this.angle_arc_line = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line.arc(377, 150, 60, _this.math.degToRad(90 - 10), _this.math.degToRad(15), true);
                    _this.angle_arc_line.endFill();

                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            // create a new graphics object. right side height
            _this.angle_1_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_1_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_1_line.moveTo(370, 395 - 25);//straight line//x1,y1
            _this.angle_1_line.lineTo(445, 148);
            _this.angle_1_line.lineTo(612, 342);
            // draw the arc
            _this.angle_1_line.arc(445, 148, 60, _this.math.degToRad(90 + 18), _this.math.degToRad(50), true);

            _this.angle_1_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line.arc(445, 148, 60, _this.math.degToRad(90 + 18), _this.math.degToRad(50), true);
                _this.angle_arc_line.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(435, 98, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);

                    // create a new graphics object. right side height
                    _this.angle_arc_line = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line.arc(445, 148, 60, _this.math.degToRad(90 + 18), _this.math.degToRad(50), true);
                    _this.angle_arc_line.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
    },
    twoInput: function () {
        if (_this.optionCounter == 2)  //if 3 options are selected 
        {
            // console.log("done 3");
            _this.time.events.add(2500, () => {
                if (_this.protractor.exists) {//|| _this.scale_1.exists
                    _this.time.events.add(1300, () => {
                        _this.tick.inputEnabled = true;
                        _this.tick.input.useHandCursor = true;
                        _this.checkASA();
                    });
                }
                else {
                    _this.checkASA();
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                }

            });

            if (_this.circle_one) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
            if (_this.circle_two) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
            if (_this.circle_three) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
            if (_this.circle_x) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
            if (_this.circle_y) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
            if (_this.circle_z) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
        }
        _this.clickSound.play();
        _this.circle_two.frame = 0;
        _this.circle_two.inputEnabled = false;
        _this.circle_two.input.useHandCursor = false;
        _this.circle_two.name = "2";
        _this.optionCounter++;
        _this.option_two_flag = 1;
        if (_this.objectsArray[_this.count1] == 'watermelon') {

            // create a new graphics object. right side height
            _this.angle_2_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_2_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_2_line.moveTo(320, 200);
            _this.angle_2_line.lineTo(700 - ((200 * _this.sinA) / _this.sinB), 200);//straight line//x1,y1
            _this.angle_2_line.lineTo(485, 365);
            // draw the arc
            _this.angle_2_line.arc(700 - ((200 * _this.sinA) / _this.sinB), 200, 60, _this.math.degToRad(360 - 66 - 180), _this.math.degToRad(180), false);
            //  _this.angle_2_line.arc((700 - ((200 * _this.sinA) / _this.sinB)), 200, 60, _this.math.degToRad(180), _this.math.degToRad(180 - _this.object_Angle_x), true);
            _this.angle_2_line.endFill();

            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_2.arc(700 - ((200 * _this.sinA) / _this.sinB), 200, 60, _this.math.degToRad(360 - 66 - 180), _this.math.degToRad(180), false);
                _this.angle_arc_line_2.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(595, 168, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_2.arc(700 - ((200 * _this.sinA) / _this.sinB), 200, 60, _this.math.degToRad(360 - 66 - 180), _this.math.degToRad(180), false);
                    _this.angle_arc_line_2.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            // create a new graphics object. right side height
            _this.angle_2_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_2_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_2_line.moveTo(330, 205);
            _this.angle_2_line.lineTo(680, 200);//straight line//x1,y1
            _this.angle_2_line.lineTo(505, 380);
            // draw the arc
            _this.angle_2_line.arc(680, 200, 60, _this.math.degToRad(360 - 45 - 180), _this.math.degToRad(180), false);
            _this.angle_2_line.endFill();

            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_2.arc(680, 200, 60, _this.math.degToRad(360 - 48 - 180), _this.math.degToRad(180), false);
                _this.angle_arc_line_2.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(695, 178, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_2.arc(680, 200, 60, _this.math.degToRad(360 - 48 - 180), _this.math.degToRad(180), false);
                    _this.angle_arc_line_2.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            // create a new graphics object. right side height
            _this.angle_2_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_2_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_2_line.moveTo(335, 170);
            _this.angle_2_line.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170);//straight line//x1,y1
            _this.angle_2_line.lineTo(485, 390);
            // draw the arc
            _this.angle_2_line.arc(640 - ((80 * _this.sinA) / _this.sinB), 170, 60, _this.math.degToRad(180 - 70), _this.math.degToRad(180), false);
            _this.angle_2_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_2.arc(640 - ((80 * _this.sinA) / _this.sinB), 170, 60, _this.math.degToRad(180 - 70), _this.math.degToRad(180), false);
                _this.angle_arc_line_2.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(595, 158, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_2.arc(640 - ((80 * _this.sinA) / _this.sinB), 170, 60, _this.math.degToRad(180 - 70), _this.math.degToRad(180), false);
                    _this.angle_arc_line_2.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            // create a new graphics object. right side height
            _this.angle_2_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_2_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_2_line.moveTo(350, 180);
            _this.angle_2_line.lineTo(645 - ((80 * _this.sinA) / _this.sinB), 180);//straight line//x1,y1
            _this.angle_2_line.lineTo(500, 390);
            // draw the arc
            _this.angle_2_line.arc(645 - ((80 * _this.sinA) / _this.sinB), 180, 60, _this.math.degToRad(180 - 70), _this.math.degToRad(180), false);
            _this.angle_2_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_2.arc(645 - ((80 * _this.sinA) / _this.sinB), 180, 60, _this.math.degToRad(180 - 70), _this.math.degToRad(180), false);
                _this.angle_arc_line_2.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(605, 168, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_2.arc(645 - ((80 * _this.sinA) / _this.sinB), 180, 60, _this.math.degToRad(180 - 70), _this.math.degToRad(180), false);
                    _this.angle_arc_line_2.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            // create a new graphics object. right side height
            _this.angle_2_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_2_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_2_line.moveTo(377, 150);
            _this.angle_2_line.lineTo(610, 215);//straight line//x1,y1
            _this.angle_2_line.lineTo(412, 435);
            // draw the arc
            _this.angle_2_line.arc(610, 215, 60, _this.math.degToRad(360 - 45 - 180), _this.math.degToRad(195), false);
            _this.angle_2_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_2.arc(610, 215, 60, _this.math.degToRad(360 - 49 - 180), _this.math.degToRad(193), false);
                _this.angle_arc_line_2.endFill();

            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(625, 188, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_2.arc(610, 215, 60, _this.math.degToRad(360 - 49 - 180), _this.math.degToRad(193), false);
                    _this.angle_arc_line_2.endFill();

                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            // create a new graphics object. right side height
            _this.angle_2_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_2_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_2_line.moveTo(445, 148);
            _this.angle_2_line.lineTo(612, 342);//straight line//x1,y1
            _this.angle_2_line.lineTo(370, 395 - 25);
            // draw the arc
            _this.angle_2_line.arc(612, 342, 60, _this.math.degToRad(170), _this.math.degToRad(180 + 50), false);
            _this.angle_2_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_2.arc(612, 342, 60, _this.math.degToRad(173), _this.math.degToRad(180 + 50), false);
                _this.angle_arc_line_2.endFill();

            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(635, 338, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_2 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_2.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_2.arc(612, 342, 60, _this.math.degToRad(173), _this.math.degToRad(180 + 50), false);
                    _this.angle_arc_line_2.endFill();

                });
            }
            _this.potractor_flag = 1;
        }
    },
    threeInput: function () {
        if (_this.optionCounter == 2)  //if 3 options are selected 
        {
            // console.log("done 3");
            _this.time.events.add(2500, () => {
                if (_this.protractor.exists) {
                    _this.time.events.add(1300, () => {
                        _this.tick.inputEnabled = true;
                        _this.tick.input.useHandCursor = true;
                        _this.checkASA();
                    });
                }
                else {
                    _this.checkASA();
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                }

            });



            if (_this.circle_one) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
            if (_this.circle_two) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
            if (_this.circle_three) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
            if (_this.circle_x) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
            if (_this.circle_y) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
            if (_this.circle_z) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
        }
        _this.clickSound.play();
        _this.circle_three.frame = 0;
        _this.circle_three.inputEnabled = false;
        _this.circle_three.input.useHandCursor = false;
        _this.circle_three.name = "3";
        _this.option_three_flag = 1;
        _this.optionCounter++;
        if (_this.objectsArray[_this.count1] == 'watermelon') {

            // create a new graphics object. right side height
            _this.angle_3_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_3_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_3_line.moveTo(700 - ((200 * _this.sinA) / _this.sinB), 200);
            _this.angle_3_line.lineTo(485, 365);//straight line//x1,y1
            _this.angle_3_line.lineTo(320, 200);
            // draw the arc
            _this.angle_3_line.arc(485, 365, 60, _this.math.degToRad(360 - 55 - 80), _this.math.degToRad(295), false);
            _this.angle_3_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_3.arc(485, 365, 60, _this.math.degToRad(360 - 55 - 80), _this.math.degToRad(295), false);
                _this.angle_arc_line_3.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(475, 388, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_3.arc(485, 365, 60, _this.math.degToRad(360 - 55 - 80), _this.math.degToRad(295), false);
                    _this.angle_arc_line_3.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            // create a new graphics object. right side height
            _this.angle_3_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_3_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_3_line.moveTo(680, 200);
            _this.angle_3_line.lineTo(505, 380);//straight line//x1,y1
            _this.angle_3_line.lineTo(330, 205);
            // draw the arc
            _this.angle_3_line.arc(505, 380, 60, _this.math.degToRad(360 - 45 - 90), _this.math.degToRad(315), false);
            _this.angle_3_line.endFill();

            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_3.arc(505, 380, 60, _this.math.degToRad(360 - 45 - 90), _this.math.degToRad(315), false);
                _this.angle_arc_line_3.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(505, 398, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_3.arc(505, 380, 60, _this.math.degToRad(360 - 45 - 90), _this.math.degToRad(315), false);
                    _this.angle_arc_line_3.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            // create a new graphics object. right side height
            _this.angle_3_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_3_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_3_line.moveTo(640 - ((80 * _this.sinA) / _this.sinB), 170);
            _this.angle_3_line.lineTo(485, 390);//straight line//x1,y1
            _this.angle_3_line.lineTo(335, 170);
            // draw the arc
            _this.angle_3_line.arc(485, 390, 60, _this.math.degToRad(360 - 45 - 80), _this.math.degToRad(290), false);
            _this.angle_3_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();
                // create a new graphics object. right side height
                _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_3.arc(485, 390, 60, _this.math.degToRad(360 - 43 - 80), _this.math.degToRad(292), false);
                _this.angle_arc_line_3.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(485, 408, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_3.arc(485, 390, 60, _this.math.degToRad(360 - 43 - 80), _this.math.degToRad(292), false);
                    _this.angle_arc_line_3.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            // create a new graphics object. right side height
            _this.angle_3_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_3_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_3_line.moveTo(645 - ((80 * _this.sinA) / _this.sinB), 180);
            _this.angle_3_line.lineTo(500, 390);//straight line//x1,y1
            _this.angle_3_line.lineTo(350, 180);
            // draw the arc
            _this.angle_3_line.arc(500, 390, 60, _this.math.degToRad(360 - 45 - 80), _this.math.degToRad(290), false);
            _this.angle_3_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_3.arc(500, 390, 60, _this.math.degToRad(360 - 45 - 80), _this.math.degToRad(290), false);
                _this.angle_arc_line_3.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(495, 408, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_3.arc(500, 390, 60, _this.math.degToRad(360 - 45 - 80), _this.math.degToRad(290), false);
                    _this.angle_arc_line_3.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            // create a new graphics object. right side height
            _this.angle_3_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_3_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_3_line.moveTo(610, 215);
            _this.angle_3_line.lineTo(412, 435);//straight line//x1,y1
            _this.angle_3_line.lineTo(377, 150);
            // draw the arc
            _this.angle_3_line.arc(412, 435, 60, _this.math.degToRad(360 - 10 - 90), _this.math.degToRad(315), false);
            _this.angle_3_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_3.arc(412, 435, 60, _this.math.degToRad(360 - 5 - 90), _this.math.degToRad(315), false);
                _this.angle_arc_line_3.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(405, 448, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_3.arc(412, 435, 60, _this.math.degToRad(360 - 5 - 90), _this.math.degToRad(315), false);
                    _this.angle_arc_line_3.endFill();

                });
            }
            _this.potractor_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            // create a new graphics object. right side height
            _this.angle_3_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_3_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_3_line.moveTo(612, 342);
            _this.angle_3_line.lineTo(370, 395 - 25);//straight line//x1,y1
            _this.angle_3_line.lineTo(445, 148);
            // draw the arc
            _this.angle_3_line.arc(370, 395 - 25, 60, _this.math.degToRad(290), _this.math.degToRad(290 + 60), false);
            _this.angle_3_line.endFill();
            if (_this.potractor_flag == 0) {
                _this.protractorShow();

                // create a new graphics object. right side height
                _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                // set the line style
                _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                _this.angle_arc_line_3.arc(370, 395 - 25, 60, _this.math.degToRad(287), _this.math.degToRad(290 + 62), false);
                _this.angle_arc_line_3.endFill();
            }
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(335, 378, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);

                    // create a new graphics object. right side height
                    _this.angle_arc_line_3 = _this.add.graphics(0, 0);
                    // set the line style
                    _this.angle_arc_line_3.lineStyle(6, 0x40E0D0, 1);
                    _this.angle_arc_line_3.arc(370, 395 - 25, 60, _this.math.degToRad(287), _this.math.degToRad(290 + 62), false);
                    _this.angle_arc_line_3.endFill();
                });
            }
            _this.potractor_flag = 1;
        }
    },
    xInput: function () {
        if (_this.optionCounter == 2)  //if 3 options are selected 
        {
            // console.log("done 3");
            // _this.time.events.add(1800, () => {
            //     _this.tick.inputEnabled = true;
            //     _this.tick.input.useHandCursor = true;
            // });
            _this.time.events.add(2500, () => {
                if (_this.scale_1.exists) {
                    _this.time.events.add(1300, () => {
                        _this.checkASA();
                        _this.tick.inputEnabled = true;
                        _this.tick.input.useHandCursor = true;
                    });
                }
                else {
                    _this.checkASA();
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                }

            });
            if (_this.circle_one) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
            if (_this.circle_two) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
            if (_this.circle_three) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
            if (_this.circle_x) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
            if (_this.circle_y) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
            if (_this.circle_z) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
        }
        _this.clickSound.play();
        _this.circle_x.frame = 0;
        _this.circle_x.inputEnabled = false;
        _this.circle_x.input.useHandCursor = false;
        _this.circle_x.name = 'x';
        _this.input_x_flag = 1;
        _this.optionCounter++;
        if (_this.objectsArray[_this.count1] == 'watermelon') {

            // create a new graphics object. right side height
            _this.angle_6_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_6_line.lineStyle(6, 0x40E0D0, 1);
            _this.angle_6_line.moveTo(485, 365);//straight line//x1,y1
            _this.angle_6_line.lineTo(320, 200);

            _this.angle_6_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            // create a new graphics object. right side height
            _this.angle_6_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_6_line.lineStyle(6, 0x40E0D0, 1);
            _this.angle_6_line.moveTo(505, 380);//straight line//x1,y1
            _this.angle_6_line.lineTo(330, 205);

            _this.angle_6_line.endFill();

            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(370, 307, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            // create a new graphics object. right side height
            _this.angle_6_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_6_line.lineStyle(6, 0x40E0D0, 1);
            _this.angle_6_line.moveTo(485, 390);//straight line//x1,y1
            _this.angle_6_line.lineTo(335, 170);

            _this.angle_6_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            // create a new graphics object. right side height
            _this.angle_6_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_6_line.lineStyle(6, 0x40E0D0, 1);
            _this.angle_6_line.moveTo(500, 390);//straight line//x1,y1
            _this.angle_6_line.lineTo(350, 180);

            _this.angle_6_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            // create a new graphics object. right side height
            _this.angle_6_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_6_line.lineStyle(6, 0x40E0D0, 1);
            _this.angle_6_line.moveTo(412, 435);//straight line//x1,y1
            _this.angle_6_line.lineTo(377, 150);

            _this.angle_6_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            // create a new graphics object. right side height
            _this.angle_6_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_6_line.lineStyle(6, 0x40E0D0, 1);
            _this.angle_6_line.moveTo(445, 148);//straight line//x1,y1
            _this.angle_6_line.lineTo(370, 395 - 25);

            _this.angle_6_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 237, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            _this.scale_flag = 1;
        }
    },
    yInput: function () {
        if (_this.optionCounter == 2)  //if 3 options are selected 
        {
            // console.log("done 3");
            _this.time.events.add(2500, () => {
                if (_this.scale_1.exists) {
                    _this.time.events.add(1300, () => {
                        _this.checkASA();
                        _this.tick.inputEnabled = true;
                        _this.tick.input.useHandCursor = true;
                    });
                }
                else {
                    _this.checkASA();
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                }

            });
            if (_this.circle_one) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
            if (_this.circle_two) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
            if (_this.circle_three) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
            if (_this.circle_x) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
            if (_this.circle_y) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
            if (_this.circle_z) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
        }
        _this.clickSound.play();
        _this.circle_y.frame = 0;
        _this.circle_y.inputEnabled = false;
        _this.circle_y.input.useHandCursor = false;
        _this.circle_y.name = 'y';
        _this.input_y_flag = 1;
        _this.optionCounter++;
        if (_this.objectsArray[_this.count1] == 'watermelon') {
            // create a new graphics object. right side height
            _this.angle_4_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_4_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_4_line.moveTo(320, 200);
            _this.angle_4_line.lineTo(700 - ((200 * _this.sinA) / _this.sinB), 200);

            _this.angle_4_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(435, 157, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            // create a new graphics object. right side height
            _this.angle_4_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_4_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_4_line.moveTo(330, 205);
            _this.angle_4_line.lineTo(680, 200);

            _this.angle_4_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(485, 137, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            // create a new graphics object. right side height
            _this.angle_4_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_4_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_4_line.moveTo(335, 170);
            _this.angle_4_line.lineTo(640 - ((80 * _this.sinA) / _this.sinB), 170);

            _this.angle_4_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(455, 127, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            // create a new graphics object. right side height
            _this.angle_4_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_4_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_4_line.moveTo(350, 180);
            _this.angle_4_line.lineTo(645 - ((80 * _this.sinA) / _this.sinB), 180);

            _this.angle_4_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(455, 137, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            // create a new graphics object. right side height
            _this.angle_4_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_4_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_4_line.moveTo(377, 150);
            _this.angle_4_line.lineTo(610, 215);

            _this.angle_4_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(485, 137, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            // create a new graphics object. right side height
            _this.angle_4_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_4_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_4_line.moveTo(445, 148);
            _this.angle_4_line.lineTo(612, 342);

            _this.angle_4_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(545, 207, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.scale_flag = 1;
        }
    },
    zInput: function () {
        if (_this.optionCounter == 2)  //if 3 options are selected 
        {
            // console.log("done 3");
            _this.time.events.add(2500, () => {
                if (_this.scale_1.exists) {
                    _this.time.events.add(1300, () => {
                        _this.checkASA();
                        _this.tick.inputEnabled = true;
                        _this.tick.input.useHandCursor = true;
                    });
                }
                else {
                    _this.checkASA();
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                }

            });
            if (_this.circle_one) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
            if (_this.circle_two) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
            if (_this.circle_three) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
            if (_this.circle_x) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
            if (_this.circle_y) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
            if (_this.circle_z) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
        }
        _this.clickSound.play();
        _this.circle_z.frame = 0;
        _this.circle_z.inputEnabled = false;
        _this.circle_z.input.useHandCursor = false;
        _this.circle_z.name = 'z';
        _this.input_z_flag = 1;
        _this.optionCounter++;
        if (_this.objectsArray[_this.count1] == 'watermelon') {
            // create a new graphics object. right side height
            _this.angle_5_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_5_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_5_line.moveTo(700 - ((200 * _this.sinA) / _this.sinB), 200);
            _this.angle_5_line.lineTo(485, 365);//straight line//x1,y1
            //_this.angle_1_line.lineTo(320, 200);

            _this.angle_5_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(555, 297, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            // create a new graphics object. right side height
            _this.angle_5_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_5_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_5_line.moveTo(680, 200);
            _this.angle_5_line.lineTo(505, 380);//straight line//x1,y1
            //_this.angle_1_line.lineTo(320, 200);

            _this.angle_5_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(615, 307, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            // create a new graphics object. right side height
            _this.angle_5_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_5_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_5_line.moveTo(640 - ((80 * _this.sinA) / _this.sinB), 170);
            _this.angle_5_line.lineTo(485, 390);//straight line//x1,y1
            //_this.angle_1_line.lineTo(320, 200);

            _this.angle_5_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(545, 297, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            // create a new graphics object. right side height
            _this.angle_5_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_5_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_5_line.moveTo(645 - ((80 * _this.sinA) / _this.sinB), 180);
            _this.angle_5_line.lineTo(500, 390);//straight line//x1,y1

            _this.angle_5_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(575, 297, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            // create a new graphics object. right side height
            _this.angle_5_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_5_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_5_line.moveTo(610, 215);
            _this.angle_5_line.lineTo(412, 435);//straight line//x1,y1
            //_this.angle_1_line.lineTo(320, 200);

            _this.angle_5_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(515, 337, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.scale_flag = 1;
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            // create a new graphics object. right side height
            _this.angle_5_line = _this.add.graphics(0, 0);
            // set the line style
            _this.angle_5_line.lineStyle(6, 0x40E0D0, 1);
            // draw the line
            _this.angle_5_line.moveTo(612, 342);
            _this.angle_5_line.lineTo(370, 395 - 25);//straight line//x1,y1

            _this.angle_5_line.endFill();
            if (_this.scale_flag == 0 && _this.count1 == 0)
                _this.scaleShow();
            else {
                _this.time.events.add(1000, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(485, 382, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.scale_flag = 1;
        }
    },

    //these functions are used for calling numberpad based on which circle is clicked. used for part b.
    one_bInput: function () {
        _this.clickSound.play();
        _this.circle_one.frame = 0;
        _this.circle_one.inputEnabled = false;
        _this.circle_one.input.useHandCursor = false;
        _this.one_b_flag = 1;
        _this.addNumberPad();
        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
    },
    two_bInput: function () {
        _this.clickSound.play();
        _this.circle_two.frame = 0;
        _this.circle_two.inputEnabled = false;
        _this.circle_two.input.useHandCursor = false;
        _this.two_b_flag = 1;
        _this.addNumberPad();
        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
    },
    three_bInput: function () {
        _this.clickSound.play();
        _this.circle_three.frame = 0;
        _this.circle_three.inputEnabled = false;
        _this.circle_three.input.useHandCursor = false;
        _this.three_b_flag = 1;
        _this.addNumberPad();
        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
    },
    x_bInput: function () {
        _this.clickSound.play();
        _this.circle_x.frame = 0;
        _this.circle_x.inputEnabled = false;
        _this.circle_x.input.useHandCursor = false;
        _this.x_b_flag = 1;
        _this.addNumberPad();
        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
    },
    y_bInput: function () {
        _this.clickSound.play();
        _this.circle_y.frame = 0;
        _this.circle_y.inputEnabled = false;
        _this.circle_y.input.useHandCursor = false;
        _this.y_b_flag = 1;
        _this.addNumberPad();
        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
    },
    z_bInput: function () {
        _this.clickSound.play();
        _this.circle_z.frame = 0;
        _this.circle_z.inputEnabled = false;
        _this.circle_z.input.useHandCursor = false;
        _this.z_b_flag = 1;
        _this.addNumberPad();
        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = false; _this.circle_one.input.useHandCursor = false; }
        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = false; _this.circle_two.input.useHandCursor = false; }
        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = false; _this.circle_three.input.useHandCursor = false; }
        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = false; _this.circle_x.input.useHandCursor = false; }
        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = false; _this.circle_y.input.useHandCursor = false; }
        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = false; _this.circle_z.input.useHandCursor = false; }
    },

    //protractor will tween. only once it will show. when protractor flag will one then it will not show the protractor.
    protractorShow: function () {

        if (_this.option_one_flag == 1) {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                // _this.protractor = _this.add.image(540, 180, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 130;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(310, 196, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 182;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 130, y: 20, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_one.destroy();
                    _this.protractor.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(285, 168, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            if (_this.objectsArray[_this.count1] == 'sandwich') {
                // _this.protractor = _this.add.image(550, 190, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 130;

                _this.protractor = _this.add.image(320, 200, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 180;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 140, y: 20, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play                   
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_one.destroy();
                    _this.protractor.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(295, 178, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            if (_this.objectsArray[_this.count1] == 'waffer') {
                // _this.protractor = _this.add.image(550, 158, 'protractor');//55 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 132;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(320, 170, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 180;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 130, y: 0, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_one.destroy();
                    _this.protractor.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(295, 158, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            if (_this.objectsArray[_this.count1] == 'cheese') {
                // _this.protractor = _this.add.image(570, 160, 'protractor');//55 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 130;
                // _this.protractor.alpha = 0;

                // _this.protractor = _this.add.image(342, 176, 'inProtc');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 3;
                // _this.protractor.anchor.setTo(0.5, 0.5);
                // _this.protractor_2 = _this.add.image(342, 176, 'outProtc');//45 degree
                // _this.protractor_2.scale.setTo(0.5, 0.5);
                // _this.protractor_2.angle = -177;
                // _this.protractor_2.anchor.setTo(0.5, 0.5);
                // _this.protractor.alpha = 0;
                // _this.protractor_2.alpha = 0;

                _this.protractor = _this.add.image(342, 175, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 182;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 130, y: 0, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                    //  _this.protractor_2.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_one.destroy();
                    _this.protractor.destroy();
                    // _this.protractor_2.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(305, 168, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            if (_this.objectsArray[_this.count1] == 'pizza') {
                // _this.protractor = _this.add.image(585, 205, 'protractor');//55 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 150;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(371, 144, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 196;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 180, y: -30, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_one.destroy();
                    _this.protractor.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(345, 118, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            if (_this.objectsArray[_this.count1] == 'biscuit') {
                // _this.protractor = _this.add.image(600, 305, 'protractor');//60 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 180;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(443, 138, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 229;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 180, y: -20, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_one.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_one.destroy();
                    _this.protractor.destroy();
                    _this.one.destroy();
                    _this.angle_1_line.destroy();
                    _this.angle_1 = _this.add.text(435, 98, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_1);
                });
            }
            _this.option_one_flag = 0;
        }
        if (_this.option_two_flag == 1) {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                // _this.protractor = _this.add.image(470, 400, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 250;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(565, 198, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = -65;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 350, y: 20, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.protractor.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(595, 168, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                });
            }
            if (_this.objectsArray[_this.count1] == 'sandwich') {
                // _this.protractor = _this.add.image(540, 365, 'protractor');//45 degree//905, 180
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 266;//130
                // _this.protractor.alpha = 0;//0

                _this.protractor = _this.add.image(690, 198, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = -45;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 420, y: 20, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.protractor.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(695, 178, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                });
            }
            if (_this.objectsArray[_this.count1] == 'waffer') {

                // _this.protractor = _this.add.image(495, 375, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 246;
                // _this.protractor.alpha = 0;

                // _this.protractor = _this.add.image(572, 167, 'inProtc');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.anchor.setTo(0.5, 0.5);
                // _this.protractor_2 = _this.add.image(572, 167, 'outProtc');//45 degree
                // _this.protractor_2.scale.setTo(0.5, 0.5);
                // _this.protractor_2.angle = -70;
                // _this.protractor_2.anchor.setTo(0.5, 0.5);
                // _this.protractor.alpha = 0;
                // _this.protractor_2.alpha = 0;

                _this.protractor = _this.add.image(575, 168, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = -65;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 350, y: 0, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                    // _this.protractor_2.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.protractor.destroy();
                    // _this.protractor_2.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(595, 158, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                });
            }
            if (_this.objectsArray[_this.count1] == 'cheese') {
                // _this.protractor = _this.add.image(498, 386, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 247;
                // _this.protractor.alpha = 0;

                // _this.protractor = _this.add.image(580, 176, 'inProtc');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.anchor.setTo(0.5, 0.5);
                // _this.protractor_2 = _this.add.image(580, 176, 'outProtc');//45 degree
                // _this.protractor_2.scale.setTo(0.5, 0.5);
                // _this.protractor_2.angle = -70;
                // _this.protractor_2.anchor.setTo(0.5, 0.5);
                // _this.protractor.alpha = 0;
                // _this.protractor_2.alpha = 0;

                _this.protractor = _this.add.image(580, 175, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = -70;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 350, y: 0, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                    // _this.protractor_2.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.protractor.destroy();
                    // _this.protractor_2.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(605, 168, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                });
            }
            if (_this.objectsArray[_this.count1] == 'pizza') {
                // _this.protractor = _this.add.image(465, 380, 'protractor');//55 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 267;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(615, 210, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = -48;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 350, y: 20, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.protractor.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(625, 188, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                });
            }
            if (_this.objectsArray[_this.count1] == 'biscuit') {
                // _this.protractor = _this.add.image(398, 380, 'protractor');//60 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 305;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(620, 345, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = -6;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 400, y: 150, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_two.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.protractor.destroy();
                    _this.angle_2_line.destroy();
                    _this.angle_2 = _this.add.text(635, 338, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_2);
                });
            }
            _this.option_two_flag = 0;
        }
        if (_this.option_three_flag == 1) {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                // _this.protractor = _this.add.image(325, 210, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 0;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(485, 370, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 45;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 300, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.protractor.destroy();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(475, 388, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);
                });
            }
            if (_this.objectsArray[_this.count1] == 'sandwich') {
                // _this.protractor = _this.add.image(340, 235, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = -3;
                // _this.protractor.alpha = 0;//0

                _this.protractor = _this.add.image(505, 385, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 45;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 300, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.protractor.destroy();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(505, 398, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);
                });
            }
            if (_this.objectsArray[_this.count1] == 'waffer') {
                // _this.protractor = _this.add.image(348, 220, 'protractor');//45 degree//348, 220//328, 240
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 7;
                // _this.protractor.alpha = 0;//0

                // _this.protractor = _this.add.image(483, 390, 'inProtc');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = -5;
                // _this.protractor.anchor.setTo(0.5, 0.5);
                // _this.protractor_2 = _this.add.image(483, 390, 'outProtc');//45 degree
                // _this.protractor_2.scale.setTo(0.5, 0.5);
                // _this.protractor_2.angle = 55;
                // _this.protractor_2.anchor.setTo(0.5, 0.5);
                // _this.protractor.alpha = 0;
                // _this.protractor_2.alpha = 0;

                _this.protractor = _this.add.image(485, 395, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 55;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 300, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                    //  _this.protractor_2.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.protractor.destroy();
                    //  _this.protractor_2.destroy();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(485, 408, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);
                });
            }
            if (_this.objectsArray[_this.count1] == 'cheese') {
                // _this.protractor = _this.add.image(362, 220, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 7;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(500, 395, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 55;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 300, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                    // _this.protractor_2.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.protractor.destroy();
                    // _this.protractor_2.destroy();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(495, 408, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);
                });
            }
            if (_this.objectsArray[_this.count1] == 'pizza') {
                // _this.protractor = _this.add.image(368, 220, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 34;
                // _this.protractor.alpha = 0;

                _this.protractor = _this.add.image(410, 440, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 82;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 250, y: 280, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.protractor.destroy();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(405, 448, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);
                });
            }
            if (_this.objectsArray[_this.count1] == 'biscuit') {
                // _this.protractor = _this.add.image(365, 373, 'protractor');//45 degree
                // _this.protractor.scale.setTo(0.5, 0.5);
                // _this.protractor.angle = 60;
                // _this.protractor.alpha = 0;
                // _this.protractor.anchor.setTo(0.5, 0.5);

                _this.protractor = _this.add.image(365, 375, 'protractor_2');
                _this.protractor.scale.setTo(0.5, 0.5);//0.87,1
                _this.protractor.anchor.setTo(0.5);
                _this.protractor.angle = 108;
                _this.protractor.alpha = 0;

                _this.pt_1 = _this.add.image(0, 0, 'protractor_2');//45 degree
                _this.pt_1.scale.setTo(0.5, 0.5);

                var tween = _this.add.tween(_this.pt_1);
                tween.to({ x: 200, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.pt_1.destroy();
                    _this.protractor.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_three.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.protractor.destroy();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_3_line.destroy();
                    _this.angle_3 = _this.add.text(335, 378, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_3);
                });
            }
            _this.option_three_flag = 0;
        }

    },
    //scale will tween. only once it will show. when scale flag will one then it will not show the scale.
    scaleShow: function () {
        if (_this.input_x_flag == 1) {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                _this.scale_1 = _this.add.image(280, 202, 'scale');
                if (_this.side_1 == 5) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 255;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 255;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 7) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 260;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 8) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 265;
                    _this.scale_1.y = 187;

                }
                if (_this.side_1 == 9) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                    _this.scale_1.x = 270;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 11 || _this.side_1 == 12) {
                    _this.scale_1.scale.setTo(0.8, 0.8);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 198;
                }
                if (_this.side_1 == 13 || _this.side_1 == 14) {
                    _this.scale_1.scale.setTo(0.7, 0.7);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 203;
                }
                if (_this.side_1 == 15) {
                    _this.scale_1.scale.setTo(0.65, 0.65);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 190;
                }


                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 200, y: 150, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_x.destroy();
                    _this.scale_1.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });

            }
            if (_this.objectsArray[_this.count1] == 'sandwich') {
                _this.scale_1 = _this.add.image(280, 202, 'scale');
                if (_this.side_1 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 260;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 260;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 260;
                    _this.scale_1.y = 187;
                }
                if (_this.side_1 == 8) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 270;
                    _this.scale_1.y = 197;
                }
                if (_this.side_1 == 9) _this.scale_1.scale.setTo(1.2, 1.2);
                if (_this.side_1 == 11 || _this.side_1 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_1 == 13 || _this.side_1 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_1 == 15) _this.scale_1.scale.setTo(0.7, 0.7);
                //_this.scale_1.scale.setTo(0.7,0.7);
                _this.scale_1.alpha = 0;
                console.log(_this.scale_1.anchor, "anchor....");

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 200, y: 150, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_x.destroy();
                    _this.scale_1.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(370, 307, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });

            }
            if (_this.objectsArray[_this.count1] == 'waffer') {
                _this.scale_1 = _this.add.image(300, 165, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(10);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 300;
                _this.scale_1.y = 165;

                if (_this.side_1 == 5) {
                    _this.scale_1.scale.setTo(1.75, 1.75);
                    _this.scale_1.x = 270;
                    _this.scale_1.y = 145;
                }
                if (_this.side_1 == 6) {
                    _this.scale_1.scale.setTo(1.7, 1.7);
                    _this.scale_1.x = 270;
                    _this.scale_1.y = 145;
                }
                if (_this.side_1 == 7) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 275;
                    _this.scale_1.y = 150;
                }
                if (_this.side_1 == 8) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 285;
                    _this.scale_1.y = 155;
                }
                if (_this.side_1 == 9) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 285;
                    _this.scale_1.y = 155;
                }
                if (_this.side_1 == 11 || _this.side_1 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_1 == 13 || _this.side_1 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_1 == 15) _this.scale_1.scale.setTo(0.7, 0.7);

                // _this.scale_1.angle = 10;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 10;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 250, y: 120, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_x.destroy();
                    _this.scale_1.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });

            }
            if (_this.objectsArray[_this.count1] == 'cheese') {
                _this.scale_1 = _this.add.image(310, 170, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(8);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 310;
                _this.scale_1.y = 170;

                if (_this.side_1 == 5) {
                    _this.scale_1.scale.setTo(1.8, 1.8);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 155;
                }
                if (_this.side_1 == 6) {
                    _this.scale_1.scale.setTo(1.7, 1.7);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 155;
                }
                if (_this.side_1 == 7) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 160;
                }
                if (_this.side_1 == 8) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 300;
                    _this.scale_1.y = 165;
                }
                if (_this.side_1 == 9) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 300;
                    _this.scale_1.y = 165;
                }
                if (_this.side_1 == 11 || _this.side_1 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_1 == 13 || _this.side_1 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_1 == 15) _this.scale_1.scale.setTo(0.7, 0.7);

                //_this.scale_1.angle = 8;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 8;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 250, y: 120, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_x.destroy();
                    _this.scale_1.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            if (_this.objectsArray[_this.count1] == 'pizza') {
                _this.scale_1 = _this.add.image(345, 120, 'scale');
                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(37);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 345;
                _this.scale_1.y = 120;

                if (_this.side_1 == 5) {
                    _this.scale_1.scale.setTo(1.8, 1.8);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 100;
                }
                if (_this.side_1 == 6) {
                    _this.scale_1.scale.setTo(1.8, 1.8);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 100;
                }
                if (_this.side_1 == 7) {
                    _this.scale_1.scale.setTo(1.55, 1.55);
                    _this.scale_1.x = 330;
                    _this.scale_1.y = 110;
                }
                if (_this.side_1 == 8) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 330;
                    _this.scale_1.y = 110;
                }
                if (_this.side_1 == 9) {
                    _this.scale_1.scale.setTo(1.25, 1.25);
                    _this.scale_1.x = 340;
                    _this.scale_1.y = 115;
                }
                if (_this.side_1 == 10) _this.scale_1.scale.setTo(1.1, 1.1);
                if (_this.side_1 == 11) _this.scale_1.scale.setTo(1.05, 1.05);
                if (_this.side_1 == 13) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_1 == 15 || _this.side_1 == 14) _this.scale_1.scale.setTo(0.8, 0.8);

                // _this.scale_1.angle = 37;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 37;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 300, y: 120, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_x.destroy();
                    _this.scale_1.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 287, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }
            if (_this.objectsArray[_this.count1] == 'biscuit') {
                _this.scale_1 = _this.add.image(430, 110, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(63);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 430;
                _this.scale_1.y = 110;

                if (_this.side_1 == 5) {
                    _this.scale_1.scale.setTo(1.7, 1.7);
                    _this.scale_1.x = 420;
                    _this.scale_1.y = 85;
                }
                if (_this.side_1 == 6) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 420;
                    _this.scale_1.y = 85;
                }
                if (_this.side_1 == 7) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 430;
                    _this.scale_1.y = 100;
                }
                if (_this.side_1 == 8) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 430;
                    _this.scale_1.y = 100;
                }
                if (_this.side_1 == 9) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                    _this.scale_1.x = 430;
                    _this.scale_1.y = 100;
                }
                if (_this.side_1 == 11 || _this.side_1 == 12) {
                    _this.scale_1.scale.setTo(0.8, 0.8);
                    _this.scale_1.x = 430;
                    _this.scale_1.y = 115;
                }
                if (_this.side_1 == 13) {
                    _this.scale_1.scale.setTo(0.75, 0.75);
                    _this.scale_1.x = 430;
                    _this.scale_1.y = 115;
                }
                if (_this.side_1 == 15 || _this.side_1 == 14) {
                    _this.scale_1.scale.setTo(0.7, 0.7);
                    _this.scale_1.x = 440;
                    _this.scale_1.y = 115;
                }

                //_this.scale_1.angle = 63;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 63;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 350, y: 100, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_x.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.circle_x.destroy();
                    _this.scale_1.destroy();
                    _this.x_val.destroy();
                    _this.angle_6_line.destroy();
                    _this.side_x = _this.add.text(365, 237, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_x);
                });
            }

            _this.input_x_flag = 0;
        }
        if (_this.input_y_flag == 1) {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                _this.scale_1 = _this.add.image(280, 220, 'scale');
                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(313);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 280;
                _this.scale_1.y = 220;

                if (_this.side_2 == 5 || _this.side_2 == 6) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 260;
                    _this.scale_1.y = 240;
                }
                if (_this.side_2 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 260;
                    _this.scale_1.y = 240;
                }
                if (_this.side_2 == 8 || _this.side_2 == 9) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 270;
                    _this.scale_1.y = 230;
                }
                if (_this.side_2 == 10) {
                    _this.scale_1.scale.setTo(1, 1);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 230;
                }
                if (_this.side_2 == 11) {
                    _this.scale_1.scale.setTo(0.9, 0.9);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 230;
                }
                if (_this.side_2 == 12) {
                    _this.scale_1.scale.setTo(0.8, 0.8);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 230;
                }
                if (_this.side_2 == 13) {
                    _this.scale_1.scale.setTo(0.75, 0.75);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 220;
                }
                if (_this.side_2 == 14) {
                    _this.scale_1.scale.setTo(0.7, 0.7);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 220;
                }
                if (_this.side_2 == 15 || _this.side_2 == 16) {
                    _this.scale_1.scale.setTo(0.65, 0.65);
                    _this.scale_1.x = 300;
                    _this.scale_1.y = 220;
                }

                // _this.scale_1.angle = 313;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 313;//133

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 300, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(435, 157, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            if (_this.objectsArray[_this.count1] == 'sandwich') {
                _this.scale_1 = _this.add.image(295, 230, 'scale');

                if (_this.side_2 == 5) {
                    _this.scale_1.scale.setTo(2.3, 2.3);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 260;
                }
                if (_this.side_2 == 6 || _this.side_2 == 7) {
                    _this.scale_1.scale.setTo(2, 2);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 260;
                }
                if (_this.side_2 == 8) {
                    _this.scale_1.scale.setTo(1.7, 1.7);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 250;
                }
                if (_this.side_2 == 9) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 250;
                }
                if (_this.side_2 == 10) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 240;
                }
                if (_this.side_2 == 11 || _this.side_2 == 12) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.y = 240;
                }
                if (_this.side_2 == 13) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                    _this.scale_1.y = 230;
                }
                if (_this.side_2 == 14) {
                    _this.scale_1.scale.setTo(1, 1);
                }
                if (_this.side_2 == 15) {
                    _this.scale_1.scale.setTo(0.95, 0.95);
                }
                if (_this.side_2 == 16) {
                    _this.scale_1.scale.setTo(0.9, 0.9);
                }


                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(313);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                // _this.scale_1.angle = 313;//133
                _this.scale_1.x = 295;
                _this.scale_1.y = 235;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 313;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 280, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(485, 137, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            if (_this.objectsArray[_this.count1] == 'waffer') {
                _this.scale_1 = _this.add.image(300, 200, 'scale');
                if (_this.side_2 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 280;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 7) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 8) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                }
                if (_this.side_2 == 9) {
                    _this.scale_1.scale.setTo(1.05, 1.05);
                }
                if (_this.side_2 == 10) {
                    _this.scale_1.scale.setTo(0.95, 0.95);
                }
                if (_this.side_2 == 11 || _this.side_2 == 12) {
                    _this.scale_1.scale.setTo(0.8, 0.8);
                    _this.scale_1.x = 310;
                    _this.scale_1.y = 190;
                }
                if (_this.side_2 == 13) {
                    _this.scale_1.scale.setTo(0.7, 0.7);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 190;
                }
                if (_this.side_2 == 14) {
                    _this.scale_1.scale.setTo(0.68, 0.68);
                    _this.scale_1.x = 310;
                    _this.scale_1.y = 190;
                }
                if (_this.side_2 == 15 || _this.side_2 == 16) {
                    _this.scale_1.scale.setTo(0.62, 0.62);
                    _this.scale_1.x = 310;
                    _this.scale_1.y = 190;
                }

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(313);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);

                _this.scale_1.x = 300;
                _this.scale_1.y = 200;

                //_this.scale_1.angle = 313;//133
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 313;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 290, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(455, 127, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            if (_this.objectsArray[_this.count1] == 'cheese') {
                _this.scale_1 = _this.add.image(300, 200, 'scale');
                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(313);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);

                _this.scale_1.x = 300;
                _this.scale_1.y = 200;

                if (_this.side_2 == 5) {
                    _this.scale_1.scale.setTo(1.7, 1.7);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 220;
                }
                if (_this.side_2 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 290;
                    _this.scale_1.y = 220;
                }
                if (_this.side_2 == 7) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 300;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 8) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 300;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 9) {
                    _this.scale_1.scale.setTo(1, 1);
                    _this.scale_1.x = 310;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 10) {
                    _this.scale_1.scale.setTo(0.9, 0.9);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 11) {
                    _this.scale_1.scale.setTo(0.8, 0.8);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 210;
                }
                if (_this.side_2 == 12) {
                    _this.scale_1.scale.setTo(0.78, 0.78);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 200;
                }
                if (_this.side_2 == 13) {
                    _this.scale_1.scale.setTo(0.7, 0.7);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 200;
                }
                if (_this.side_2 == 14) {
                    _this.scale_1.scale.setTo(0.68, 0.68);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 200;
                }
                if (_this.side_2 == 15 || _this.side_2 == 16) {
                    _this.scale_1.scale.setTo(0.62, 0.62);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 200;
                }

                //_this.scale_1.angle = 313;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 313;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 290, y: 200, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(455, 137, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            if (_this.objectsArray[_this.count1] == 'pizza') {
                _this.scale_1 = _this.add.image(340, 170, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(330);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 340;
                _this.scale_1.y = 170;

                if (_this.side_2 == 5 || _this.side_2 == 6) {
                    _this.scale_1.scale.setTo(1.7, 1.7);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 170;
                }
                if (_this.side_2 == 7) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 170;
                }
                if (_this.side_2 == 8) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 170;
                }
                if (_this.side_2 == 9) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                    _this.scale_1.x = 330;
                    _this.scale_1.y = 170;
                }
                if (_this.side_2 == 10) {
                    _this.scale_1.scale.setTo(1, 1);
                    _this.scale_1.x = 330;
                    _this.scale_1.y = 170;
                }
                if (_this.side_2 == 11) {
                    _this.scale_1.scale.setTo(0.9, 0.9);
                    _this.scale_1.x = 340;
                    _this.scale_1.y = 170;
                }
                if (_this.side_2 == 12 || _this.side_2 == 13) {
                    _this.scale_1.scale.setTo(0.8, 0.8);
                    _this.scale_1.x = 340;
                    _this.scale_1.y = 160;
                }
                if (_this.side_2 == 15 || _this.side_2 == 14) {
                    _this.scale_1.scale.setTo(0.7, 0.7);
                    _this.scale_1.x = 340;
                    _this.scale_1.y = 160;
                }

                //_this.scale_1.angle = 330;//150
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 330;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 320, y: 160, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(485, 137, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            if (_this.objectsArray[_this.count1] == 'biscuit') {
                _this.scale_1 = _this.add.image(655, 350, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(183);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 655;
                _this.scale_1.y = 350;

                if (_this.side_2 == 5) {
                    _this.scale_1.scale.setTo(1.8, 1.8);
                    _this.scale_1.x = 680;
                    _this.scale_1.y = 360;
                }
                if (_this.side_2 == 6) {
                    _this.scale_1.scale.setTo(1.65, 1.65);
                    _this.scale_1.x = 675;
                    _this.scale_1.y = 360;
                }
                if (_this.side_2 == 7) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 670;
                    _this.scale_1.y = 360;
                }
                if (_this.side_2 == 8) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 665;
                    _this.scale_1.y = 355;
                }
                if (_this.side_2 == 9) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 665;
                    _this.scale_1.y = 355;
                }
                if (_this.side_2 == 11 || _this.side_2 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_2 == 13 || _this.side_2 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_2 == 15) _this.scale_1.scale.setTo(0.7, 0.7);

                // _this.scale_1.angle = 183;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 183;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 600, y: 330, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_y.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.angle_4_line.destroy();
                    _this.side_y = _this.add.text(545, 207, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_y);
                });
            }
            _this.input_y_flag = 0;
        }
        if (_this.input_z_flag == 1) {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                _this.scale_1 = _this.add.image(490, 415, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(250);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 490;
                _this.scale_1.y = 415;

                if (_this.side_3 == 5) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 500;
                    _this.scale_1.y = 420;
                }
                if (_this.side_3 == 6) {
                    _this.scale_1.scale.setTo(1.2, 1.2);
                    _this.scale_1.x = 490;
                    _this.scale_1.y = 420;
                }
                if (_this.side_3 == 7) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                    _this.scale_1.x = 490;
                    _this.scale_1.y = 420;
                }
                if (_this.side_3 == 8) {
                    _this.scale_1.scale.setTo(1, 1);
                }
                if (_this.side_3 == 9) _this.scale_1.scale.setTo(1.2, 1.2);
                if (_this.side_3 == 11 || _this.side_3 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_3 == 13 || _this.side_3 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_3 == 15) _this.scale_1.scale.setTo(0.7, 0.7);

                //  _this.scale_1.angle = 250;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 250;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 450, y: 400, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(555, 297, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            if (_this.objectsArray[_this.count1] == 'sandwich') {
                _this.scale_1 = _this.add.image(500, 415, 'scale');
                if (_this.side_3 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 520;
                    _this.scale_1.y = 440;
                }
                if (_this.side_3 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 520;
                    _this.scale_1.y = 440;
                }
                if (_this.side_3 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 520;
                    _this.scale_1.y = 440;
                }
                if (_this.side_3 == 8) {
                    _this.scale_1.scale.setTo(1.3, 1.3);
                    _this.scale_1.x = 510;
                    _this.scale_1.y = 420;
                }
                if (_this.side_3 == 9) _this.scale_1.scale.setTo(1.1, 1.1);
                if (_this.side_3 == 11 || _this.side_3 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_3 == 13 || _this.side_3 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_3 == 15) _this.scale_1.scale.setTo(0.7, 0.7);


                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(268);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                // _this.scale_1.angle = 268;
                _this.scale_1.x = 495;
                _this.scale_1.y = 430;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 268;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 450, y: 400, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(615, 307, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            if (_this.objectsArray[_this.count1] == 'waffer') {
                _this.scale_1 = _this.add.image(500, 420, 'scale');
                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(243);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);

                _this.scale_1.x = 470;
                _this.scale_1.y = 450;

                if (_this.side_3 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 510;
                    _this.scale_1.y = 445;
                }
                if (_this.side_3 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 510;
                    _this.scale_1.y = 445;
                }
                if (_this.side_3 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 510;
                    _this.scale_1.y = 445;
                }
                if (_this.side_3 == 8) {
                    _this.scale_1.scale.setTo(1.25, 1.25);
                    _this.scale_1.x = 500;
                    _this.scale_1.y = 445;
                }
                if (_this.side_3 == 9) _this.scale_1.scale.setTo(1.2, 1.2);
                if (_this.side_3 == 11 || _this.side_3 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_3 == 13 || _this.side_3 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_3 == 15) _this.scale_1.scale.setTo(0.7, 0.7);

                // _this.scale_1.angle = 243;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 245;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 450, y: 410, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(545, 297, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            if (_this.objectsArray[_this.count1] == 'cheese') {
                _this.scale_1 = _this.add.image(515, 430, 'scale');
                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(243);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);

                _this.scale_1.x = 515;
                _this.scale_1.y = 430;

                if (_this.side_3 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 525;
                    _this.scale_1.y = 455;
                }
                if (_this.side_3 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 525;
                    _this.scale_1.y = 455;
                }
                if (_this.side_3 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 525;
                    _this.scale_1.y = 455;
                }
                if (_this.side_3 == 8) {
                    _this.scale_1.scale.setTo(1.25, 1.25);
                    _this.scale_1.x = 515;
                    _this.scale_1.y = 455;
                }
                if (_this.side_3 == 9) _this.scale_1.scale.setTo(1.2, 1.2);
                if (_this.side_3 == 11 || _this.side_3 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_3 == 13 || _this.side_3 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_3 == 15) _this.scale_1.scale.setTo(0.7, 0.7);
                //_this.scale_1.angle = 243;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 243;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 500, y: 420, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(575, 297, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            if (_this.objectsArray[_this.count1] == 'pizza') {
                _this.scale_1 = _this.add.image(420, 470, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(265);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 420;
                _this.scale_1.y = 470;

                if (_this.side_3 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 440;
                    _this.scale_1.y = 485;
                }
                if (_this.side_3 == 6) {
                    _this.scale_1.scale.setTo(1.5, 1.5);
                    _this.scale_1.x = 440;
                    _this.scale_1.y = 485;
                }
                if (_this.side_3 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 440;
                    _this.scale_1.y = 485;
                }
                if (_this.side_3 == 8) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 420;
                    _this.scale_1.y = 480;
                }
                if (_this.side_3 == 9) _this.scale_1.scale.setTo(1.2, 1.2);
                if (_this.side_3 == 11 || _this.side_3 == 12) _this.scale_1.scale.setTo(0.9, 0.9);
                if (_this.side_3 == 13 || _this.side_3 == 14) _this.scale_1.scale.setTo(0.8, 0.8);
                if (_this.side_3 == 15) _this.scale_1.scale.setTo(0.7, 0.7);
                // _this.scale_1.angle = 265;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 265;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 400, y: 450, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(515, 337, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            if (_this.objectsArray[_this.count1] == 'biscuit') {
                _this.scale_1 = _this.add.image(335, 400, 'scale');

                // Set the initial rotation angle of the sprite
                _this.scale_1.rotation = _this.math.degToRad(307);

                // Calculate the new position based on the rotation angle
                var distance = _this.scale_1.width / 2; // Distance from pivot point to image center
                var angle = _this.scale_1.rotation; // Rotation angle in radians
                var x = _this.world.centerX + distance * Math.cos(angle); // X position
                var y = _this.world.centerY + distance * Math.sin(angle); // Y position

                // Set the new position of the sprite
                _this.scale_1.position.setTo(x, y);
                // Rotate the sprite by a certain angle each frame
                _this.scale_1.rotation += _this.math.degToRad(1);


                _this.scale_1.x = 335;
                _this.scale_1.y = 400;

                if (_this.side_3 == 5) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 415;
                }
                if (_this.side_3 == 6) {
                    _this.scale_1.scale.setTo(1.6, 1.6);
                    _this.scale_1.x = 320;
                    _this.scale_1.y = 415;
                }
                if (_this.side_3 == 7) {
                    _this.scale_1.scale.setTo(1.4, 1.4);
                    _this.scale_1.x = 325;
                    _this.scale_1.y = 410;
                }
                if (_this.side_3 == 8) {
                    _this.scale_1.scale.setTo(1.25, 1.25);
                    _this.scale_1.x = 330;
                    _this.scale_1.y = 405;
                }
                if (_this.side_3 == 9) {
                    _this.scale_1.scale.setTo(1.1, 1.1);
                    _this.scale_1.x = 335;
                    _this.scale_1.y = 400;
                }
                if (_this.side_3 == 11 || _this.side_3 == 12) {
                    _this.scale_1.scale.setTo(0.85, 0.85);
                    _this.scale_1.x = 350;
                    _this.scale_1.y = 395;
                }
                if (_this.side_3 == 13 || _this.side_3 == 14) {
                    _this.scale_1.scale.setTo(0.75, 0.75);
                    _this.scale_1.x = 350;
                    _this.scale_1.y = 395;
                }
                if (_this.side_3 == 15) {
                    _this.scale_1.scale.setTo(0.65, 0.65);
                    _this.scale_1.x = 350;
                    _this.scale_1.y = 395;
                }

                // _this.scale_1.angle = 307;
                _this.scale_1.alpha = 0;

                _this.sc_1 = _this.add.image(0, 0, 'scale');
                _this.sc_1.scale.setTo(0.8, 0.8);
                _this.sc_1.angle = 307;

                var tween = _this.add.tween(_this.sc_1);
                tween.to({ x: 300, y: 370, alpha: 1 }, 1000, Phaser.Easing.Linear.None, true);
                tween.onComplete.add(function () {
                    _this.assetSound.play(); //sound play 
                    _this.sc_1.destroy();
                    _this.scale_1.alpha = 1;
                });

                if (_this.circle_one) { _this.circle_one.visible = false; _this.one.visible = false; }
                if (_this.circle_two) { _this.circle_two.visible = false; _this.two.visible = false; }
                if (_this.circle_three) { _this.circle_three.visible = false; _this.three.visible = false; }
                if (_this.circle_x) { _this.circle_x.visible = false; _this.x_val.visible = false; }
                if (_this.circle_y) { _this.circle_y.visible = false; _this.y_val.visible = false; }
                if (_this.circle_z) { _this.circle_z.visible = false; _this.z_val.visible = false; }

                _this.time.events.add(3500, () => {
                    _this.valueSound.play();
                    _this.findingCongarence.push(_this.circle_z.name);
                    // console.log(_this.findingCongarence, "_this.findingCongarence");
                    if (_this.circle_one) { _this.circle_one.visible = true; _this.one.visible = true; }
                    if (_this.circle_two) { _this.circle_two.visible = true; _this.two.visible = true; }
                    if (_this.circle_three) { _this.circle_three.visible = true; _this.three.visible = true; }
                    if (_this.circle_x) { _this.circle_x.visible = true; _this.x_val.visible = true; }
                    if (_this.circle_y) { _this.circle_y.visible = true; _this.y_val.visible = true; }
                    if (_this.circle_z) { _this.circle_z.visible = true; _this.z_val.visible = true; }
                    _this.scale_1.destroy();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.angle_5_line.destroy();
                    _this.side_z = _this.add.text(485, 382, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_z);
                });
            }
            _this.input_z_flag = 0;
        }
    },

    checkASA: function () {
        //(y,1,x),(x,3,z),(z,2,y)
        const arrayASA = [
            ['1', 'y', '2'],
            ['2', 'z', '3'],
            ['1', 'x', '3'],
            ['y', '1', 'x'],
            ['x', '3', 'z'],
            ['z', '2', 'y'],
            ['x', 'y', 'z']
        ];

        const arrayRHS = [['y', 'z', '3']];

        // Example 1D (normal) array
        const array1D = _this.findingCongarence;

        //[ "y", "z", "3" ]

        // Function to check if array1D contains the same elements as any row in _this.arrayASA
        function isArray1DInArray2D(array1D, arrayASA) {
            const set1D = new Set(array1D);

            for (let i = 0; i < arrayASA.length; i++) {
                const row = arrayASA[i];
                const setRow = new Set(row);

                if (setsAreEqual(set1D, setRow)) {
                    return true;
                }
            }

            return false;
        }

        //for rhs
        function isArray1DInArray2DRHS(array1D, arrayRHS) {
            const set1D = new Set(array1D);

            for (let i = 0; i < arrayRHS.length; i++) {
                const row = arrayRHS[i];
                const setRow = new Set(row);

                if (setsAreEqual(set1D, setRow)) {
                    return true;
                }
            }

            return false;
        }


        // Helper function to check if two sets are equal
        function setsAreEqual(set1, set2) {
            if (set1.size !== set2.size) {
                return false;
            }

            for (const item of set1) {
                if (!set2.has(item)) {
                    return false;
                }
            }

            return true;
        }

        // Check if array1D contains the same elements as any row in _this.arrayASA
        _this.isInArrayASA = isArray1DInArray2D(array1D, arrayASA);
        _this.isInArrayRHS = isArray1DInArray2DRHS(array1D, arrayRHS);
        console.log(array1D);
        console.log(_this.isInArrayASA); // Output: true
        console.log(_this.isInArrayRHS); // Output: true

    },

    //tick validation for part a
    tickValidation: function () {

        if (_this.optionCounter == 3)  //if 3 options are selected 
        {
            // if (!(_this.circle_one.exists && _this.circle_two.exists && _this.circle_three.exists) && (_this.circle_x.exists && _this.circle_y.exists && _this.circle_z.exists)) {
            //if 3 angles are selected then this audio will play


            // }
            // else if ((_this.circle_one.exists && _this.circle_y.exists && _this.circle_two.exists) && !(_this.circle_two.exists && _this.circle_x.exists && _this.circle_z.exists)
            //     // !(_this.circle_two.exists && _this.circle_z.exists && _this.circle_three.exists) ||
            //     // !(_this.circle_one.exists && _this.circle_x.exists && _this.circle_three.exists) ||
            //     // !(_this.circle_y.exists && _this.circle_one.exists && _this.circle_x.exists) ||
            //     // !(_this.circle_x.exists && _this.circle_three.exists && _this.circle_z.exists) ||
            //     // !(_this.circle_z.exists && _this.circle_two.exists && _this.circle_y.exists)
            // ) {
            //     //!(_this.circle_one.exists && _this.circle_two.exists && _this.circle_three.exists) && 
            //     //(_this.circle_x.exists && _this.circle_y.exists && _this.circle_z.exists)
            //     //for selecting asa and sas correctly. if it is wrong then it will play the wrong sound
            /*for ASA 
            sandwich, waffer,cheese,watermelon,pizza,biscuit==>(1,y,2),(2,z,3),(1,x,3)
            for SAS
            sandwich, waffer,cheese,watermelon,pizza,biscuit==>(y,1,x),(x,3,z),(z,2,y)
            */
            //     _this.reArranging();


            // }
            if (!_this.isInArrayASA) {
                if ((_this.objectsArray[_this.count1] == 'sandwich') && (_this.isInArrayRHS)) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();

                    if (_this.circle_one) { _this.circle_one.destroy(); _this.one.destroy(); }
                    if (_this.circle_two) { _this.circle_two.destroy(); _this.two.destroy(); }
                    if (_this.circle_three) { _this.circle_three.destroy(); _this.three.destroy(); }
                    if (_this.circle_x) { _this.circle_x.destroy(); _this.x_val.destroy(); }
                    if (_this.circle_y) { _this.circle_y.destroy(); _this.y_val.destroy(); }
                    if (_this.circle_z) { _this.circle_z.destroy(); _this.z_val.destroy(); }

                    if (_this.angle_1) { _this.angle_1.destroy(); }
                    if (_this.angle_2) { _this.angle_2.destroy(); }
                    if (_this.angle_3) { _this.angle_3.destroy(); }
                    if (_this.side_x) { _this.side_x.destroy(); }
                    if (_this.side_y) { _this.side_y.destroy(); }
                    if (_this.side_z) { _this.side_z.destroy(); }

                    if (_this.angle_arc_line) { _this.angle_arc_line.destroy(); }
                    if (_this.angle_arc_line_2) { _this.angle_arc_line_2.destroy(); }
                    if (_this.angle_arc_line_3) { _this.angle_arc_line_3.destroy(); }

                    _this.optionShowing();
                    _this.tick.destroy();
                    _this.panel_4.destroy();
                    if (_this.objectsArray[_this.count1] == 'watermelon') _this.watermelon.destroy();
                    if (_this.objectsArray[_this.count1] == 'sandwich') _this.sandwich.destroy();
                    if (_this.objectsArray[_this.count1] == 'waffer') _this.waffer.destroy();
                    if (_this.objectsArray[_this.count1] == 'cheese') _this.cheese.destroy();
                    if (_this.objectsArray[_this.count1] == 'pizza') _this.pizza.destroy();
                    if (_this.objectsArray[_this.count1] == 'biscuit') _this.biscuit.destroy();

                    _this.tick = _this.add.sprite(880, 450, 'TickBtn');
                    _this.tick.inputEnabled = true;
                    _this.tick.input.useHandCursor = true;
                    _this.tick.events.onInputDown.add(_this.tickValidation_partA, _this);
                }
                else {
                    _this.reArranging();
                }
            }
            else {
                _this.noofAttempts++;
                // console.log("correct options selected");
                _this.counterCelebrationSound.play();

                if (_this.circle_one) { _this.circle_one.destroy(); _this.one.destroy(); }
                if (_this.circle_two) { _this.circle_two.destroy(); _this.two.destroy(); }
                if (_this.circle_three) { _this.circle_three.destroy(); _this.three.destroy(); }
                if (_this.circle_x) { _this.circle_x.destroy(); _this.x_val.destroy(); }
                if (_this.circle_y) { _this.circle_y.destroy(); _this.y_val.destroy(); }
                if (_this.circle_z) { _this.circle_z.destroy(); _this.z_val.destroy(); }

                if (_this.angle_1) { _this.angle_1.destroy(); }
                if (_this.angle_2) { _this.angle_2.destroy(); }
                if (_this.angle_3) { _this.angle_3.destroy(); }
                if (_this.side_x) { _this.side_x.destroy(); }
                if (_this.side_y) { _this.side_y.destroy(); }
                if (_this.side_z) { _this.side_z.destroy(); }

                if (_this.angle_arc_line) { _this.angle_arc_line.destroy(); }
                if (_this.angle_arc_line_2) { _this.angle_arc_line_2.destroy(); }
                if (_this.angle_arc_line_3) { _this.angle_arc_line_3.destroy(); }

                _this.optionShowing();
                _this.tick.destroy();
                _this.panel_4.destroy();
                if (_this.objectsArray[_this.count1] == 'watermelon') _this.watermelon.destroy();
                if (_this.objectsArray[_this.count1] == 'sandwich') _this.sandwich.destroy();
                if (_this.objectsArray[_this.count1] == 'waffer') _this.waffer.destroy();
                if (_this.objectsArray[_this.count1] == 'cheese') _this.cheese.destroy();
                if (_this.objectsArray[_this.count1] == 'pizza') _this.pizza.destroy();
                if (_this.objectsArray[_this.count1] == 'biscuit') _this.biscuit.destroy();

                _this.tick = _this.add.sprite(880, 450, 'TickBtn');
                _this.tick.inputEnabled = true;
                _this.tick.input.useHandCursor = true;
                _this.tick.events.onInputDown.add(_this.tickValidation_partA, _this);
            }



        }
    },
    reArranging: function () {
        _this.stopAudio_QV();
        _this.Question_flag = 1;
        if (_this.count1 == 0) {
            // _this.Ask_Question2.play();
            // Usage
            _this.Ask_Question2 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a2.mp3');

            // _this.Ask_Question2.changeSource(window.baseUrl + "questionSounds/GMLA-06-G7/ENG/V2full.mp3");
            // _this.Ask_Question2.addEventListener('ended', () => {
            //     console.log("Ask_Question2 played");
            //     _this.Ask_Question2_2.play();
            // });
        }
        // console.log("3 angles selected");
        _this.findingCongarence = [];
        _this.noofAttempts++;
        _this.wrongSound.play();

        if (_this.circle_one) { _this.circle_one.destroy(); _this.one.destroy(); }
        if (_this.circle_two) { _this.circle_two.destroy(); _this.two.destroy(); }
        if (_this.circle_three) { _this.circle_three.destroy(); _this.three.destroy(); }
        if (_this.circle_x) { _this.circle_x.destroy(); _this.x_val.destroy(); }
        if (_this.circle_y) { _this.circle_y.destroy(); _this.y_val.destroy(); }
        if (_this.circle_z) { _this.circle_z.destroy(); _this.z_val.destroy(); }

        if (_this.angle_1) { _this.angle_1.destroy(); }
        if (_this.angle_2) { _this.angle_2.destroy(); }
        if (_this.angle_3) { _this.angle_3.destroy(); }
        if (_this.side_x) { _this.side_x.destroy(); }
        if (_this.side_y) { _this.side_y.destroy(); }
        if (_this.side_z) { _this.side_z.destroy(); }

        if (_this.angle_arc_line) { _this.angle_arc_line.destroy(); }
        if (_this.angle_arc_line_2) { _this.angle_arc_line_2.destroy(); }
        if (_this.angle_arc_line_3) { _this.angle_arc_line_3.destroy(); }

        _this.option_one_flag = 0;
        _this.option_two_flag = 0;
        _this.option_three_flag = 0;
        _this.input_x_flag = 0;
        _this.input_y_flag = 0;
        _this.input_z_flag = 0;
        // _this.potractor_flag = 0;
        _this.tick.inputEnabled = false;


        if (_this.objectsArray[_this.count1] == 'watermelon') {
            _this.optionCounter = 0;

            _this.circle_one = _this.add.sprite(270, 160, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(285, 168, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(580, 160, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(595, 168, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(460, 380, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(475, 388, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(420, 150, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(435, 157, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(540, 290, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(555, 297, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            _this.optionCounter = 0;
            _this.circle_one = _this.add.sprite(280, 170, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(295, 178, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(680, 170, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(695, 178, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(490, 390, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(505, 398, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(355, 300, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(370, 307, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(470, 130, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(485, 137, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(600, 300, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(615, 307, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            _this.optionCounter = 0;
            _this.circle_one = _this.add.sprite(280, 150, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(295, 158, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(580, 150, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(595, 158, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(470, 400, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(485, 408, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(440, 120, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(455, 127, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(530, 290, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(545, 297, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            _this.optionCounter = 0;

            _this.circle_one = _this.add.sprite(290, 160, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(305, 168, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(590, 160, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(605, 168, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(480, 400, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(495, 408, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(440, 130, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(455, 137, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(560, 290, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(575, 297, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            _this.optionCounter = 0;

            _this.circle_one = _this.add.sprite(330, 110, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(345, 118, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(610, 180, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(625, 188, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(390, 440, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(405, 448, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 280, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 287, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(470, 130, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(485, 137, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(500, 330, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(515, 337, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            _this.optionCounter = 0;

            _this.circle_one = _this.add.sprite(420, 90, 'color_circle');
            _this.circle_one.frame = 2;
            _this.circle_one.scale.setTo(0.9);
            _this.circle_one.inputEnabled = true;
            _this.circle_one.input.useHandCursor = true;
            _this.circle_one.events.onInputDown.add(_this.oneInput);

            _this.one = _this.add.text(435, 98, '1');
            _this.applyingStyle_White(_this.one);

            _this.circle_two = _this.add.sprite(620, 330, 'color_circle');
            _this.circle_two.frame = 2;
            _this.circle_two.scale.setTo(0.9);
            _this.circle_two.inputEnabled = true;
            _this.circle_two.input.useHandCursor = true;
            _this.circle_two.events.onInputDown.add(_this.twoInput);

            _this.two = _this.add.text(635, 338, '2');
            _this.applyingStyle_White(_this.two);

            _this.circle_three = _this.add.sprite(320, 370, 'color_circle');
            _this.circle_three.frame = 2;
            _this.circle_three.scale.setTo(0.9);
            _this.circle_three.inputEnabled = true;
            _this.circle_three.input.useHandCursor = true;
            _this.circle_three.events.onInputDown.add(_this.threeInput);

            _this.three = _this.add.text(335, 378, '3');
            _this.applyingStyle_White(_this.three);

            _this.circle_x = _this.add.sprite(350, 230, 'color_circle');
            _this.circle_x.frame = 1;
            _this.circle_x.scale.setTo(0.9);
            _this.circle_x.inputEnabled = true;
            _this.circle_x.input.useHandCursor = true;
            _this.circle_x.events.onInputDown.add(_this.xInput);

            _this.x_val = _this.add.text(365, 237, 'x');
            _this.applyingStyle_White(_this.x_val);

            _this.circle_y = _this.add.sprite(530, 200, 'color_circle');
            _this.circle_y.frame = 1;
            _this.circle_y.scale.setTo(0.9);
            _this.circle_y.inputEnabled = true;
            _this.circle_y.input.useHandCursor = true;
            _this.circle_y.events.onInputDown.add(_this.yInput);

            _this.y_val = _this.add.text(545, 207, 'y');
            _this.applyingStyle_White(_this.y_val);

            _this.circle_z = _this.add.sprite(470, 375, 'color_circle');
            _this.circle_z.frame = 1;
            _this.circle_z.scale.setTo(0.9);
            _this.circle_z.inputEnabled = true;
            _this.circle_z.input.useHandCursor = true;
            _this.circle_z.events.onInputDown.add(_this.zInput);

            _this.z_val = _this.add.text(485, 382, 'z');
            _this.applyingStyle_White(_this.z_val);
        }
    },

    //in this function randomizing the option part. for part a
    optionShowing: function () {
        _this.optionOrder = [1, 2, 3];//1,2,3//box option randomizing
        _this.shuffleArray(_this.optionOrder);
        // console.log(_this.optionOrder, "option order..");
        _this.stopAudio_QV();
        _this.Question_flag = 2;
        if (_this.count1 == 0) {
            // _this.pauseVoice();
            // _this.Ask_Question3.play();
            _this.Ask_Question3 = _this.playAudio(window.baseUrl + 'questionSounds/GMLA-06-G7/' + _this.languageSelected + '/GMLA_06_G7_a3.mp3');
        }
        //we have to show 3 assets. for that we can take _this.objectsArray[1,2,3]
        //randomize the sides and angles

        if (_this.objectsArray[_this.count1] == 'watermelon') {
            _this.optionArray = ['sandwich', 'waffer', 'cheese', 'pizza', 'biscuit'];//'sandwich', 'waffer', 'cheese', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray);
            _this.optionArray_2 = ['sandwich', 'waffer', 'cheese', 'pizza', 'biscuit'];//'sandwich', 'waffer', 'cheese', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray_2);
            // Get the first element from the shuffled array
            var firstElement = _this.optionArray[0];

            // Remove the first element from the second array
            var indexToRemove = _this.optionArray_2.indexOf(firstElement);
            if (indexToRemove !== -1) {
                _this.optionArray_2.splice(indexToRemove, 1);
            }
            console.log(_this.optionArray_2, "_this.optionArray_2");

            _this.angel_y_op_1 = Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 5))) + (_this.object_Angle_y - 5);//1 to 3; (max - min) ) + min  
            _this.angel_y_op_2 = Math.floor(Math.random() * ((_this.object_Angle_y + 6) - (_this.object_Angle_y + 1))) + (_this.object_Angle_y + 1);//1 to 3; (max - min) ) + min  

            _this.angel_x_op_1 = Math.floor(Math.random() * (_this.object_Angle_x - (_this.object_Angle_x - 5))) + (_this.object_Angle_x - 5);//1 to 3; (max - min) ) + min  
            _this.angel_x_op_2 = Math.floor(Math.random() * ((_this.object_Angle_x + 6) - (_this.object_Angle_x + 1))) + (_this.object_Angle_x + 1);//1 to 3; (max - min) ) + min  

            _this.angel_z_op_1 = 180 - (_this.angel_y_op_1 + _this.angel_x_op_1);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 8))) + (_this.object_Angle_y - 8);//1 to 3; (max - min) ) + min  
            _this.angel_z_op_2 = 180 - (_this.angel_y_op_2 + _this.angel_x_op_2);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y + 5))) + (_this.object_Angle_y + 5);//1 to 3; (max - min) ) + min  
        }
        if (_this.objectsArray[_this.count1] == 'sandwich') {
            _this.optionArray = ['watermelon', 'waffer', 'cheese', 'pizza', 'biscuit'];//'watermelon', 'waffer', 'cheese', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray);
            _this.optionArray_2 = ['watermelon', 'waffer', 'cheese', 'biscuit'];//'watermelon', 'waffer', 'cheese',  'biscuit'
            _this.shuffleArray(_this.optionArray_2);

            // Get the first element from the shuffled array
            var firstElement = _this.optionArray[0];

            // Remove the first element from the second array
            var indexToRemove = _this.optionArray_2.indexOf(firstElement);
            if (indexToRemove !== -1) {
                _this.optionArray_2.splice(indexToRemove, 1);
            }
            console.log(_this.optionArray_2, "_this.optionArray_2");
            _this.angel_y_op_1 = Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 5))) + (_this.object_Angle_y - 5);//1 to 3; (max - min) ) + min  
            _this.angel_y_op_2 = Math.floor(Math.random() * ((_this.object_Angle_y + 6) - (_this.object_Angle_y + 1))) + (_this.object_Angle_y + 1);//1 to 3; (max - min) ) + min  

            _this.angel_x_op_1 = Math.floor(Math.random() * (_this.object_Angle_x - (_this.object_Angle_x - 5))) + (_this.object_Angle_x - 5);//1 to 3; (max - min) ) + min  
            _this.angel_x_op_2 = Math.floor(Math.random() * ((_this.object_Angle_x + 6) - (_this.object_Angle_x + 1))) + (_this.object_Angle_x + 1);//1 to 3; (max - min) ) + min  

            _this.angel_z_op_1 = 180 - (_this.angel_x_op_1 + _this.angel_y_op_1);//Math.floor(Math.random() * (_this.object_Angle_z - (_this.object_Angle_z - 5))) + (_this.object_Angle_z - 5);//1 to 3; (max - min) ) + min  
            _this.angel_z_op_2 = 180 - (_this.angel_x_op_2 + _this.angel_y_op_2);//Math.floor(Math.random() * (_this.object_Angle_z - (_this.object_Angle_z + 5))) + (_this.object_Angle_z + 5);//1 to 3; (max - min) ) + min  

        }
        if (_this.objectsArray[_this.count1] == 'waffer') {
            _this.optionArray = ['watermelon', 'sandwich', 'cheese', 'pizza', 'biscuit'];//'watermelon', 'sandwich','cheese', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray);
            _this.optionArray_2 = ['watermelon', 'sandwich', 'cheese', 'pizza', 'biscuit'];//'watermelon', 'sandwich','cheese', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray_2);
            // Get the first element from the shuffled array
            var firstElement = _this.optionArray[0];

            // Remove the first element from the second array
            var indexToRemove = _this.optionArray_2.indexOf(firstElement);
            if (indexToRemove !== -1) {
                _this.optionArray_2.splice(indexToRemove, 1);
            }
            console.log(_this.optionArray_2, "_this.optionArray_2");

            _this.angel_y_op_1 = Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 5))) + (_this.object_Angle_y - 5);//1 to 3; (max - min) ) + min  
            _this.angel_y_op_2 = Math.floor(Math.random() * ((_this.object_Angle_y + 6) - (_this.object_Angle_y + 1))) + (_this.object_Angle_y + 1);//1 to 3; (max - min) ) + min  

            _this.angel_x_op_1 = Math.floor(Math.random() * (_this.object_Angle_x - (_this.object_Angle_x - 5))) + (_this.object_Angle_x - 5);//1 to 3; (max - min) ) + min  
            _this.angel_x_op_2 = Math.floor(Math.random() * ((_this.object_Angle_x + 6) - (_this.object_Angle_x + 1))) + (_this.object_Angle_x + 1);//1 to 3; (max - min) ) + min  

            _this.angel_z_op_1 = 180 - (_this.angel_y_op_1 + _this.angel_x_op_1);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 8))) + (_this.object_Angle_y - 8);//1 to 3; (max - min) ) + min  
            _this.angel_z_op_2 = 180 - (_this.angel_y_op_2 + _this.angel_x_op_2);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y + 5))) + (_this.object_Angle_y + 5);//1 to 3; (max - min) ) + min  
        }
        if (_this.objectsArray[_this.count1] == 'cheese') {
            _this.optionArray = ['watermelon', 'sandwich', 'waffer', 'pizza', 'biscuit'];//'watermelon', 'sandwich', 'waffer', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray);
            _this.optionArray_2 = ['watermelon', 'sandwich', 'waffer', 'pizza', 'biscuit'];//'watermelon', 'sandwich', 'waffer', 'pizza', 'biscuit'
            _this.shuffleArray(_this.optionArray_2);
            // Get the first element from the shuffled array
            var firstElement = _this.optionArray[0];

            // Remove the first element from the second array
            var indexToRemove = _this.optionArray_2.indexOf(firstElement);
            if (indexToRemove !== -1) {
                _this.optionArray_2.splice(indexToRemove, 1);
            }
            console.log(_this.optionArray_2, "_this.optionArray_2");

            _this.angel_y_op_1 = Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 5))) + (_this.object_Angle_y - 5);//1 to 3; (max - min) ) + min  
            _this.angel_y_op_2 = Math.floor(Math.random() * ((_this.object_Angle_y + 6) - (_this.object_Angle_y + 1))) + (_this.object_Angle_y + 1);//1 to 3; (max - min) ) + min  

            _this.angel_x_op_1 = Math.floor(Math.random() * (_this.object_Angle_x - (_this.object_Angle_x - 5))) + (_this.object_Angle_x - 5);//1 to 3; (max - min) ) + min  
            _this.angel_x_op_2 = Math.floor(Math.random() * ((_this.object_Angle_x + 6) - (_this.object_Angle_x + 1))) + (_this.object_Angle_x + 1);//1 to 3; (max - min) ) + min  

            _this.angel_z_op_1 = 180 - (_this.angel_y_op_1 + _this.angel_x_op_1);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 8))) + (_this.object_Angle_y - 8);//1 to 3; (max - min) ) + min  
            _this.angel_z_op_2 = 180 - (_this.angel_y_op_2 + _this.angel_x_op_2);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y + 5))) + (_this.object_Angle_y + 5);//1 to 3; (max - min) ) + min  
        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            _this.optionArray = ['watermelon', 'cheese', 'waffer', 'biscuit'];//'watermelon', 'cheese', 'waffer', 'biscuit'
            _this.shuffleArray(_this.optionArray);

            _this.optionArray_2 = ['watermelon', 'cheese', 'waffer', 'biscuit'];//'watermelon', 'cheese', 'waffer', 'biscuit'
            _this.shuffleArray(_this.optionArray_2);
            // Get the first element from the shuffled array
            var firstElement = _this.optionArray[0];

            // Remove the first element from the second array
            var indexToRemove = _this.optionArray_2.indexOf(firstElement);
            if (indexToRemove !== -1) {
                _this.optionArray_2.splice(indexToRemove, 1);
            }
            console.log(_this.optionArray_2, "_this.optionArray_2");

            _this.angel_y_op_1 = Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 5))) + (_this.object_Angle_y - 5);//1 to 3; (max - min) ) + min  
            _this.angel_y_op_2 = Math.floor(Math.random() * ((_this.object_Angle_y + 6) - (_this.object_Angle_y + 1))) + (_this.object_Angle_y + 1);//1 to 3; (max - min) ) + min  

            _this.angel_x_op_1 = Math.floor(Math.random() * (_this.object_Angle_x - (_this.object_Angle_x - 5))) + (_this.object_Angle_x - 5);//1 to 3; (max - min) ) + min  
            _this.angel_x_op_2 = Math.floor(Math.random() * ((_this.object_Angle_x + 6) - (_this.object_Angle_x + 1))) + (_this.object_Angle_x + 1);//1 to 3; (max - min) ) + min  

            _this.angel_z_op_1 = 180 - (_this.angel_x_op_1 + _this.angel_y_op_1);//Math.floor(Math.random() * (_this.object_Angle_z - (_this.object_Angle_z - 5))) + (_this.object_Angle_z - 5);//1 to 3; (max - min) ) + min  
            _this.angel_z_op_2 = 180 - (_this.angel_x_op_2 + _this.angel_y_op_2);//Math.floor(Math.random() * (_this.object_Angle_z - (_this.object_Angle_z + 5))) + (_this.object_Angle_z + 5);//1 to 3; (max - min) ) + min  
        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {
            _this.optionArray = ['watermelon', 'sandwich', 'cheese', 'waffer', 'pizza'];//'watermelon', 'sandwich', 'cheese', 'waffer', 'pizza'
            _this.shuffleArray(_this.optionArray);
            console.log(_this.optionArray, "_this.optionArray");

            _this.optionArray_2 = ['watermelon', 'sandwich', 'cheese', 'waffer', 'pizza'];//'watermelon', 'sandwich', 'cheese', 'waffer', 'pizza'
            _this.shuffleArray(_this.optionArray_2);
            // Get the first element from the shuffled array
            var firstElement = _this.optionArray[0];

            // Remove the first element from the second array
            var indexToRemove = _this.optionArray_2.indexOf(firstElement);
            if (indexToRemove !== -1) {
                _this.optionArray_2.splice(indexToRemove, 1);
            }
            console.log(_this.optionArray_2, "_this.optionArray_2");

            _this.angel_y_op_1 = Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 5))) + (_this.object_Angle_y - 5);//1 to 3; (max - min) ) + min  
            _this.angel_y_op_2 = Math.floor(Math.random() * ((_this.object_Angle_y + 6) - (_this.object_Angle_y + 1))) + (_this.object_Angle_y + 1);//1 to 3; (max - min) ) + min  

            _this.angel_x_op_1 = Math.floor(Math.random() * (_this.object_Angle_x - (_this.object_Angle_x - 5))) + (_this.object_Angle_x - 5);//1 to 3; (max - min) ) + min  
            _this.angel_x_op_2 = Math.floor(Math.random() * ((_this.object_Angle_x + 6) - (_this.object_Angle_x + 1))) + (_this.object_Angle_x + 1);//1 to 3; (max - min) ) + min  

            _this.angel_z_op_1 = 180 - (_this.angel_y_op_1 + _this.angel_x_op_1);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y - 8))) + (_this.object_Angle_y - 8);//1 to 3; (max - min) ) + min  
            _this.angel_z_op_2 = 180 - (_this.angel_y_op_2 + _this.angel_x_op_2);//Math.floor(Math.random() * (_this.object_Angle_y - (_this.object_Angle_y + 5))) + (_this.object_Angle_y + 5);//1 to 3; (max - min) ) + min  
        }

        // Convert _this.angel_z_op_1 degrees to radians
        _this.object_Angle_z_sin_1 = _this.angel_z_op_1 * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_z_1 = Math.sin(_this.object_Angle_z_sin_1);
        _this.sinA_1 = _this.sineOfAngle_z_1.toFixed(2);
        console.log(_this.sinA_1, "a_1 angle.."); // Output: 0.5

        // Convert _this.angel_z_op_1 degrees to radians
        _this.object_Angle_z_sin_2 = _this.angel_z_op_2 * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_z_2 = Math.sin(_this.object_Angle_z_sin_2);
        _this.sinA_2 = _this.sineOfAngle_z_2.toFixed(2);
        console.log(_this.sinA_2, "a_2 angle.."); // Output: 0.5

        // Convert _this.watermelon_Angle_b degrees to radians
        _this.object_Angle_x_sin_1 = _this.angel_x_op_1 * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_x_1 = Math.sin(_this.object_Angle_x_sin_1);
        _this.sinB_1 = _this.sineOfAngle_x_1.toFixed(2);
        console.log(_this.sinB_1, "b_1 angle.."); // Output: 0.5

        // Convert _this.watermelon_Angle_b degrees to radians
        _this.object_Angle_x_sin_2 = _this.angel_x_op_2 * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_x_2 = Math.sin(_this.object_Angle_x_sin_2);
        _this.sinB_2 = _this.sineOfAngle_x_2.toFixed(2);
        console.log(_this.sinB_2, "b_2 angle.."); // Output: 0.5

        // Convert _this.object_Angle_y degrees to radians
        _this.object_Angle_y_sin_1 = _this.angel_y_op_1 * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_y_1 = Math.sin(_this.object_Angle_y_sin_1);
        _this.sinC_1 = _this.sineOfAngle_y_1.toFixed(2);
        console.log(_this.sinC_1, "c_1 angle.."); // Output: 0.5 

        // Convert _this.object_Angle_y degrees to radians
        _this.object_Angle_y_sin_2 = _this.angel_y_op_2 * Math.PI / 180;
        // Find the sine of the angle
        _this.sineOfAngle_y_2 = Math.sin(_this.object_Angle_y_sin_2);
        _this.sinC_2 = _this.sineOfAngle_y_2.toFixed(2);
        console.log(_this.sinC_2, "c_2 angle.."); // Output: 0.5 

        if (_this.objectsArray[_this.count1] == 'sandwich') {

            _this.side_y_op_1 = _this.side_2;//1 to 3; (max - min) ) + min  
            _this.side_y_op_2 = _this.side_1;//1 to 3; (max - min) ) + min  

            _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4));
            _this.side_x_op_2 = Math.round(((_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2).toFixed(4));

            _this.side_z_op_1 = Math.round(((_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1).toFixed(4));
            _this.side_z_op_2 = Math.round(((_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2).toFixed(4));

            if (_this.side_x_op_1 == _this.side_1 && _this.side_z_op_1 == _this.side_3) {
                console.log("is equal");
                _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4)) - 1;
                _this.side_z_op_1 = Math.round(((_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1).toFixed(4)) - 1;
            }

            console.log(_this.side_z_op_1, "_this.side_z_op_1", (_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1);
            console.log(_this.side_x_op_1, "_this.side_x_op_1", (_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1);
            console.log(_this.side_y_op_1, "_this.side_y_op_1");
            console.log(_this.side_x_op_2, "_this.side_x_op_2", (_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2);
            console.log(_this.side_z_op_2, "_this.side_z_op_2", (_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2);
            console.log(_this.side_y_op_2, "_this.side_y_op_2");

        }
        if (_this.objectsArray[_this.count1] == 'waffer' || _this.objectsArray[_this.count1] == 'cheese'
            || _this.objectsArray[_this.count1] == 'watermelon') {

            _this.side_y_op_1 = _this.side_2;//1 to 3; (max - min) ) + min  
            _this.side_y_op_2 = _this.side_2 - 1;//1 to 3; (max - min) ) + min  

            _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4));
            _this.side_x_op_2 = Math.round(((_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2).toFixed(4));

            _this.side_z_op_1 = Math.round(((_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1).toFixed(4));
            _this.side_z_op_2 = Math.round(((_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2).toFixed(4));

            if (_this.side_x_op_1 == _this.side_1 && _this.side_z_op_1 == _this.side_3) {
                _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4)) - 1;
                _this.side_z_op_1 = Math.round(((_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1).toFixed(4));
                console.log("same sides");
            }

            console.log(_this.side_z_op_1, "_this.side_z_op_1", (_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1);
            console.log(_this.side_x_op_1, "_this.side_x_op_1", (_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1);
            console.log(_this.side_y_op_1, "_this.side_y_op_1");
            console.log(_this.side_x_op_2, "_this.side_x_op_2", (_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2);
            console.log(_this.side_z_op_2, "_this.side_z_op_2", (_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2);
            console.log(_this.side_y_op_2, "_this.side_y_op_2");

        }
        if (_this.objectsArray[_this.count1] == 'biscuit') {

            _this.side_y_op_1 = _this.side_2;//1 to 3; (max - min) ) + min  
            _this.side_y_op_2 = _this.side_2 - 1;//1 to 3; (max - min) ) + min  

            _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4));//-1
            _this.side_x_op_2 = Math.round(((_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2).toFixed(4));

            _this.side_z_op_1 = Math.round(((_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1).toFixed(4));
            _this.side_z_op_2 = Math.round(((_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2).toFixed(4));

            if (_this.side_x_op_1 == _this.side_1 && _this.side_z_op_1 == _this.side_3) {
                _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4)) - 1;
                console.log("same sides");
            }

            console.log(_this.side_z_op_1, "_this.side_z_op_1", (_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1);
            console.log(_this.side_x_op_1, "_this.side_x_op_1", (_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1);
            console.log(_this.side_y_op_1, "_this.side_y_op_1");
            console.log(_this.side_x_op_2, "_this.side_x_op_2", (_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2);
            console.log(_this.side_z_op_2, "_this.side_z_op_2", (_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2);
            console.log(_this.side_y_op_2, "_this.side_y_op_2");

        }
        if (_this.objectsArray[_this.count1] == 'pizza') {
            _this.side_y_op_1 = _this.side_2;//1 to 3; (max - min) ) + min  
            _this.side_y_op_2 = _this.side_1;//1 to 3; (max - min) ) + min  

            _this.side_x_op_1 = Math.round(((_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1).toFixed(4)) - 1;
            _this.side_x_op_2 = Math.round(((_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2).toFixed(4));

            _this.side_z_op_1 = Math.round(((_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1).toFixed(4));
            _this.side_z_op_2 = Math.round(((_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2).toFixed(4));

            console.log(_this.side_z_op_1, "_this.side_z_op_1", (_this.side_y_op_1 * _this.sinA_1) / _this.sinC_1);
            console.log(_this.side_x_op_1, "_this.side_x_op_1", (_this.side_y_op_1 * _this.sinB_1) / _this.sinC_1);
            console.log(_this.side_y_op_1, "_this.side_y_op_1");
            console.log(_this.side_x_op_2, "_this.side_x_op_2", (_this.side_y_op_2 * _this.sinB_2) / _this.sinC_2);
            console.log(_this.side_z_op_2, "_this.side_z_op_2", (_this.side_y_op_2 * _this.sinA_2) / _this.sinC_2);
            console.log(_this.side_y_op_2, "_this.side_y_op_2");
        }

        _this.firstOptionSidePart();
        _this.secondOptionSidePart();
        _this.thirdOptionSidePart();
        _this.forthOptionSidePart();
    },

    //showing the first,second,third option box with randomize order
    firstOptionSidePart: function () {
        //40 degree orientation
        // console.log("firstOptionSidePart....");
        if (_this.optionOrder[0] == 1) {
            _this.box_1 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0], 'box');
            _this.box_1.frame = 0;
            _this.box_1.scale.setTo(0.95, 0.95);
        }
        else if (_this.optionOrder[1] == 1) {
            _this.box_1 = _this.add.sprite(_this.boxPosition_x[1], _this.boxPosition_y[1], 'box');
            _this.box_1.frame = 0;
            _this.box_1.scale.setTo(0.95, 0.95);
        }
        else if (_this.optionOrder[2] == 1) {
            _this.box_1 = _this.add.sprite(_this.boxPosition_x[2], _this.boxPosition_y[2], 'box');
            _this.box_1.frame = 0;
            _this.box_1.scale.setTo(0.95, 0.95);
        }
        else {
            console.log(".....");
        }

        switch (_this.optionArray[0]) {
            case 'watermelon':
                //  _this.watermelon_1 = _this.add.image(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'watermelon');

                if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.watermelon_1 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)
                    // _this.cheese_full.scale.setTo(0.45, 0.45);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(170, 170);
                    var vertexB = new Phaser.Point(285, 367);
                    var vertexC = new Phaser.Point(455 - ((80 * _this.sinA) / _this.sinB), 170);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(170, 170); // Set the starting point of the triangle
                    triangle.lineTo(465 - ((90 * _this.sinA) / _this.sinB), 160); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
                    triangle.lineTo(285, 367); // Draw the second line of the triangle
                    triangle.lineTo(170, 170); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    triangle.scale.setTo(0.8, 0.8);
                    // triangle.angle = 40;
                    triangle.x = 150;
                    triangle.y = 120;
                    _this.watermelon_1.mask = triangle;

                    _this.angle_z = _this.add.text(260, 20, _this.object_Angle_z + "\u{00B0}");//75,20 200, 200
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(200, 200, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(60, 30, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(170, 10, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 130, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(110, 110, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.watermelon_1 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.watermelon_1.scale.setTo(1.1, 1.1);
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(150, 210);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(125, 25); // Set the starting point of the triangle
                    triangle.lineTo(275, 70); // Draw the first line of the triangle
                    triangle.lineTo(150, 210); // Draw the second line of the triangle
                    triangle.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 40;
                    // triangle.x = 110;
                    // triangle.y = -60;
                    //_this.watermelon_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 2.53073; // 145
                    triangle.x = 200;
                    triangle.y = 185;
                    _this.watermelon_1.mask = triangle;

                    _this.angle_z = _this.add.text(80, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 150, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(160, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(100, 90, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(190, 190, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 60, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.watermelon_1 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.watermelon_1.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(266, 40);
                    var vertexC = new Phaser.Point(280 - ((80 * _this.sinA) / _this.sinB), 175);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(266, 40); // Draw the first line of the triangle
                    triangle.lineTo(280 - ((80 * _this.sinA) / _this.sinB), 175); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // Rotate the triangle
                    triangle.rotation += 1.39627; // 80
                    triangle.x = 240;
                    triangle.y = 105;

                    // triangle.angle = 40;
                    // triangle.x = 90;
                    // triangle.y = -60;
                    _this.watermelon_1.mask = triangle;

                    _this.angle_z = _this.add.text(200, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(240, 190, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(80, 160, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(140, 70, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 100, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(170, 180, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.watermelon_1 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA) / _this.sinB), 178);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(260, 40); // Draw the first line of the triangle
                    triangle.lineTo(268 - ((80 * _this.sinA) / _this.sinB), 178); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 40;
                    // triangle.x = 90;
                    // triangle.y = -60;
                    // _this.watermelon_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 0.750492; // 43
                    triangle.x = 220;
                    triangle.y = 80;
                    _this.watermelon_1.mask = triangle;

                    _this.angle_z = _this.add.text(120, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 130, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(130, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(110, 100, _this.side_1);//110, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(200, 180, _this.side_2);//220, 50
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 50, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.watermelon_1 = _this.add.image(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'watermelon');

                    _this.angle_z = _this.add.text(75, 20, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 140, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(120, 180, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(90, 100, _this.side_1);
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(220, 80, _this.side_2);
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(200, 180, _this.side_3);
                    _this.applyingStyle_Orange(_this.side_op_z);

                    // _this.watermelon_1.angle = 40;
                    // _this.watermelon_1.x = 120;
                    // _this.watermelon_1.y = 30;

                    // Set the pivot point to the center of the triangle
                    var centerX = _this.boxPosition_x[0];
                    var centerY = _this.boxPosition_y[0] - 1;
                    _this.watermelon_1.pivot.set(centerX, centerY);

                    // Rotate the triangle
                    _this.watermelon_1.rotation += 0.698132;//25
                    _this.watermelon_1.x = 140;
                    _this.watermelon_1.y = 140;

                    var triangle = _this.add.graphics(0, 0);
                }

                _this.watermelonGroup.addChild(_this.watermelon_1);
                _this.watermelonGroup.addChild(triangle);
                _this.watermelonGroup.addChild(_this.angle_z);
                _this.watermelonGroup.addChild(_this.angle_x);
                _this.watermelonGroup.addChild(_this.angle_y);
                _this.watermelonGroup.addChild(_this.side_op_x);
                _this.watermelonGroup.addChild(_this.side_op_y);
                _this.watermelonGroup.addChild(_this.side_op_z);
                _this.box_1.addChild(_this.watermelonGroup);
                _this.angle_z.visible = false;
                _this.angle_x.visible = false;
                _this.angle_y.visible = false;
                _this.side_op_x.visible = false;
                _this.side_op_y.visible = false;
                _this.side_op_z.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z.visible = true;
                }


                break;
            case 'sandwich':
                // _this.sandwich_1 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'sandwichanim');
                if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.sandwich_1 = _this.add.image(25, 30, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_1.scale.setTo(0.6, 0.6);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(170, 170);
                    var vertexB = new Phaser.Point(285, 367);
                    var vertexC = new Phaser.Point(455 - ((80 * _this.sinA) / _this.sinB), 170);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(170, 170); // Set the starting point of the triangle
                    triangle.lineTo(465 - ((90 * _this.sinA) / _this.sinB), 160); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
                    triangle.lineTo(285, 367); // Draw the second line of the triangle
                    triangle.lineTo(170, 170); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    triangle.scale.setTo(0.8, 0.8);
                    // triangle.angle = 40;
                    triangle.x = 150;
                    triangle.y = 120;
                    _this.sandwich_1.mask = triangle;

                    _this.angle_z = _this.add.text(260, 20, _this.object_Angle_z + "\u{00B0}");//75,20 200, 200
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(200, 200, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(60, 30, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(170, 10, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 130, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(110, 110, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.sandwich_1 = _this.add.image(340, 260, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_1.scale.setTo(0.6, 0.6);
                    _this.sandwich_1.angle = 145;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(150, 210);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(125, 25); // Set the starting point of the triangle
                    triangle.lineTo(275, 70); // Draw the first line of the triangle
                    triangle.lineTo(150, 210); // Draw the second line of the triangle
                    triangle.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 40;
                    // triangle.x = 110;
                    // triangle.y = -60;
                    //_this.watermelon_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 2.53073; // 145
                    triangle.x = 200;
                    triangle.y = 185;
                    //_this.sandwich_1.mask = triangle;

                    _this.angle_z = _this.add.text(80, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 150, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(160, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(100, 90, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(190, 190, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 60, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.sandwich_1 = _this.add.image(223, -40, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_1.scale.setTo(0.6, 0.6);
                    _this.sandwich_1.angle = 80;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(266, 40);
                    var vertexC = new Phaser.Point(280 - ((80 * _this.sinA) / _this.sinB), 175);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // var triangle = _this.add.graphics(0, 0);


                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(266, 40); // Draw the first line of the triangle
                    triangle.lineTo(280 - ((80 * _this.sinA) / _this.sinB), 175); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 90
                    // triangle.x = 280;
                    // triangle.y = -70;
                    // _this.sandwich_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 1.39627; // 80
                    triangle.x = 240;
                    triangle.y = 105;
                    _this.sandwich_1.mask = triangle;

                    _this.angle_z = _this.add.text(200, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(240, 190, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(80, 160, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(140, 70, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 100, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(170, 180, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.sandwich_1 = _this.add.image(120, -25, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_1.scale.setTo(0.6, 0.6);
                    _this.sandwich_1.angle = 43;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA) / _this.sinB), 178);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(260, 40); // Draw the first line of the triangle
                    triangle.lineTo(268 - ((80 * _this.sinA) / _this.sinB), 178); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 180
                    // triangle.x = 360;
                    // triangle.y = 220;
                    // _this.sandwich_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 0.750492; // 43
                    triangle.x = 220;
                    triangle.y = 80;
                    _this.sandwich_1.mask = triangle;

                    _this.angle_z = _this.add.text(120, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 130, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(130, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(110, 100, _this.side_1);//110, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(200, 180, _this.side_2);//220, 50
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 50, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.sandwich_1 = _this.add.image(310, -70, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_1.scale.setTo(0.8, 0.8);
                    _this.sandwich_1.angle = 110;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(78, 60); // Set the starting point of the triangle
                    triangle.lineTo(275, 60); // Draw the first line of the triangle
                    triangle.lineTo(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB)); // Draw the second line of the triangle
                    triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 90
                    // triangle.x = 300;
                    // triangle.y = -65;
                    // _this.sandwich_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 1.91986; // 110
                    triangle.x = 230;
                    triangle.y = 120;
                    _this.sandwich_1.mask = triangle;

                    _this.angle_z = _this.add.text(270, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(40, 90, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(210, 200, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(240, 120, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(150, 20, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(100, 150, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }

                _this.sandwitchGroup.addChild(_this.sandwich_1);
                _this.sandwitchGroup.addChild(triangle);
                _this.sandwitchGroup.addChild(_this.angle_z);
                _this.sandwitchGroup.addChild(_this.angle_x);
                _this.sandwitchGroup.addChild(_this.angle_y);
                _this.sandwitchGroup.addChild(_this.side_op_x);
                _this.sandwitchGroup.addChild(_this.side_op_y);
                _this.sandwitchGroup.addChild(_this.side_op_z);
                _this.box_1.addChild(_this.sandwitchGroup);
                _this.angle_z.visible = false;
                _this.angle_x.visible = false;
                _this.angle_y.visible = false;
                _this.side_op_x.visible = false;
                _this.side_op_y.visible = false;
                _this.side_op_z.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z.visible = true;
                }

                break;
            case 'waffer':
                // _this.waffer_1 = _this.add.sprite(_this.boxPosition_x[0] + 30, _this.boxPosition_y[0] - 50, 'waffer');

                if (_this.objectsArray[_this.count1] == 'biscuit') {

                    _this.waffer_1 = _this.add.image(90, 20, 'waffer_full');//90, 25

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(170, 170);
                    var vertexB = new Phaser.Point(285, 367);
                    var vertexC = new Phaser.Point(455 - ((80 * _this.sinA) / _this.sinB), 170);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(170, 170); // Set the starting point of the triangle
                    triangle.lineTo(465 - ((90 * _this.sinA) / _this.sinB), 160); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
                    triangle.lineTo(285, 367); // Draw the second line of the triangle
                    triangle.lineTo(170, 170); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    triangle.scale.setTo(0.8, 0.8);
                    // triangle.angle = 40;
                    triangle.x = 150;
                    triangle.y = 120;
                    _this.waffer_1.mask = triangle;

                    _this.angle_z = _this.add.text(260, 20, _this.object_Angle_z + "\u{00B0}");//75,20 200, 200
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(200, 200, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(60, 30, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(170, 10, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 130, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(110, 110, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);

                }
                if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.waffer_1 = _this.add.image(90, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(150, 210);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(125, 25); // Set the starting point of the triangle
                    triangle.lineTo(275, 70); // Draw the first line of the triangle
                    triangle.lineTo(150, 210); // Draw the second line of the triangle
                    triangle.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 40;
                    // triangle.x = 110;
                    // triangle.y = -60;
                    //_this.watermelon_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 2.53073; // 145
                    triangle.x = 200;
                    triangle.y = 185;
                    _this.waffer_1.mask = triangle;

                    _this.angle_z = _this.add.text(80, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 150, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(160, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(100, 90, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(190, 190, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 60, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);

                }
                if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.waffer_1 = _this.add.image(90, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(266, 40);
                    var vertexC = new Phaser.Point(280 - ((80 * _this.sinA) / _this.sinB), 175);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // var triangle = _this.add.graphics(0, 0);

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(266, 40); // Draw the first line of the triangle
                    triangle.lineTo(280 - ((80 * _this.sinA) / _this.sinB), 175); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // Rotate the triangle
                    triangle.rotation += 1.39627; // 80
                    triangle.x = 240;
                    triangle.y = 105;
                    _this.waffer_1.mask = triangle;

                    _this.angle_z = _this.add.text(200, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(240, 190, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(80, 160, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(140, 70, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 100, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(170, 180, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.waffer_1 = _this.add.image(78, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_1.scale.setTo(1.1, 1.1);
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //    var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(78, 60); // Set the starting point of the triangle
                    triangle.lineTo(275, 60); // Draw the first line of the triangle
                    triangle.lineTo(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB)); // Draw the second line of the triangle
                    triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 80;
                    // triangle.x = 240;
                    // triangle.y = -70;
                    //  _this.waffer_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 1.91986; // 110
                    triangle.x = 230;
                    triangle.y = 120;
                    _this.waffer_1.mask = triangle;


                    _this.angle_z = _this.add.text(270, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(40, 90, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(210, 200, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(240, 120, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(150, 20, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(100, 150, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.waffer_1 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_1.scale.setTo(1.1, 1.1);

                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(77, 80);
                    var vertexB = new Phaser.Point(270, 80);
                    var vertexC = new Phaser.Point(180, 190);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // var triangle = _this.add.graphics(0, 0);
                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle// 0xffffff
                    triangle.moveTo(77, 80); // Set the starting point of the triangle
                    triangle.lineTo(270, 80); // Draw the first line of the triangle
                    triangle.lineTo(180, 190); // Draw the second line of the triangle
                    triangle.lineTo(77, 80); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    // Rotate the triangle
                    triangle.rotation += 0.349066; // 20
                    //  triangle.x = 170;
                    //  triangle.y = 150;
                    _this.waffer_1.mask = triangle;


                    _this.angle_z = _this.add.text(50, 20, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 100, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(140, 190, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(80, 110, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(160, 40, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(200, 160, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }

                _this.wafferGroup.addChild(_this.waffer_1);
                _this.wafferGroup.addChild(triangle);
                _this.wafferGroup.addChild(_this.angle_z);
                _this.wafferGroup.addChild(_this.angle_x);
                _this.wafferGroup.addChild(_this.angle_y);
                _this.wafferGroup.addChild(_this.side_op_x);
                _this.wafferGroup.addChild(_this.side_op_y);
                _this.wafferGroup.addChild(_this.side_op_z);
                _this.box_1.addChild(_this.wafferGroup);
                _this.angle_z.visible = false;
                _this.angle_x.visible = false;
                _this.angle_y.visible = false;
                _this.side_op_x.visible = false;
                _this.side_op_y.visible = false;
                _this.side_op_z.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z.visible = true;
                }

                break;
            case 'cheese':
                //  _this.cheese_1 = _this.add.sprite(_this.boxPosition_x[0] + 30, _this.boxPosition_y[0] - 30, 'cheeseanim');
                if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.cheese_1 = _this.add.image(90, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    // _this.cheese_full.scale.setTo(0.45, 0.45);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(170, 170);
                    var vertexB = new Phaser.Point(285, 367);
                    var vertexC = new Phaser.Point(455 - ((80 * _this.sinA) / _this.sinB), 170);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(170, 170); // Set the starting point of the triangle
                    triangle.lineTo(465 - ((90 * _this.sinA) / _this.sinB), 160); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
                    triangle.lineTo(285, 367); // Draw the second line of the triangle
                    triangle.lineTo(170, 170); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    triangle.scale.setTo(0.8, 0.8);
                    // triangle.angle = 40;
                    triangle.x = 150;
                    triangle.y = 120;
                    _this.cheese_1.mask = triangle;

                    _this.angle_z = _this.add.text(260, 20, _this.object_Angle_z + "\u{00B0}");//75,20 200, 200
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(200, 200, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(60, 30, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(170, 10, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 130, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(110, 110, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);

                }
                if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.cheese_1 = _this.add.image(90, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(150, 210);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(125, 25); // Set the starting point of the triangle
                    triangle.lineTo(275, 70); // Draw the first line of the triangle
                    triangle.lineTo(150, 210); // Draw the second line of the triangle
                    triangle.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 40;
                    // triangle.x = 110;
                    // triangle.y = -60;
                    //_this.watermelon_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 2.53073; // 145
                    triangle.x = 200;
                    triangle.y = 185;
                    _this.cheese_1.mask = triangle;

                    _this.angle_z = _this.add.text(80, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 150, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(160, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(100, 90, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(190, 190, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 60, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);

                }
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.cheese_1 = _this.add.image(90, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    // _this.cheese_full.scale.setTo(0.45, 0.45);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA) / _this.sinB), 178);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(260, 40); // Draw the first line of the triangle
                    triangle.lineTo(268 - ((80 * _this.sinA) / _this.sinB), 178); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 80;
                    // triangle.x = 240;
                    // triangle.y = -80;
                    // _this.cheese_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 0.750492; // 43
                    triangle.x = 220;
                    triangle.y = 80;
                    _this.cheese_1.mask = triangle;

                    _this.angle_z = _this.add.text(120, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 130, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(130, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(110, 100, _this.side_1);//110, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(200, 180, _this.side_2);//220, 50
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 50, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.cheese_1 = _this.add.image(78, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_1.scale.setTo(1.1, 1.1);
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(78, 60); // Set the starting point of the triangle
                    triangle.lineTo(275, 60); // Draw the first line of the triangle
                    triangle.lineTo(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB)); // Draw the second line of the triangle
                    triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 80;
                    // triangle.x = 240;
                    // triangle.y = -70;
                    //  _this.cheese_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 1.91986; // 110
                    triangle.x = 230;
                    triangle.y = 120;
                    _this.cheese_1.mask = triangle;


                    _this.angle_z = _this.add.text(270, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(40, 90, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(210, 200, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(240, 120, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(150, 20, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(100, 150, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.cheese_1 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_1.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(77, 80);
                    var vertexB = new Phaser.Point(270, 80);
                    var vertexC = new Phaser.Point(180, 190);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // var triangle = _this.add.graphics(0, 0);
                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle// 0xffffff
                    triangle.moveTo(77, 80); // Set the starting point of the triangle
                    triangle.lineTo(270, 80); // Draw the first line of the triangle
                    triangle.lineTo(180, 190); // Draw the second line of the triangle
                    triangle.lineTo(77, 80); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    // Rotate the triangle
                    triangle.rotation += 0.349066; // 20
                    //  triangle.x = 170;
                    //  triangle.y = 150;
                    _this.cheese_1.mask = triangle;


                    _this.angle_z = _this.add.text(50, 20, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 100, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(140, 190, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(80, 110, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(160, 40, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(200, 160, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }

                _this.CheeseGroup.addChild(_this.cheese_1);
                _this.CheeseGroup.addChild(triangle);
                _this.CheeseGroup.addChild(_this.angle_z);
                _this.CheeseGroup.addChild(_this.angle_x);
                _this.CheeseGroup.addChild(_this.angle_y);
                _this.CheeseGroup.addChild(_this.side_op_x);
                _this.CheeseGroup.addChild(_this.side_op_y);
                _this.CheeseGroup.addChild(_this.side_op_z);
                _this.box_1.addChild(_this.CheeseGroup);
                _this.angle_z.visible = false;
                _this.angle_x.visible = false;
                _this.angle_y.visible = false;
                _this.side_op_x.visible = false;
                _this.side_op_y.visible = false;
                _this.side_op_z.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z.visible = true;
                }

                break;
            case 'pizza':
                // _this.pizza_1 = _this.add.image(_this.boxPosition_x[0] + 50, _this.boxPosition_y[0] - 40, 'pizza');
                // _this.pizza_1.scale.setTo(0.55, 0.55);

                if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.pizza_1 = _this.add.image(90, 37, 'pizza_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(170, 170);
                    var vertexB = new Phaser.Point(285, 367);
                    var vertexC = new Phaser.Point(455 - ((80 * _this.sinA) / _this.sinB), 170);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(170, 170); // Set the starting point of the triangle
                    triangle.lineTo(465 - ((90 * _this.sinA) / _this.sinB), 160); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
                    triangle.lineTo(285, 367); // Draw the second line of the triangle
                    triangle.lineTo(170, 170); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    triangle.scale.setTo(0.8, 0.8);
                    // triangle.angle = 40;
                    triangle.x = 150;
                    triangle.y = 120;
                    _this.pizza_1.mask = triangle;

                    _this.angle_z = _this.add.text(260, 20, _this.object_Angle_z + "\u{00B0}");//75,20 200, 200
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(200, 200, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(60, 30, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(170, 10, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 130, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(110, 110, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.pizza_1 = _this.add.image(222, -1, 'pizza_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.pizza_1.angle = 80;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(266, 40);
                    var vertexC = new Phaser.Point(280 - ((80 * _this.sinA) / _this.sinB), 175);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(266, 40); // Draw the first line of the triangle
                    triangle.lineTo(280 - ((80 * _this.sinA) / _this.sinB), 175); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 180;
                    // triangle.x = 380;
                    // triangle.y = 230;

                    // Rotate the triangle
                    triangle.rotation += 1.39627; // 80
                    triangle.x = 240;
                    triangle.y = 105;
                    _this.pizza_1.mask = triangle;

                    _this.angle_z = _this.add.text(200, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(240, 190, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(80, 160, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(140, 70, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 100, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(170, 180, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.pizza_1 = _this.add.image(145, 10, 'pizza_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.pizza_1.angle = 43;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA) / _this.sinB), 178);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(260, 40); // Draw the first line of the triangle
                    triangle.lineTo(268 - ((80 * _this.sinA) / _this.sinB), 178); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 180;
                    // triangle.x = 380;
                    // triangle.y = 230;
                    // _this.pizza_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 0.750492; // 43
                    triangle.x = 220;
                    triangle.y = 80;
                    _this.pizza_1.mask = triangle;

                    _this.angle_z = _this.add.text(120, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 130, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(130, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(110, 100, _this.side_1);//110, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(200, 180, _this.side_2);//220, 50
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 50, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.pizza_1 = _this.add.image(270, 10, 'pizza_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.pizza_1.scale.setTo(1.1, 1.1);
                    _this.pizza_1.angle = 110;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(78, 60); // Set the starting point of the triangle
                    triangle.lineTo(275, 60); // Draw the first line of the triangle
                    triangle.lineTo(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB)); // Draw the second line of the triangle
                    triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 80;
                    // triangle.x = 240;
                    // triangle.y = -70;
                    //  _this.pizza_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 1.91986; // 110
                    triangle.x = 230;
                    triangle.y = 120;
                    _this.pizza_1.mask = triangle;


                    _this.angle_z = _this.add.text(270, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(40, 90, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(210, 200, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(240, 120, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(150, 20, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(100, 150, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.pizza_1 = _this.add.image(80, 45, 'pizza_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.pizza_1.angle = 20;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(77, 80);
                    var vertexB = new Phaser.Point(270, 80);
                    var vertexC = new Phaser.Point(180, 190);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // var triangle = _this.add.graphics(0, 0);
                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle// 0xffffff
                    triangle.moveTo(77, 80); // Set the starting point of the triangle
                    triangle.lineTo(270, 80); // Draw the first line of the triangle
                    triangle.lineTo(180, 190); // Draw the second line of the triangle
                    triangle.lineTo(77, 80); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    // Rotate the triangle
                    triangle.rotation += 0.349066; // 20
                    //  triangle.x = 170;
                    //  triangle.y = 150;
                    _this.pizza_1.mask = triangle;


                    _this.angle_z = _this.add.text(50, 20, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 100, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(140, 190, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(80, 110, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(160, 40, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(200, 160, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }

                _this.pizzaGroup.addChild(_this.pizza_1);
                _this.pizzaGroup.addChild(triangle);
                _this.pizzaGroup.addChild(_this.angle_z);
                _this.pizzaGroup.addChild(_this.angle_x);
                _this.pizzaGroup.addChild(_this.angle_y);
                _this.pizzaGroup.addChild(_this.side_op_x);
                _this.pizzaGroup.addChild(_this.side_op_y);
                _this.pizzaGroup.addChild(_this.side_op_z);
                _this.box_1.addChild(_this.pizzaGroup);
                _this.angle_z.visible = false;
                _this.angle_x.visible = false;
                _this.angle_y.visible = false;
                _this.side_op_x.visible = false;
                _this.side_op_y.visible = false;
                _this.side_op_z.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z.visible = true;
                }

                break;
            case 'biscuit':
                //  _this.biscuit_1 = _this.add.image(_this.boxPosition_x[0] + 20, _this.boxPosition_y[0] - 40, 'biscuits');
                if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.biscuit_1 = _this.add.image(90, 20, 'biscuit_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(150, 210);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(125, 25); // Set the starting point of the triangle
                    triangle.lineTo(275, 70); // Draw the first line of the triangle
                    triangle.lineTo(150, 210); // Draw the second line of the triangle
                    triangle.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 40;
                    // triangle.x = 110;
                    // triangle.y = -60;
                    //_this.watermelon_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 2.53073; // 145
                    triangle.x = 200;
                    triangle.y = 185;
                    _this.biscuit_1.mask = triangle;

                    _this.angle_z = _this.add.text(80, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 150, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(160, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(100, 90, _this.side_1);//90, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(190, 190, _this.side_2);//220, 80
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 60, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.biscuit_1 = _this.add.image(90, 20, 'biscuit_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(266, 40);
                    var vertexC = new Phaser.Point(280 - ((80 * _this.sinA) / _this.sinB), 175);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(266, 40); // Draw the first line of the triangle
                    triangle.lineTo(285 - ((80 * _this.sinA) / _this.sinB), 175); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 100;
                    // triangle.x = 300;
                    // triangle.y = -60;

                    // Rotate the triangle
                    triangle.rotation += 1.39627; // 80
                    triangle.x = 240;
                    triangle.y = 105;
                    _this.biscuit_1.mask = triangle;

                    _this.angle_z = _this.add.text(200, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(240, 190, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(80, 160, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(140, 70, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(250, 100, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(170, 180, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.biscuit_1 = _this.add.image(90, 20, 'biscuit_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA) / _this.sinB), 178);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(110, 40); // Set the starting point of the triangle
                    triangle.lineTo(260, 40); // Draw the first line of the triangle
                    triangle.lineTo(268 - ((80 * _this.sinA) / _this.sinB), 178); // Draw the second line of the triangle
                    triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 100;
                    // triangle.x = 300;
                    // triangle.y = -60;
                    // _this.biscuit_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 0.750492; // 43
                    triangle.x = 220;
                    triangle.y = 80;
                    _this.biscuit_1.mask = triangle;

                    _this.angle_z = _this.add.text(120, 190, _this.object_Angle_z + "\u{00B0}");//75,20
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 130, _this.object_Angle_x + "\u{00B0}");//280, 140
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(130, 5, _this.object_Angle_y + "\u{00B0}");//120, 180
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(110, 100, _this.side_1);//110, 100
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(200, 180, _this.side_2);//220, 50
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(220, 50, _this.side_3);//200, 180
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.biscuit_1 = _this.add.image(78, 10, 'biscuit_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.biscuit_1.scale.setTo(1.1, 1.1)
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle.moveTo(78, 60); // Set the starting point of the triangle
                    triangle.lineTo(275, 60); // Draw the first line of the triangle
                    triangle.lineTo(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB)); // Draw the second line of the triangle
                    triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    triangle.alpha = 0;
                    // triangle.angle = 80;
                    // triangle.x = 240;
                    // triangle.y = -70;
                    //  _this.biscuit_1.mask = triangle;

                    // Rotate the triangle
                    triangle.rotation += 1.91986; // 110
                    triangle.x = 230;
                    triangle.y = 120;
                    _this.biscuit_1.mask = triangle;


                    _this.angle_z = _this.add.text(270, 5, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(40, 90, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(210, 200, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(240, 120, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(150, 20, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(100, 150, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);
                }
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.biscuit_1 = _this.add.image(78, 20, 'biscuit_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(77, 80);
                    var vertexB = new Phaser.Point(270, 80);
                    var vertexC = new Phaser.Point(180, 190);

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle.pivot.setTo(circumcenterX, circumcenterY); //................

                    // var triangle = _this.add.graphics(0, 0);
                    // Draw the triangle on the graphics object
                    triangle.beginFill(0x65B4C3); // Set the color of the triangle// 0xffffff
                    triangle.moveTo(77, 80); // Set the starting point of the triangle
                    triangle.lineTo(270, 80); // Draw the first line of the triangle
                    triangle.lineTo(180, 190); // Draw the second line of the triangle
                    triangle.lineTo(77, 80); // Draw the third line of the triangle to close the shape
                    triangle.endFill();

                    // Rotate the triangle
                    triangle.rotation += 0.349066; // 20
                    //  triangle.x = 170;
                    //  triangle.y = 150;
                    _this.biscuit_1.mask = triangle;


                    _this.angle_z = _this.add.text(50, 20, _this.object_Angle_z + "\u{00B0}");//75, 190
                    _this.applyingStyle_Orange(_this.angle_z);

                    _this.angle_x = _this.add.text(280, 100, _this.object_Angle_x + "\u{00B0}");//200, 10
                    _this.applyingStyle_Orange(_this.angle_x);

                    _this.angle_y = _this.add.text(140, 190, _this.object_Angle_y + "\u{00B0}");//250, 160
                    _this.applyingStyle_Orange(_this.angle_y);

                    _this.side_op_x = _this.add.text(80, 110, _this.side_1);//180, 190
                    _this.applyingStyle_Orange(_this.side_op_x);

                    _this.side_op_y = _this.add.text(160, 40, _this.side_2);//120, 100
                    _this.applyingStyle_Orange(_this.side_op_y);

                    _this.side_op_z = _this.add.text(200, 160, _this.side_3);//240, 90
                    _this.applyingStyle_Orange(_this.side_op_z);

                }

                _this.biscuitGroup.addChild(_this.biscuit_1);
                _this.biscuitGroup.addChild(triangle);
                _this.biscuitGroup.addChild(_this.angle_z);
                _this.biscuitGroup.addChild(_this.angle_x);
                _this.biscuitGroup.addChild(_this.angle_y);
                _this.biscuitGroup.addChild(_this.side_op_x);
                _this.biscuitGroup.addChild(_this.side_op_y);
                _this.biscuitGroup.addChild(_this.side_op_z);
                _this.box_1.addChild(_this.biscuitGroup);
                _this.angle_z.visible = false;
                _this.angle_x.visible = false;
                _this.angle_y.visible = false;
                _this.side_op_x.visible = false;
                _this.side_op_y.visible = false;
                _this.side_op_z.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z.visible = true;
                }

                break;
        }

        _this.box_1.inputEnabled = true;
        _this.box_1.input.useHandCursor = true;
        _this.box_1.events.onInputDown.add(_this.box_1Clicked, _this);

        // cheese first option 80 degree
        // cheese second option 300 degree
        // cheese third option 15 degree

        // waffer first option 43 degree
        // waffer second option 300 degree
        // waffer third option 10 degree

        // watermelon first option 110 degree
        // watermelon second option 160 degree
        // watermelon third option 20 degree

        // biscuit first option  degree
        // biscuit second option 20 degree
        // biscuit third option 145 degree

        // pizza first option 145 degree
        // pizza second option 49 degree
        // pizza third option 200 degree

        // sandwich first option 20 degree 
        // sandwich second option 160 degree
        // sandwich third option 350 degree
    },
    secondOptionSidePart: function () {
        //70 degree orientation
        // console.log("secondOptionSidePart....");
        if (_this.optionOrder[0] == 2) {
            _this.box_2 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0], 'box');
            _this.box_2.frame = 0;
            _this.box_2.scale.setTo(0.95, 0.95);
        }
        else if (_this.optionOrder[1] == 2) {
            _this.box_2 = _this.add.sprite(_this.boxPosition_x[1], _this.boxPosition_y[1], 'box');
            _this.box_2.frame = 0;
            _this.box_2.scale.setTo(0.95, 0.95);
        }
        else if (_this.optionOrder[2] == 2) {
            _this.box_2 = _this.add.sprite(_this.boxPosition_x[2], _this.boxPosition_y[2], 'box');
            _this.box_2.frame = 0;
            _this.box_2.scale.setTo(0.95, 0.95);
        }
        else {
            console.log(".....");
        }

        switch (_this.optionArray_2[0]) {
            case 'watermelon':
                // _this.watermelon_2 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'watermelon');

                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.watermelon_2 = _this.add.image(78, 20, 'watermelon_full');

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle//185
                    triangle_1.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    //  triangle_1.x = 170;
                    triangle_1.y = 160;
                    _this.watermelon_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(60, 200, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 110, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(130, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(80, 100, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(170, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(210, 50, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.watermelon_2 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 100 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 100 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.watermelon_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 160;
                    triangle_1.y = 110;
                    _this.watermelon_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(75, 180, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 160, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(170, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(120, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(190, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(250, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.watermelon_2 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;

                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 140;
                    triangle_1.y = 105;
                    _this.watermelon_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(65, 170, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(170, 10, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(260, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(170, 180, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(120, 80, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(230, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.watermelon_2 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 33;
                    // triangle_1.x = 80;
                    // triangle_1.y = -60;
                    //_this.watermelon_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 0.349066; // 20
                    triangle_1.x = 200;
                    triangle_1.y = 60;
                    _this.watermelon_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(120, 5, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 70, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 180, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(100, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 30, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(200, 160, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.watermelon_2 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle 150, 210 
                    triangle_1.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    // triangle_1.angle = 40;
                    // triangle_1.x = 115;
                    // triangle_1.y = -60;

                    //_this.watermelon_2.mask = triangle_1;
                    // Rotate the triangle
                    triangle_1.rotation += 0.855211; // 49
                    triangle_1.x = 250;
                    triangle_1.y = 110;
                    _this.watermelon_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(190, 10, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(290, 170, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(60, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(130, 70, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(260, 90, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(190, 180, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }

                _this.watermelonGroup_2.addChild(_this.watermelon_2);
                _this.watermelonGroup_2.addChild(triangle_1);
                _this.watermelonGroup_2.addChild(_this.angle_z_2);
                _this.watermelonGroup_2.addChild(_this.angle_x_2);
                _this.watermelonGroup_2.addChild(_this.angle_y_2);
                _this.watermelonGroup_2.addChild(_this.side_op_x_2);
                _this.watermelonGroup_2.addChild(_this.side_op_y_2);
                _this.watermelonGroup_2.addChild(_this.side_op_z_2);
                _this.box_2.addChild(_this.watermelonGroup_2);
                _this.box_2.addChild(_this.wGroup);
                _this.angle_z_2.visible = false;
                _this.angle_x_2.visible = false;
                _this.angle_y_2.visible = false;
                _this.side_op_x_2.visible = false;
                _this.side_op_y_2.visible = false;
                _this.side_op_z_2.visible = false;


                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_2.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_2.visible = true;
                }

                break;
            case 'sandwich':
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.sandwich_2 = _this.add.image(80, 240, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_2.scale.setTo(0.6, 0.6);
                    _this.sandwich_2.angle = 300;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 100 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.sandwich_2.mask = triangle_1;


                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 160;
                    triangle_1.y = 110;
                    _this.sandwich_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(75, 180, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 160, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(170, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(120, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(190, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(250, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.sandwich_2 = _this.add.image(50, 240, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_2.scale.setTo(0.6, 0.6);
                    _this.sandwich_2.angle = 300;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;

                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 140;
                    triangle_1.y = 105;
                    _this.sandwich_2.mask = triangle_1;


                    _this.angle_z_2 = _this.add.text(65, 170, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(170, 10, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(260, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(170, 180, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(120, 80, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(230, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.sandwich_2 = _this.add.image(370, 118, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_2.scale.setTo(0.7, 0.7);
                    _this.sandwich_2.angle = 160;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    triangle_1.scale.setTo(1.2, 1.2);

                    // triangle_1.angle = 160;
                    // triangle_1.x = 400;
                    // triangle_1.y = 130;
                    // _this.sandwich_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    triangle_1.x = 200;
                    triangle_1.y = 170;
                    _this.sandwich_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(300, 120, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(70, 190, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(120, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(220, 50, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 170, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(90, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.sandwich_2 = _this.add.image(70, 5, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_2.scale.setTo(0.6, 0.6);
                    _this.sandwich_2.angle = 20;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 33;
                    // triangle_1.x = 80;
                    // triangle_1.y = -60;
                    //_this.watermelon_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 0.349066; // 20
                    triangle_1.x = 200;
                    triangle_1.y = 60;
                    _this.sandwich_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(120, 5, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 70, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 180, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(100, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 30, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(200, 160, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else {
                    _this.sandwich_2 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'sandwichanim');
                    // _this.sandwich_2.scale.setTo(0.6, 0.6);
                    _this.angle_z_2 = _this.add.text(210, 190, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);
                    //  _this.angle_z_2.fontSize = '13px';

                    _this.angle_x_2 = _this.add.text(60, 30, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);
                    // _this.angle_x_2.fontSize = '13px';

                    _this.angle_y_2 = _this.add.text(250, 30, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);
                    // _this.angle_y_2.fontSize = '13px';

                    _this.side_op_x_2 = _this.add.text(250, 110, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);
                    // _this.side_op_x_2.fontSize = '13px';

                    _this.side_op_y_2 = _this.add.text(100, 110, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);
                    // _this.side_op_y_2.fontSize = '13px';

                    _this.side_op_z_2 = _this.add.text(160, 5, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                    // _this.side_op_z_2.fontSize = '13px';

                    _this.sandwich_2.angle = 225;
                    _this.sandwich_2.x = 220;
                    _this.sandwich_2.y = 200;
                }

                _this.sandwitchGroup_2.addChild(_this.sandwich_2);
                _this.sandwitchGroup_2.addChild(triangle_1);
                _this.sandwitchGroup_2.addChild(_this.angle_z_2);
                _this.sandwitchGroup_2.addChild(_this.angle_x_2);
                _this.sandwitchGroup_2.addChild(_this.angle_y_2);
                _this.sandwitchGroup_2.addChild(_this.side_op_x_2);
                _this.sandwitchGroup_2.addChild(_this.side_op_y_2);
                _this.sandwitchGroup_2.addChild(_this.side_op_z_2);
                _this.box_2.addChild(_this.sandwitchGroup_2);
                _this.angle_z_2.visible = false;
                _this.angle_x_2.visible = false;
                _this.angle_y_2.visible = false;
                _this.side_op_x_2.visible = false;
                _this.side_op_y_2.visible = false;
                _this.side_op_z_2.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_2.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_2.visible = true;
                }

                break;
            case 'waffer':
                // _this.waffer_2 = _this.add.sprite(_this.boxPosition_x[0] + 30, _this.boxPosition_y[0] - 50, 'waffer');

                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.waffer_2 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle//185
                    triangle_1.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    //  triangle_1.x = 170;
                    triangle_1.y = 160;
                    _this.waffer_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(60, 200, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 110, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(130, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(80, 100, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(170, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(210, 50, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.waffer_2 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.waffer_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 140;
                    triangle_1.y = 105;
                    _this.waffer_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(65, 170, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(170, 10, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(260, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(170, 180, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(120, 80, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(230, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.waffer_2 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    triangle_1.scale.setTo(1.2, 1.2);

                    // triangle_1.angle = 160;
                    // triangle_1.x = 400;
                    // triangle_1.y = 130;
                    // _this.waffer_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    triangle_1.x = 200;
                    triangle_1.y = 170;
                    _this.waffer_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(300, 120, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(70, 190, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(120, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(220, 50, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 170, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(90, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.waffer_2 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle 150, 210 
                    triangle_1.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    // triangle_1.angle = 40;
                    // triangle_1.x = 115;
                    // triangle_1.y = -60;

                    //_this.watermelon_2.mask = triangle_1;
                    // Rotate the triangle
                    triangle_1.rotation += 0.855211; // 49
                    triangle_1.x = 250;
                    triangle_1.y = 110;
                    _this.waffer_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(190, 10, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(290, 170, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(60, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(130, 70, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(260, 90, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(190, 180, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.waffer_2 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 33;
                    // triangle_1.x = 80;
                    // triangle_1.y = -60;
                    //_this.watermelon_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 0.349066; // 20
                    triangle_1.x = 200;
                    triangle_1.y = 60;
                    _this.waffer_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(120, 5, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 70, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 180, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(100, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 30, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(200, 160, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else {
                    _this.angle_z_2 = _this.add.text(75, 190, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(200, 10, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(250, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(120, 100, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(180, 190, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(240, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }

                _this.wafferGroup_2.addChild(_this.waffer_2);
                _this.wafferGroup_2.addChild(triangle_1);
                _this.wafferGroup_2.addChild(_this.angle_z_2);
                _this.wafferGroup_2.addChild(_this.angle_x_2);
                _this.wafferGroup_2.addChild(_this.angle_y_2);
                _this.wafferGroup_2.addChild(_this.side_op_x_2);
                _this.wafferGroup_2.addChild(_this.side_op_y_2);
                _this.wafferGroup_2.addChild(_this.side_op_z_2);
                _this.box_2.addChild(_this.wafferGroup_2);
                _this.angle_z_2.visible = false;
                _this.angle_x_2.visible = false;
                _this.angle_y_2.visible = false;
                _this.side_op_x_2.visible = false;
                _this.side_op_y_2.visible = false;
                _this.side_op_z_2.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_2.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_2.visible = true;
                }

                break;
            case 'cheese':

                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.cheese_2 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle//185
                    triangle_1.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    //  triangle_1.x = 170;
                    triangle_1.y = 160;
                    _this.cheese_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(60, 200, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 110, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(130, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(80, 100, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(170, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(210, 50, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.cheese_2 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    triangle_1.scale.setTo(1.2, 1.2);

                    // triangle_1.angle = 160;
                    // triangle_1.x = 400;
                    // triangle_1.y = 130;
                    // _this.cheese_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    triangle_1.x = 200;
                    triangle_1.y = 170;
                    _this.cheese_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(300, 120, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(70, 190, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(120, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(220, 50, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 170, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(90, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.cheese_2 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 33;
                    // triangle_1.x = 80;
                    // triangle_1.y = -60;
                    //_this.watermelon_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 0.349066; // 20
                    triangle_1.x = 200;
                    triangle_1.y = 60;
                    _this.cheese_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(120, 5, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 70, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 180, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(100, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 30, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(200, 160, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.cheese_2 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_2.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle 150, 210 
                    triangle_1.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    // triangle_1.angle = 40;
                    // triangle_1.x = 115;
                    // triangle_1.y = -60;

                    //_this.watermelon_2.mask = triangle_1;
                    // Rotate the triangle
                    triangle_1.rotation += 0.855211; // 49
                    triangle_1.x = 250;
                    triangle_1.y = 110;
                    _this.cheese_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(190, 10, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(290, 170, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(60, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(130, 70, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(260, 90, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(190, 180, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.cheese_2 = _this.add.image(90, 20, 'cheese_full');
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 100 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.cheese_2.mask = triangle_1;


                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 160;
                    triangle_1.y = 110;
                    _this.cheese_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(75, 180, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 160, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(170, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(120, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(190, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(250, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else {
                    _this.cheese_2 = _this.add.sprite(_this.boxPosition_x[0] + 30, _this.boxPosition_y[0] - 30, 'cheeseanim');

                    _this.angle_z_2 = _this.add.text(250, 140, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(80, 195, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 20, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(180, 180, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(210, 70, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(70, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);

                    _this.cheese_2.angle = 160;
                    _this.cheese_2.x = 250;
                    _this.cheese_2.y = 140;
                }


                _this.CheeseGroup_2.addChild(_this.cheese_2);
                _this.CheeseGroup_2.addChild(triangle_1);
                _this.CheeseGroup_2.addChild(_this.angle_z_2);
                _this.CheeseGroup_2.addChild(_this.angle_x_2);
                _this.CheeseGroup_2.addChild(_this.angle_y_2);
                _this.CheeseGroup_2.addChild(_this.side_op_x_2);
                _this.CheeseGroup_2.addChild(_this.side_op_y_2);
                _this.CheeseGroup_2.addChild(_this.side_op_z_2);
                _this.box_2.addChild(_this.CheeseGroup_2);
                _this.angle_z_2.visible = false;
                _this.angle_x_2.visible = false;
                _this.angle_y_2.visible = false;
                _this.side_op_x_2.visible = false;
                _this.side_op_y_2.visible = false;
                _this.side_op_z_2.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_2.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_2.visible = true;
                }

                break;
            case 'pizza':
                // _this.pizza_2 = _this.add.image(_this.boxPosition_x[0] + 50, _this.boxPosition_y[0] - 40, 'pizza');
                // _this.pizza_2.scale.setTo(0.55, 0.55);
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.pizza_2 = _this.add.image(300, 135, 'pizza_full');
                    _this.pizza_2.angle = 160;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    triangle_1.scale.setTo(1.2, 1.2);

                    // triangle_1.angle = 160;
                    // triangle_1.x = 400;
                    // triangle_1.y = 130;
                    // _this.pizza_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    triangle_1.x = 200;
                    triangle_1.y = 170;
                    _this.pizza_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(300, 120, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(70, 190, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(120, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(220, 50, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 170, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(90, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.pizza_2 = _this.add.image(115, 28, 'pizza_full');
                    _this.pizza_2.angle = 20;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((90 * _this.sinA_1) / _this.sinC_1), 98 + ((90 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 33;
                    // triangle_1.x = 80;
                    // triangle_1.y = -60;
                    //_this.watermelon_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 0.349066; // 20
                    triangle_1.x = 200;
                    triangle_1.y = 60;
                    _this.pizza_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(120, 5, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 70, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 180, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(100, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 30, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(200, 160, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.pizza_2 = _this.add.image(108, 200, 'pizza_full');
                    _this.pizza_2.angle = 300;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 100 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.pizza_2.mask = triangle_1;


                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 160;
                    triangle_1.y = 110;
                    _this.pizza_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(75, 180, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 160, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(170, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(120, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(190, 185, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(250, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.pizza_2 = _this.add.image(85, 200, 'pizza_full');
                    _this.pizza_2.angle = 300;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.pizza_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 140;
                    triangle_1.y = 105;
                    _this.pizza_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(65, 170, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(170, 10, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(260, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(170, 180, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(120, 80, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(230, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else {
                    _this.angle_z_2 = _this.add.text(80, 15, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 60, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(110, 190, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(110, 110, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(190, 20, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(220, 130, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                _this.pizzaGroup_2.addChild(_this.pizza_2);
                _this.pizzaGroup_2.addChild(triangle_1);
                _this.pizzaGroup_2.addChild(_this.angle_z_2);
                _this.pizzaGroup_2.addChild(_this.angle_x_2);
                _this.pizzaGroup_2.addChild(_this.angle_y_2);
                _this.pizzaGroup_2.addChild(_this.side_op_x_2);
                _this.pizzaGroup_2.addChild(_this.side_op_y_2);
                _this.pizzaGroup_2.addChild(_this.side_op_z_2);
                _this.box_2.addChild(_this.pizzaGroup_2);
                _this.angle_z_2.visible = false;
                _this.angle_x_2.visible = false;
                _this.angle_y_2.visible = false;
                _this.side_op_x_2.visible = false;
                _this.side_op_y_2.visible = false;
                _this.side_op_z_2.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_2.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_2.visible = true;
                }

                break;
            case 'biscuit':
                // _this.biscuit_2 = _this.add.sprite(_this.boxPosition_x[0] + 20, _this.boxPosition_y[0] - 40, 'biscuits');
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.biscuit_2 = _this.add.image(78, 20, 'biscuit_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - Math.round((150 * _this.sinA_1) / _this.sinC_1), 60 + Math.round((150 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle//185
                    triangle_1.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    //  triangle_1.x = 170;
                    triangle_1.y = 160;
                    _this.biscuit_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(60, 200, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 110, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(130, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(80, 100, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(170, 180, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(210, 50, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);

                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.biscuit_2 = _this.add.image(78, 20, 'biscuit_full');
                    _this.biscuit_2.scale.setTo(1.1, 1.1);
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    triangle_1.scale.setTo(1.2, 1.2);

                    // triangle_1.angle = 160;
                    // triangle_1.x = 400;
                    // triangle_1.y = 130;
                    // _this.biscuit_2.mask = triangle_1;

                    // Rotate the triangle
                    triangle_1.rotation += 2.79253; // 160
                    triangle_1.x = 200;
                    triangle_1.y = 170;
                    _this.biscuit_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(300, 120, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(70, 190, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(120, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(220, 50, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(200, 170, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(90, 90, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.biscuit_2 = _this.add.image(90, 20, 'biscuit_full')
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 100 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(258 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.biscuit_2.mask = triangle_1;


                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 160;
                    triangle_1.y = 110;
                    _this.biscuit_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(75, 180, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 160, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(170, 10, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(120, 90, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(190, 185, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(250, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.biscuit_2 = _this.add.image(90, 20, 'biscuit_full')
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_1 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_1.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_1.lineTo(260 - ((80 * _this.sinA_1) / _this.sinC_1), 95 + ((80 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle
                    triangle_1.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;

                    // triangle_1.angle = 300;
                    // triangle_1.x = 20;
                    // triangle_1.y = 250;
                    // _this.biscuit_2.mask = triangle_1;


                    // Rotate the triangle
                    triangle_1.rotation += 5.23599; // 300
                    triangle_1.x = 140;
                    triangle_1.y = 105;
                    _this.biscuit_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(65, 170, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(170, 10, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(260, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(170, 180, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(120, 80, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(230, 80, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.biscuit_2 = _this.add.image(90, 20, 'biscuit_full')

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_1 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_1 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_1.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_1.beginFill(0x65B4C3); // Set the color of the triangle
                    triangle_1.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_1.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_1.lineTo(275 - ((110 * _this.sinA_1) / _this.sinC_1), 60 + ((110 * _this.sinA_1) / _this.sinC_1)); // Draw the second line of the triangle 150, 210 
                    triangle_1.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_1.endFill();

                    triangle_1.alpha = 0;
                    // triangle_1.angle = 40;
                    // triangle_1.x = 115;
                    // triangle_1.y = -60;

                    //_this.watermelon_2.mask = triangle_1;
                    // Rotate the triangle
                    triangle_1.rotation += 0.855211; // 49
                    triangle_1.x = 250;
                    triangle_1.y = 110;
                    _this.biscuit_2.mask = triangle_1;

                    _this.angle_z_2 = _this.add.text(190, 10, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(290, 170, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(60, 160, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(130, 70, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(260, 90, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(190, 180, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                else {
                    _this.angle_z_2 = _this.add.text(120, 5, _this.angel_z_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_2);

                    _this.angle_x_2 = _this.add.text(280, 150, _this.angel_x_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_2);

                    _this.angle_y_2 = _this.add.text(80, 195, _this.angel_y_op_1 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_2);

                    _this.side_op_x_2 = _this.add.text(90, 100, _this.side_x_op_1);
                    _this.applyingStyle_Orange(_this.side_op_x_2);

                    _this.side_op_y_2 = _this.add.text(230, 80, _this.side_y_op_1);
                    _this.applyingStyle_Orange(_this.side_op_y_2);

                    _this.side_op_z_2 = _this.add.text(180, 180, _this.side_z_op_1);
                    _this.applyingStyle_Orange(_this.side_op_z_2);
                }
                _this.biscuitGroup_2.addChild(_this.biscuit_2);
                _this.biscuitGroup_2.addChild(triangle_1);
                _this.biscuitGroup_2.addChild(_this.angle_z_2);
                _this.biscuitGroup_2.addChild(_this.angle_x_2);
                _this.biscuitGroup_2.addChild(_this.angle_y_2);
                _this.biscuitGroup_2.addChild(_this.side_op_x_2);
                _this.biscuitGroup_2.addChild(_this.side_op_y_2);
                _this.biscuitGroup_2.addChild(_this.side_op_z_2);
                _this.box_2.addChild(_this.biscuitGroup_2);
                _this.angle_z_2.visible = false;
                _this.angle_x_2.visible = false;
                _this.angle_y_2.visible = false;
                _this.side_op_x_2.visible = false;
                _this.side_op_y_2.visible = false;
                _this.side_op_z_2.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_2.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_2.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_2.visible = true;
                }

                break;
        }

        _this.box_2.inputEnabled = true;
        _this.box_2.input.useHandCursor = true;
        _this.box_2.events.onInputDown.add(_this.box_2Clicked, _this);
    },
    thirdOptionSidePart: function () {
        //120 degree orientation
        // console.log("thirdOptionSidePart....");
        if (_this.optionOrder[0] == 3) {
            _this.box_3 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0], 'box');
            _this.box_3.frame = 0;
            _this.box_3.scale.setTo(0.95, 0.95);
        }
        else if (_this.optionOrder[1] == 3) {
            _this.box_3 = _this.add.sprite(_this.boxPosition_x[1], _this.boxPosition_y[1], 'box');
            _this.box_3.frame = 0;
            _this.box_3.scale.setTo(0.95, 0.95);
        }
        else if (_this.optionOrder[2] == 3) {
            _this.box_3 = _this.add.sprite(_this.boxPosition_x[2], _this.boxPosition_y[2], 'box');
            _this.box_3.frame = 0;
            _this.box_3.scale.setTo(0.95, 0.95);
        }
        else {
            console.log(".....");
        }

        switch (_this.optionArray_2[1]) {
            case 'watermelon':

                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.watermelon_3 = _this.add.image(78, 20, 'watermelon_full');

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_3.lineTo(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2)); // Draw the second line of the triangle//185
                    triangle_3.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    // Rotate the triangle
                    triangle_3.rotation += 6.10865; // 350
                    //  triangle_1.x = 170;
                    // triangle_3.y = 160;
                    _this.watermelon_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(270, 10, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(50, 50, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(160, 180, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(250, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(170, 20, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(100, 120, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.watermelon_3 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.174533; // 10
                    //  triangle_3.x = 160;
                    triangle_3.y = 70;
                    _this.watermelon_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(80, 30, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 70, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(140, 195, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(190, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(240, 130, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.watermelon_3 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.261799; // 15
                    // triangle_3.x = 10;
                    triangle_3.y = 70;
                    _this.watermelon_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(100, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(170, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(230, 140, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.watermelon_3 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 145;
                    // triangle_3.x = 380;
                    // triangle_3.y = 80;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 2.53073; // 20
                    triangle_3.x = 200;
                    triangle_3.y = 150;
                    _this.watermelon_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(110, 10, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 100, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(100, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 50, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(210, 160, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.watermelon_3 = _this.add.image(90, 20, 'watermelon_full');//90, 25,//-50(without veggie),-60(with veggie)

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_3.lineTo(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle 150, 210 
                    triangle_3.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // Rotate the triangle
                    triangle_3.rotation += 3.49066; // 200
                    triangle_3.x = 170;
                    triangle_3.y = 150;
                    _this.watermelon_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(70, 90, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(230, 200, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(210, 5, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(150, 40, _this.side_x_op_2);//100, 100
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(140, 160, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 100, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else {
                    // _this.watermelon_2 = _this.add.image(90, 20, 'watermelon_full');

                    // // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // // Create a new graphics object
                    // var triangle = _this.add.graphics(0, 0);

                    // // Draw the triangle on the graphics object
                    // triangle.beginFill(0x65B4C3); // Set the color of the triangle
                    // triangle.moveTo(78, 60); // Set the starting point of the triangle
                    // triangle.lineTo(275, 60); // Draw the first line of the triangle
                    // triangle.lineTo(305 - ((150 * _this.sinA_1) / _this.sinB_1), 185); // Draw the second line of the triangle
                    // triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    // triangle.endFill();

                    // triangle.alpha = 1;

                    // // _this.watermelon_2.mask = triangle;


                    _this.watermelon_3 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'watermelon');
                    _this.angle_z_3 = _this.add.text(75, 20, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(280, 140, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(120, 180, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(220, 80, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(90, 100, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(200, 180, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                    _this.watermelon_3.angle = 40;
                    _this.watermelon_3.x = 120;
                    _this.watermelon_3.y = 30;
                }

                _this.watermelonGroup_3.addChild(_this.watermelon_3);
                _this.watermelonGroup_3.addChild(triangle_3);
                _this.watermelonGroup_3.addChild(_this.angle_z_3);
                _this.watermelonGroup_3.addChild(_this.angle_x_3);
                _this.watermelonGroup_3.addChild(_this.angle_y_3);
                _this.watermelonGroup_3.addChild(_this.side_op_x_3);
                _this.watermelonGroup_3.addChild(_this.side_op_y_3);
                _this.watermelonGroup_3.addChild(_this.side_op_z_3);
                _this.box_3.addChild(_this.watermelonGroup_3);
                _this.angle_z_3.visible = false;
                _this.angle_x_3.visible = false;
                _this.angle_y_3.visible = false;
                _this.side_op_x_3.visible = false;
                _this.side_op_y_3.visible = false;
                _this.side_op_z_3.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_3.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_3.visible = true;
                }

                break;
            case 'sandwich':
                if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.sandwich_3 = _this.add.image(40, 40, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_3.scale.setTo(0.6, 0.6);
                    _this.sandwich_3.angle = 10;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.sandwich_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.174533; // 10
                    //  triangle_3.x = 160;
                    triangle_3.y = 70;
                    _this.sandwich_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(80, 30, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 70, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(140, 195, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(190, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(240, 130, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.sandwich_3 = _this.add.image(30, 20, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_3.scale.setTo(0.6, 0.6);
                    _this.sandwich_3.angle = 15;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.sandwich_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.261799; // 15
                    // triangle_3.x = 10;
                    triangle_3.y = 70;
                    _this.sandwich_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(100, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(170, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(230, 140, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.sandwich_3 = _this.add.image(30, 5, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_3.scale.setTo(0.7, 0.7);
                    _this.sandwich_3.angle = 20;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    triangle_3.scale.setTo(1.2, 1.2);

                    // triangle_3.angle = 350;
                    // triangle_3.x = -40;
                    // triangle_3.y = 70;
                    // _this.sandwich_3.mask = triangle_3;
                    // Rotate the triangle
                    triangle_3.rotation += 0.349066; // 20
                    triangle_3.x = 190;
                    triangle_3.y = 70;
                    _this.sandwich_3.mask = triangle_3;


                    _this.angle_z_3 = _this.add.text(60, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(290, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(200, 200, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(120, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 150, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.sandwich_3 = _this.add.image(340, 60, 'sandwich_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.sandwich_3.scale.setTo(0.6, 0.6);
                    _this.sandwich_3.angle = 145;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 145;
                    // triangle_3.x = 380;
                    // triangle_3.y = 80;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 2.53073; // 145
                    triangle_3.x = 200;
                    triangle_3.y = 150;
                    _this.sandwich_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(110, 10, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 100, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(100, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 50, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(210, 160, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else {
                    _this.sandwich_3 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'sandwichanim');
                    //_this.sandwich_3.scale.setTo(0.6, 0.6);
                    _this.angle_z_3 = _this.add.text(210, 190, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);
                    //_this.angle_z_3.fontSize = '13px';

                    _this.angle_x_3 = _this.add.text(60, 30, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);
                    // _this.angle_x_3.fontSize = '13px';

                    _this.angle_y_3 = _this.add.text(250, 30, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);
                    //  _this.angle_y_3.fontSize = '13px';

                    _this.side_op_x_3 = _this.add.text(250, 110, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);
                    // _this.side_op_x_3.fontSize = '13px';

                    _this.side_op_y_3 = _this.add.text(100, 110, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);
                    // _this.side_op_y_3.fontSize = '13px';

                    _this.side_op_z_3 = _this.add.text(160, 5, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                    // _this.side_op_z_3.fontSize = '13px';

                    _this.sandwich_3.angle = 225;
                    _this.sandwich_3.x = 220;
                    _this.sandwich_3.y = 200;
                }

                _this.sandwitchGroup_3.addChild(_this.sandwich_3);
                _this.sandwitchGroup_3.addChild(triangle_3);
                _this.sandwitchGroup_3.addChild(_this.angle_z_3);
                _this.sandwitchGroup_3.addChild(_this.angle_x_3);
                _this.sandwitchGroup_3.addChild(_this.angle_y_3);
                _this.sandwitchGroup_3.addChild(_this.side_op_x_3);
                _this.sandwitchGroup_3.addChild(_this.side_op_y_3);
                _this.sandwitchGroup_3.addChild(_this.side_op_z_3);
                _this.box_3.addChild(_this.sandwitchGroup_3);
                _this.angle_z_3.visible = false;
                _this.angle_x_3.visible = false;
                _this.angle_y_3.visible = false;
                _this.side_op_x_3.visible = false;
                _this.side_op_y_3.visible = false;
                _this.side_op_z_3.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_3.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_3.visible = true;
                }
                break;
            case 'waffer':
                //_this.waffer_3 = _this.add.sprite(_this.boxPosition_x[0] + 30, _this.boxPosition_y[0] - 50, 'waffer');

                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.waffer_3 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_3.lineTo(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2)); // Draw the second line of the triangle//185
                    triangle_3.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    // Rotate the triangle
                    triangle_3.rotation += 6.10865; // 350
                    //  triangle_1.x = 170;
                    // triangle_3.y = 160;
                    _this.waffer_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(270, 10, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(50, 50, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(160, 180, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(250, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(170, 20, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(100, 120, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.waffer_3 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_3.lineTo(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle 150, 210 
                    triangle_3.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // Rotate the triangle
                    triangle_3.rotation += 3.49066; // 200
                    triangle_3.x = 170;
                    triangle_3.y = 150;
                    _this.waffer_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(70, 90, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(230, 200, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(210, 5, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(150, 40, _this.side_x_op_2);//100, 100
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(140, 160, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 100, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.waffer_3 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //   var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 145;
                    // triangle_3.x = 380;
                    // triangle_3.y = 80;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 2.53073; // 20
                    triangle_3.x = 200;
                    triangle_3.y = 150;
                    _this.waffer_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(110, 10, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 100, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(100, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 50, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(210, 160, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.waffer_3 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.waffer_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.261799; // 15
                    // triangle_3.x = 10;
                    triangle_3.y = 70;
                    _this.waffer_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(100, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(170, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(230, 140, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);


                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.waffer_3 = _this.add.image(70, 20, 'waffer_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.waffer_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    triangle_3.scale.setTo(1.2, 1.2);

                    // triangle_3.angle = 350;
                    // triangle_3.x = -40;
                    // triangle_3.y = 70;
                    // _this.waffer_3.mask = triangle_3;
                    // Rotate the triangle
                    triangle_3.rotation += 0.349066; // 20
                    triangle_3.x = 190;
                    triangle_3.y = 70;
                    _this.waffer_3.mask = triangle_3;


                    _this.angle_z_3 = _this.add.text(60, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(290, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(200, 200, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(120, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 150, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else {
                    _this.angle_z_3 = _this.add.text(75, 190, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(200, 10, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(250, 160, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(180, 190, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(240, 90, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(120, 100, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }

                _this.wafferGroup_3.addChild(_this.waffer_3);
                _this.wafferGroup_3.addChild(triangle_3);
                _this.wafferGroup_3.addChild(_this.angle_z_3);
                _this.wafferGroup_3.addChild(_this.angle_x_3);
                _this.wafferGroup_3.addChild(_this.angle_y_3);
                _this.wafferGroup_3.addChild(_this.side_op_x_3);
                _this.wafferGroup_3.addChild(_this.side_op_y_3);
                _this.wafferGroup_3.addChild(_this.side_op_z_3);
                _this.box_3.addChild(_this.wafferGroup_3);
                _this.angle_z_3.visible = false;
                _this.angle_x_3.visible = false;
                _this.angle_y_3.visible = false;
                _this.side_op_x_3.visible = false;
                _this.side_op_y_3.visible = false;
                _this.side_op_z_3.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_3.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_3.visible = true;
                }
                break;
            case 'cheese':
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.cheese_3 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_3.lineTo(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2)); // Draw the second line of the triangle//185
                    triangle_3.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    // Rotate the triangle
                    triangle_3.rotation += 6.10865; // 350
                    //  triangle_1.x = 170;
                    // triangle_3.y = 160;
                    _this.cheese_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(270, 10, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(50, 50, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(160, 180, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(250, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(170, 20, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(100, 120, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.cheese_3 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    triangle_3.scale.setTo(1.2, 1.2);

                    // triangle_3.angle = 350;
                    // triangle_3.x = -40;
                    // triangle_3.y = 70;
                    // _this.cheese_3.mask = triangle_3;
                    // Rotate the triangle
                    triangle_3.rotation += 0.349066; // 20
                    triangle_3.x = 190;
                    triangle_3.y = 70;
                    _this.cheese_3.mask = triangle_3;


                    _this.angle_z_3 = _this.add.text(60, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(290, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(200, 200, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(120, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 150, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.cheese_3 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_3.scale.setTo(1.1, 1.1);

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 145;
                    // triangle_3.x = 380;
                    // triangle_3.y = 80;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 2.53073; // 20
                    triangle_3.x = 200;
                    triangle_3.y = 150;
                    _this.cheese_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(110, 10, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 100, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(100, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 50, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(210, 160, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.cheese_3 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_3.scale.setTo(1.1, 1.1);
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.cheese_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.174533; // 10
                    //  triangle_3.x = 160;
                    triangle_3.y = 70;
                    _this.cheese_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(80, 30, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 70, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(140, 195, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(190, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(240, 130, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.cheese_3 = _this.add.image(70, 20, 'cheese_full');//90, 25,//-50(without veggie),-60(with veggie)
                    _this.cheese_3.scale.setTo(1.1, 1.1);
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_3.lineTo(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle 150, 210 
                    triangle_3.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // Rotate the triangle
                    triangle_3.rotation += 3.49066; // 200
                    triangle_3.x = 170;
                    triangle_3.y = 150;
                    _this.cheese_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(70, 90, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(230, 200, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(210, 5, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(150, 40, _this.side_x_op_2);//100, 100
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(140, 160, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 100, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else {
                    _this.cheese_3 = _this.add.sprite(_this.boxPosition_x[0] + 30, _this.boxPosition_y[0] - 30, 'cheeseanim');
                    //  _this.cheese_3.scale.setTo(0.6, 0.5);
                    _this.angle_z_3 = _this.add.text(250, 140, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);
                    // _this.angle_z_3.fontSize = '13px';

                    _this.angle_x_3 = _this.add.text(80, 195, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);
                    //_this.angle_x_3.fontSize = '13px';

                    _this.angle_y_3 = _this.add.text(80, 20, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);
                    //_this.angle_y_3.fontSize = '13px';

                    _this.side_op_x_3 = _this.add.text(210, 70, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);
                    // _this.side_op_x_3.fontSize = '13px';

                    _this.side_op_y_3 = _this.add.text(180, 180, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);
                    //_this.side_op_y_3.fontSize = '13px';

                    _this.side_op_z_3 = _this.add.text(70, 90, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                    // _this.side_op_z_3.fontSize = '13px';

                    _this.cheese_3.angle = 160;
                    _this.cheese_3.x = 250;
                    _this.cheese_3.y = 140;
                }

                _this.CheeseGroup_3.addChild(_this.cheese_3);
                _this.CheeseGroup_3.addChild(triangle_3);
                _this.CheeseGroup_3.addChild(_this.angle_z_3);
                _this.CheeseGroup_3.addChild(_this.angle_x_3);
                _this.CheeseGroup_3.addChild(_this.angle_y_3);
                _this.CheeseGroup_3.addChild(_this.side_op_x_3);
                _this.CheeseGroup_3.addChild(_this.side_op_y_3);
                _this.CheeseGroup_3.addChild(_this.side_op_z_3);
                _this.box_3.addChild(_this.CheeseGroup_3);
                _this.angle_z_3.visible = false;
                _this.angle_x_3.visible = false;
                _this.angle_y_3.visible = false;
                _this.side_op_x_3.visible = false;
                _this.side_op_y_3.visible = false;
                _this.side_op_z_3.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_3.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_3.visible = true;
                }
                break;
            case 'pizza':
                // _this.pizza_3 = _this.add.image(_this.boxPosition_x[0] + 50, _this.boxPosition_y[0] - 40, 'pizza');
                // _this.pizza_3.scale.setTo(0.55, 0.55);
                if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.pizza_3 = _this.add.image(100, 38, 'pizza_full');
                    _this.pizza_3.angle = 20;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    triangle_3.scale.setTo(1.2, 1.2);

                    // triangle_3.angle = 350;
                    // triangle_3.x = -40;
                    // triangle_3.y = 70;
                    // _this.pizza_3.mask = triangle_3;
                    // Rotate the triangle
                    triangle_3.rotation += 0.349066; // 20
                    triangle_3.x = 190;
                    triangle_3.y = 70;
                    _this.pizza_3.mask = triangle_3;


                    _this.angle_z_3 = _this.add.text(60, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(290, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(200, 200, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(120, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 150, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'biscuit') {
                    _this.pizza_3 = _this.add.image(290, 88, 'pizza_full');
                    _this.pizza_3.angle = 145;

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //  var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(260 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 145;
                    // triangle_3.x = 380;
                    // triangle_3.y = 80;
                    // _this.watermelon_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 2.53073; // 20
                    triangle_3.x = 200;
                    triangle_3.y = 150;
                    _this.pizza_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(110, 10, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 100, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(100, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 50, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(210, 160, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.pizza_3 = _this.add.image(90, 53, 'pizza_full');
                    _this.pizza_3.angle = 10;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.pizza_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.174533; // 10
                    //  triangle_3.x = 160;
                    triangle_3.y = 70;
                    _this.pizza_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(80, 30, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 70, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(140, 195, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(190, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(240, 130, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.pizza_3 = _this.add.image(90, 43, 'pizza_full');
                    _this.pizza_3.angle = 15;
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.pizza_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.261799; // 15
                    // triangle_3.x = 10;
                    triangle_3.y = 70;
                    _this.pizza_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(100, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(170, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(230, 140, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else {
                    _this.angle_z_3 = _this.add.text(80, 15, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(280, 60, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(110, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(110, 110, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(190, 20, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(220, 130, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }

                _this.pizzaGroup_3.addChild(_this.pizza_3);
                _this.pizzaGroup_3.addChild(triangle_3);
                _this.pizzaGroup_3.addChild(_this.angle_z_3);
                _this.pizzaGroup_3.addChild(_this.angle_x_3);
                _this.pizzaGroup_3.addChild(_this.angle_y_3);
                _this.pizzaGroup_3.addChild(_this.side_op_x_3);
                _this.pizzaGroup_3.addChild(_this.side_op_y_3);
                _this.pizzaGroup_3.addChild(_this.side_op_z_3);
                _this.box_3.addChild(_this.pizzaGroup_3);
                _this.angle_z_3.visible = false;
                _this.angle_x_3.visible = false;
                _this.angle_y_3.visible = false;
                _this.side_op_x_3.visible = false;
                _this.side_op_y_3.visible = false;
                _this.side_op_z_3.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_3.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_3.visible = true;
                }
                break;
            case 'biscuit':
                //_this.biscuit_3 = _this.add.image(_this.boxPosition_x[0] + 20, _this.boxPosition_y[0] - 40, 'biscuits');
                // _this.biscuit_3.scale.setTo(0.5, 0.5);
                if (_this.objectsArray[_this.count1] == 'sandwich') {
                    _this.biscuit_3 = _this.add.image(78, 20, 'biscuit_full');

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(78, 60);
                    var vertexB = new Phaser.Point(275, 60);
                    var vertexC = new Phaser.Point(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(78, 60); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 60); // Draw the first line of the triangle
                    triangle_3.lineTo(275 - Math.round((150 * _this.sinB_2) / _this.sinC_2), 60 + Math.round((150 * _this.sinB_2) / _this.sinC_2)); // Draw the second line of the triangle//185
                    triangle_3.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    // Rotate the triangle
                    triangle_3.rotation += 6.10865; // 350
                    //  triangle_1.x = 170;
                    // triangle_3.y = 160;
                    _this.biscuit_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(270, 10, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(50, 50, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(160, 180, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(250, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(170, 20, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(100, 120, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'watermelon') {
                    _this.biscuit_3 = _this.add.image(78, 20, 'biscuit_full');
                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);

                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................


                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(266 - ((70 * _this.sinA_2) / _this.sinC_2), 106 + ((70 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;
                    triangle_3.scale.setTo(1.2, 1.2);

                    // triangle_3.angle = 350;
                    // triangle_3.x = -40;
                    // triangle_3.y = 70;
                    // _this.biscuit_3.mask = triangle_3;
                    // Rotate the triangle
                    triangle_3.rotation += 0.349066; // 20
                    triangle_3.x = 190;
                    triangle_3.y = 70;
                    _this.biscuit_3.mask = triangle_3;


                    _this.angle_z_3 = _this.add.text(60, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(290, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(200, 200, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(120, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 150, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else if (_this.objectsArray[_this.count1] == 'waffer') {
                    _this.biscuit_3 = _this.add.image(78, 20, 'biscuit_full');

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 98 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.biscuit_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.174533; // 10
                    //  triangle_3.x = 160;
                    triangle_3.y = 70;
                    _this.biscuit_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(80, 30, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 70, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(140, 195, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 120, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(190, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(240, 130, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'cheese') {
                    _this.biscuit_3 = _this.add.image(78, 20, 'biscuit_full');

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    //var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(110, 40);
                    var vertexB = new Phaser.Point(260, 40);
                    var vertexC = new Phaser.Point(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(110, 40); // Set the starting point of the triangle
                    triangle_3.lineTo(260, 40); // Draw the first line of the triangle
                    triangle_3.lineTo(268 - ((80 * _this.sinA_2) / _this.sinC_2), 99 + ((80 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle
                    triangle_3.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // triangle_3.angle = 30;
                    // triangle_3.x = 50;
                    // triangle_3.y = -50;
                    // _this.biscuit_3.mask = triangle_3;

                    // Rotate the triangle
                    triangle_3.rotation += 0.261799; // 15
                    // triangle_3.x = 10;
                    triangle_3.y = 70;
                    _this.biscuit_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(100, 20, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(270, 80, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(170, 190, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(100, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(200, 40, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(230, 140, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);

                }
                else if (_this.objectsArray[_this.count1] == 'pizza') {
                    _this.biscuit_3 = _this.add.image(78, 20, 'biscuit_full');

                    // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                    // Create a new graphics object
                    // var triangle_3 = _this.add.graphics(0, 0);
                    //................
                    // Define the triangle vertices
                    var vertexA = new Phaser.Point(125, 25);
                    var vertexB = new Phaser.Point(275, 70);
                    var vertexC = new Phaser.Point(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2));

                    // Calculate the midpoints of the triangle sides
                    var midAB = new Phaser.Point((vertexA.x + vertexB.x) / 2, (vertexA.y + vertexB.y) / 2);
                    var midBC = new Phaser.Point((vertexB.x + vertexC.x) / 2, (vertexB.y + vertexC.y) / 2);
                    var midCA = new Phaser.Point((vertexC.x + vertexA.x) / 2, (vertexC.y + vertexA.y) / 2);

                    // Calculate the slopes of the triangle sides
                    var slopeAB = (vertexB.y - vertexA.y) / (vertexB.x - vertexA.x);
                    var slopeBC = (vertexC.y - vertexB.y) / (vertexC.x - vertexB.x);

                    // Check if the slopes are parallel (vertical lines)
                    if (slopeAB === slopeBC) {
                        console.log("The triangle vertices are collinear. Circumcenter cannot be calculated.");
                    } else {
                        // Calculate the x-coordinate of the circumcenter
                        var circumcenterX = (midCA.y - midAB.y + slopeAB * midAB.x - slopeBC * midCA.x) / (slopeAB - slopeBC);

                        // Calculate the y-coordinate of the circumcenter
                        var circumcenterY = midAB.y - slopeAB * (circumcenterX - midAB.x);

                        console.log("Circumcenter: (" + circumcenterX + ", " + circumcenterY + ")");
                    }
                    //................
                    // Create a new graphics object
                    var triangle_3 = _this.add.graphics(circumcenterX, circumcenterY);

                    triangle_3.pivot.setTo(circumcenterX, circumcenterY); //................

                    // Draw the triangle on the graphics object
                    triangle_3.beginFill(0x65B4C3);// Set the color of the triangle
                    triangle_3.moveTo(125, 25); // Set the starting point of the triangle
                    triangle_3.lineTo(275, 70); // Draw the first line of the triangle
                    triangle_3.lineTo(282 - ((110 * _this.sinA_2) / _this.sinC_2), 77 + ((110 * _this.sinA_2) / _this.sinC_2)); // Draw the second line of the triangle 150, 210 
                    triangle_3.lineTo(125, 25); // Draw the third line of the triangle to close the shape
                    triangle_3.endFill();

                    triangle_3.alpha = 0;

                    // Rotate the triangle
                    triangle_3.rotation += 3.49066; // 200
                    triangle_3.x = 170;
                    triangle_3.y = 150;
                    _this.biscuit_3.mask = triangle_3;

                    _this.angle_z_3 = _this.add.text(70, 90, _this.angel_z_op_2 + "\u{00B0}");//70, 190
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(230, 200, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(210, 5, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(150, 40, _this.side_x_op_2);//100, 100
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(140, 160, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(250, 100, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }
                else {
                    _this.angle_z_3 = _this.add.text(120, 5, _this.angel_z_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_z_3);

                    _this.angle_x_3 = _this.add.text(280, 150, _this.angel_x_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_x_3);

                    _this.angle_y_3 = _this.add.text(80, 195, _this.angel_y_op_2 + "\u{00B0}");
                    _this.applyingStyle_Orange(_this.angle_y_3);

                    _this.side_op_x_3 = _this.add.text(90, 100, _this.side_x_op_2);
                    _this.applyingStyle_Orange(_this.side_op_x_3);

                    _this.side_op_y_3 = _this.add.text(230, 80, _this.side_y_op_2);
                    _this.applyingStyle_Orange(_this.side_op_y_3);

                    _this.side_op_z_3 = _this.add.text(180, 180, _this.side_z_op_2);
                    _this.applyingStyle_Orange(_this.side_op_z_3);
                }

                _this.biscuitGroup_3.addChild(_this.biscuit_3);
                _this.biscuitGroup_3.addChild(triangle_3);
                _this.biscuitGroup_3.addChild(_this.angle_z_3);
                _this.biscuitGroup_3.addChild(_this.angle_x_3);
                _this.biscuitGroup_3.addChild(_this.angle_y_3);
                _this.biscuitGroup_3.addChild(_this.side_op_x_3);
                _this.biscuitGroup_3.addChild(_this.side_op_y_3);
                _this.biscuitGroup_3.addChild(_this.side_op_z_3);
                _this.box_3.addChild(_this.biscuitGroup_3);
                _this.angle_z_3.visible = false;
                _this.angle_x_3.visible = false;
                _this.angle_y_3.visible = false;
                _this.side_op_x_3.visible = false;
                _this.side_op_y_3.visible = false;
                _this.side_op_z_3.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_3.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_3.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_3.visible = true;
                }
                break;
        }

        _this.box_3.inputEnabled = true;
        _this.box_3.input.useHandCursor = true;
        _this.box_3.events.onInputDown.add(_this.box_3Clicked, _this);
    },

    //the actual screen. question part will show here.
    forthOptionSidePart: function () {
        // console.log("forthOptionSidePart....");
        _this.box_4 = _this.add.sprite(465, 300, 'box');//white screen
        _this.box_4.frame = 1;
        _this.box_4.scale.setTo(0.95, 0.95);
        // _this.box_4.scale.setTo(2.4, 1.4);

        switch (_this.objectsArray[_this.count1]) {
            case 'watermelon':
                _this.watermelon_4 = _this.add.image(70, 20, 'watermelon_full');
                _this.watermelon_4.scale.setTo(1.2, 1.2);

                // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                // Create a new graphics object
                var triangle = _this.add.graphics(0, 0);


                // Draw the triangle on the graphics object
                triangle.beginFill(0x65B4C3); // Set the color of the triangle
                triangle.moveTo(78, 60); // Set the starting point of the triangle
                triangle.lineTo(275, 60); // Draw the first line of the triangle
                triangle.lineTo(315 - ((150 * _this.sinA) / _this.sinB), 95 + ((150 * _this.sinA) / _this.sinB)); // Draw the second line of the triangle
                triangle.lineTo(78, 60); // Draw the third line of the triangle to close the shape
                triangle.endFill();

                triangle.alpha = 0;

                _this.watermelon_4.mask = triangle;


                _this.angle_z_4 = _this.add.text(50, 35, _this.object_Angle_z + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_z_4);

                _this.angle_x_4 = _this.add.text(280, 40, _this.object_Angle_x + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_x_4);

                _this.angle_y_4 = _this.add.text(165, 200, _this.object_Angle_y + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_y_4);

                _this.side_op_x_4 = _this.add.text(110, 130, _this.side_1);
                _this.applyingStyle_Orange(_this.side_op_x_4);

                _this.side_op_y_4 = _this.add.text(180, 30, _this.side_2);
                _this.applyingStyle_Orange(_this.side_op_y_4);

                _this.side_op_z_4 = _this.add.text(250, 130, _this.side_3);
                _this.applyingStyle_Orange(_this.side_op_z_4);

                _this.watermelonGroup_4.addChild(_this.watermelon_4);
                _this.watermelonGroup_4.addChild(triangle);
                _this.watermelonGroup_4.addChild(_this.angle_z_4);
                _this.watermelonGroup_4.addChild(_this.angle_x_4);
                _this.watermelonGroup_4.addChild(_this.angle_y_4);
                _this.watermelonGroup_4.addChild(_this.side_op_x_4);
                _this.watermelonGroup_4.addChild(_this.side_op_y_4);
                _this.watermelonGroup_4.addChild(_this.side_op_z_4);
                _this.box_4.addChild(_this.watermelonGroup_4);
                _this.angle_z_4.visible = false;
                _this.angle_x_4.visible = false;
                _this.angle_y_4.visible = false;
                _this.side_op_x_4.visible = false;
                _this.side_op_y_4.visible = false;
                _this.side_op_z_4.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_4.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_4.visible = true;
                }


                break;
            case 'sandwich':
                _this.sandwich_4 = _this.add.sprite(_this.boxPosition_x[0], _this.boxPosition_y[0] - 10, 'sandwichanim');
                _this.angle_z_4 = _this.add.text(40, 50, _this.object_Angle_z + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_z_4);

                _this.angle_x_4 = _this.add.text(280, 50, _this.object_Angle_x + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_x_4);

                _this.angle_y_4 = _this.add.text(160, 190, _this.object_Angle_y + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_y_4);

                _this.side_op_x_4 = _this.add.text(90, 130, _this.side_1);
                _this.applyingStyle_Orange(_this.side_op_x_4);

                _this.side_op_y_4 = _this.add.text(170, 30, _this.side_2);
                _this.applyingStyle_Orange(_this.side_op_y_4);

                _this.side_op_z_4 = _this.add.text(250, 130, _this.side_3);
                _this.applyingStyle_Orange(_this.side_op_z_4);

                _this.sandwitchGroup_4.addChild(_this.sandwich_4);
                _this.sandwitchGroup_4.addChild(_this.angle_z_4);
                _this.sandwitchGroup_4.addChild(_this.angle_x_4);
                _this.sandwitchGroup_4.addChild(_this.angle_y_4);
                _this.sandwitchGroup_4.addChild(_this.side_op_x_4);
                _this.sandwitchGroup_4.addChild(_this.side_op_y_4);
                _this.sandwitchGroup_4.addChild(_this.side_op_z_4);
                _this.box_4.addChild(_this.sandwitchGroup_4);
                _this.angle_z_4.visible = false;
                _this.angle_x_4.visible = false;
                _this.angle_y_4.visible = false;
                _this.side_op_x_4.visible = false;
                _this.side_op_y_4.visible = false;
                _this.side_op_z_4.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_4.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_4.visible = true;
                }


                break;
            case 'waffer':
                _this.waffer_4 = _this.add.sprite(90, 20, 'waffer_full');
                // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                // Create a new graphics object
                var triangle = _this.add.graphics(0, 0);

                // Draw the triangle on the graphics object
                triangle.beginFill(0x65B4C3); // Set the color of the triangle
                triangle.moveTo(110, 40); // Set the starting point of the triangle
                triangle.lineTo(260, 40); // Draw the first line of the triangle
                triangle.lineTo(268 - ((80 * _this.sinA) / _this.sinB), 178); // Draw the second line of the triangle
                triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                triangle.endFill();

                triangle.alpha = 0;

                _this.waffer_4.mask = triangle;

                _this.angle_z_4 = _this.add.text(70, 25, _this.object_Angle_z + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_z_4);

                _this.angle_x_4 = _this.add.text(270, 25, _this.object_Angle_x + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_x_4);

                _this.angle_y_4 = _this.add.text(180, 180, _this.object_Angle_y + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_y_4);

                _this.side_op_x_4 = _this.add.text(120, 110, _this.side_1);
                _this.applyingStyle_Orange(_this.side_op_x_4);

                _this.side_op_y_4 = _this.add.text(180, 10, _this.side_2);
                _this.applyingStyle_Orange(_this.side_op_y_4);

                _this.side_op_z_4 = _this.add.text(240, 110, _this.side_3);
                _this.applyingStyle_Orange(_this.side_op_z_4);

                _this.wafferGroup_4.addChild(_this.waffer_4);
                _this.wafferGroup_4.addChild(triangle);
                _this.wafferGroup_4.addChild(_this.angle_z_4);
                _this.wafferGroup_4.addChild(_this.angle_x_4);
                _this.wafferGroup_4.addChild(_this.angle_y_4);
                _this.wafferGroup_4.addChild(_this.side_op_x_4);
                _this.wafferGroup_4.addChild(_this.side_op_y_4);
                _this.wafferGroup_4.addChild(_this.side_op_z_4);
                _this.box_4.addChild(_this.wafferGroup_4);
                _this.angle_z_4.visible = false;
                _this.angle_x_4.visible = false;
                _this.angle_y_4.visible = false;
                _this.side_op_x_4.visible = false;
                _this.side_op_y_4.visible = false;
                _this.side_op_z_4.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_4.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_4.visible = true;
                }

                break;
            case 'cheese':
                _this.cheese_4 = _this.add.sprite(90, 20, 'cheese_full');
                // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                // Create a new graphics object
                var triangle = _this.add.graphics(0, 0);

                // Draw the triangle on the graphics object
                triangle.beginFill(0x65B4C3); // Set the color of the triangle
                triangle.moveTo(110, 40); // Set the starting point of the triangle
                triangle.lineTo(266, 40); // Draw the first line of the triangle
                triangle.lineTo(280 - ((80 * _this.sinA) / _this.sinB), 175); // Draw the second line of the triangle
                triangle.lineTo(110, 40); // Draw the third line of the triangle to close the shape
                triangle.endFill();

                triangle.alpha = 0;

                _this.cheese_4.mask = triangle;

                _this.angle_z_4 = _this.add.text(70, 25, _this.object_Angle_z + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_z_4);

                _this.angle_x_4 = _this.add.text(280, 25, _this.object_Angle_x + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_x_4);

                _this.angle_y_4 = _this.add.text(190, 180, _this.object_Angle_y + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_y_4);

                _this.side_op_x_4 = _this.add.text(130, 110, _this.side_1);
                _this.applyingStyle_Orange(_this.side_op_x_4);

                _this.side_op_y_4 = _this.add.text(180, 10, _this.side_2);
                _this.applyingStyle_Orange(_this.side_op_y_4);

                _this.side_op_z_4 = _this.add.text(250, 100, _this.side_3);
                _this.applyingStyle_Orange(_this.side_op_z_4);

                _this.CheeseGroup_4.addChild(_this.cheese_4);
                _this.CheeseGroup_4.addChild(triangle);
                _this.CheeseGroup_4.addChild(_this.angle_z_4);
                _this.CheeseGroup_4.addChild(_this.angle_x_4);
                _this.CheeseGroup_4.addChild(_this.angle_y_4);
                _this.CheeseGroup_4.addChild(_this.side_op_x_4);
                _this.CheeseGroup_4.addChild(_this.side_op_y_4);
                _this.CheeseGroup_4.addChild(_this.side_op_z_4);
                _this.box_4.addChild(_this.CheeseGroup_4);
                _this.angle_z_4.visible = false;
                _this.angle_x_4.visible = false;
                _this.angle_y_4.visible = false;
                _this.side_op_x_4.visible = false;
                _this.side_op_y_4.visible = false;
                _this.side_op_z_4.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_4.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_4.visible = true;
                }

                break;
            case 'pizza':
                _this.pizza_4 = _this.add.image(_this.boxPosition_x[0] + 50, _this.boxPosition_y[0] - 40, 'pizza');
                _this.pizza_4.scale.setTo(0.55, 0.55);

                _this.angle_z_4 = _this.add.text(80, 15, _this.object_Angle_z + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_z_4);

                _this.angle_x_4 = _this.add.text(280, 60, _this.object_Angle_x + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_x_4);

                _this.angle_y_4 = _this.add.text(110, 190, _this.object_Angle_y + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_y_4);

                _this.side_op_x_4 = _this.add.text(110, 110, _this.side_1);
                _this.applyingStyle_Orange(_this.side_op_x_4);

                _this.side_op_y_4 = _this.add.text(190, 20, _this.side_2);
                _this.applyingStyle_Orange(_this.side_op_y_4);

                _this.side_op_z_4 = _this.add.text(220, 130, _this.side_3);
                _this.applyingStyle_Orange(_this.side_op_z_4);

                _this.pizzaGroup_4.addChild(_this.pizza_4);
                _this.pizzaGroup_4.addChild(_this.angle_z_4);
                _this.pizzaGroup_4.addChild(_this.angle_x_4);
                _this.pizzaGroup_4.addChild(_this.angle_y_4);
                _this.pizzaGroup_4.addChild(_this.side_op_x_4);
                _this.pizzaGroup_4.addChild(_this.side_op_y_4);
                _this.pizzaGroup_4.addChild(_this.side_op_z_4);
                _this.box_4.addChild(_this.pizzaGroup_4);

                _this.angle_z_4.visible = false;
                _this.angle_x_4.visible = false;
                _this.angle_y_4.visible = false;
                _this.side_op_x_4.visible = false;
                _this.side_op_y_4.visible = false;
                _this.side_op_z_4.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_4.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_4.visible = true;
                }

                break;
            case 'biscuit':
                _this.biscuit_4 = _this.add.image(_this.boxPosition_x[0] + 20, _this.boxPosition_y[0] - 30, 'biscuits');
                // for masking the sandwitch pease we draw a traingle and that is used for masking the object.
                // Create a new graphics object
                var triangle = _this.add.graphics(0, 0);

                // Draw the triangle on the graphics object
                triangle.beginFill(0x65B4C3); // Set the color of the triangle
                triangle.moveTo(615, 340); // Set the starting point of the triangle
                triangle.lineTo(810 - ((250 * _this.sinA) / _this.sinB), 480); // Draw the first line of the triangle//376 + ((200 * _this.sinA) / _this.sinB)//430 + ((272 * _this.sinC) / _this.sinB), 300
                triangle.lineTo(720, 460); // Draw the second line of the triangle
                triangle.lineTo(615, 340); // Draw the third line of the triangle to close the shape
                triangle.endFill();

                triangle.alpha = 0;
                _this.biscuit_4.mask = triangle;

                _this.angle_z_4 = _this.add.text(130, 15, _this.object_Angle_z + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_z_4);

                _this.angle_x_4 = _this.add.text(275, 160, _this.object_Angle_x + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_x_4);

                _this.angle_y_4 = _this.add.text(65, 170, _this.object_Angle_y + "\u{00B0}");
                _this.applyingStyle_Orange(_this.angle_y_4);

                _this.side_op_x_4 = _this.add.text(100, 80, _this.side_1);
                _this.applyingStyle_Orange(_this.side_op_x_4);

                _this.side_op_y_4 = _this.add.text(220, 80, _this.side_2);
                _this.applyingStyle_Orange(_this.side_op_y_4);

                _this.side_op_z_4 = _this.add.text(180, 180, _this.side_3);
                _this.applyingStyle_Orange(_this.side_op_z_4);

                _this.biscuitGroup_4.addChild(_this.biscuit_4);
                //  _this.biscuitGroup_4.addChild(triangle);
                _this.biscuitGroup_4.addChild(_this.angle_z_4);
                _this.biscuitGroup_4.addChild(_this.angle_x_4);
                _this.biscuitGroup_4.addChild(_this.angle_y_4);
                _this.biscuitGroup_4.addChild(_this.side_op_x_4);
                _this.biscuitGroup_4.addChild(_this.side_op_y_4);
                _this.biscuitGroup_4.addChild(_this.side_op_z_4);
                _this.box_4.addChild(_this.biscuitGroup_4);
                _this.angle_z_4.visible = false;
                _this.angle_x_4.visible = false;
                _this.angle_y_4.visible = false;
                _this.side_op_x_4.visible = false;
                _this.side_op_y_4.visible = false;
                _this.side_op_z_4.visible = false;

                if (_this.findingCongarence[0] == '1' || _this.findingCongarence[1] == '1' || _this.findingCongarence[2] == '1') {
                    _this.angle_z_4.visible = true;
                }
                if (_this.findingCongarence[0] == '2' || _this.findingCongarence[1] == '2' || _this.findingCongarence[2] == '2') {
                    _this.angle_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == '3' || _this.findingCongarence[1] == '3' || _this.findingCongarence[2] == '3') {
                    _this.angle_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'x' || _this.findingCongarence[1] == 'x' || _this.findingCongarence[2] == 'x') {
                    _this.side_op_x_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'y' || _this.findingCongarence[1] == 'y' || _this.findingCongarence[2] == 'y') {
                    _this.side_op_y_4.visible = true;
                }
                if (_this.findingCongarence[0] == 'z' || _this.findingCongarence[1] == 'z' || _this.findingCongarence[2] == 'z') {
                    _this.side_op_z_4.visible = true;
                }

                break;
        }


    },

    //option validation will do here
    tickValidation_partA: function () {
        if (_this.box_1.frame == 2) {
            _this.lastScreenCelebration();
            _this.tick.inputEnabled = false;
            _this.tick.input.useHandCursor = false;
            _this.box_1.inputEnabled = false;
            _this.box_1.input.useHandCursor = false;
            _this.box_2.inputEnabled = false;
            _this.box_2.input.useHandCursor = false;
            _this.box_3.inputEnabled = false;
            _this.box_3.input.useHandCursor = false;
        }
        else {
            _this.noofAttempts++;
            _this.wrongSound.play();
            _this.boxgrp = _this.add.group();
            _this.boxgrp.addChild(_this.box_1)
            _this.boxgrp.addChild(_this.box_2)
            _this.boxgrp.addChild(_this.box_3)
            _this.shake.shake(10, _this.boxgrp);
            _this.box_1.frame = 0;
            _this.box_2.frame = 0;
            _this.box_3.frame = 0;
        }
    },

    addNumberPad: function () {

        _this.objGroup = _this.add.group();
        _this.numGroup = _this.add.group();

        var bottomnumpadbg = _this.numGroup.create(0, 515, 'numpadbg');
        //bottomnumpadbg.anchor.setTo(0.5);
        bottomnumpadbg.scale.setTo(1, 1);

        // bottomnumpadbg.name = "numpadbg";

        _this.x = 44;
        // set the number pad invisible initially. only after tweening it is made visible
        _this.numGroup.visible = false;

        for (var i = 0; i <= 10; i++) {
            _this.numbg = _this.numGroup.create(_this.x, 552, 'Numberpad');
            _this.numbg.anchor.setTo(0.5);
            // _this.numbg.scale.setTo(0.9);
            _this.numbg.name = i + 1;
            _this.numbg.frame = i;

            _this.numbg.inputEnabled = true;
            _this.numbg.input.useHandCursor = true;
            _this.numbg.events.onInputDown.add(_this.numClicked, _this);

            _this.x += 58;
        }

        _this.wrongbtn = _this.numGroup.create(845, 552, 'Numberpad');
        _this.wrongbtn.frame = 11;
        _this.wrongbtn.anchor.setTo(0.5);
        // _this.wrongbtn.scale.setTo(0.8, 0.8);
        _this.wrongbtn.name = "wrongbtn";
        _this.wrongbtn.inputEnabled = true;
        _this.wrongbtn.input.useHandCursor = true;
        _this.wrongbtn.events.onInputDown.add(_this.wrongbtnClicked, _this);

        _this.rightbtn = _this.numGroup.create(915, 552, 'Numberpad');
        _this.rightbtn.frame = 12;
        _this.rightbtn.anchor.setTo(0.5);
        // _this.rightbtn.scale.setTo(0.8, 0.8);
        _this.rightbtn.name = "rightbtn";
        _this.rightbtn.inputEnabled = true;
        _this.rightbtn.input.useHandCursor = true;
        _this.rightbtn.events.onInputDown.add(_this.rightbtnClicked, _this);

        _this.AnswerBox = _this.numGroup.create(738, 552, 'Text box_2');
        _this.AnswerBox.anchor.setTo(0.5)

        _this.enterTxt = _this.add.text(8, 8, "");
        _this.enterTxt.anchor.setTo(0.5);
        _this.enterTxt.align = 'center';
        _this.enterTxt.font = "Akzidenz-Grotesk BQ";
        _this.enterTxt.fontSize = "30px";
        _this.enterTxt.fontWeight = 'normal';
        _this.enterTxt.fill = '#65B4C3';

        //_this.objGroup.add(_this.ScreenTextBox);
        _this.numpadTween = _this.add.tween(_this.numGroup);


        //_this.ScreenTextTween = _this.add.tween(_this.ScreenTextBox);

        //tween in the number pad after a second.
        //_this.time.events.add(100, _this.tweenNumPad);
        _this.tweenNumPad();

        //after 2 seconds, show the screen text box as enabled
        //_this.time.events.add(2000, _this.enableScreenText);

    },

    numClicked: function (target) {
        _this.clickSound.play();
        var_selectedAns1 = " "
        var_selectedAns2 = " "
        var_selectedAns3 = " "
        if (target.name == 10) {
            target.name = '0'
        }

        if (target.name == 11 && _this.dotselected == true) {
            return
        }

        else if (target.name == 11 && _this.dotselected == false) {
            target.name = "."
            _this.dotselected = true;
        }

        if (_this.selectedAns1 === '') {
            _this.selectedAns1 = target.name;
            var_selectedAns1 = _this.selectedAns1;

        }
        else if (_this.selectedAns2 === '') {

            _this.selectedAns2 = target.name;
            var_selectedAns1 = _this.selectedAns1;
            var_selectedAns2 = _this.selectedAns2;


        }
        else if (_this.selectedAns3 === '') {

            _this.selectedAns3 = target.name;
            var_selectedAns1 = _this.selectedAns1;
            var_selectedAns2 = _this.selectedAns2;
            var_selectedAns3 = _this.selectedAns3;

        }
        if (_this.fouransLen != 5) {//4
            if (_this.fouransLen == 4 && _this.dotselected == false)//3
                return;
            _this.finalval += ''
            _this.finalval += target.name;
            if (target.name == '.')
                target.name = 11;
            _this.fouransLen += 1;
        }

        if (target.name == '0')
            target.name = 10;

        if (target.name == '.')
            target.name = 11;

        if (_this.fourNotEntered == false) {

            {
                _this.enterTxt.visible = false;
                _this.AnswerBox.removeChild(_this.enterTxt);

                if ((_this.fouransLen == 1))

                    _this.enterTxt = _this.add.text(-10, -20, "" + _this.finalval, { fontSize: '20px' });
                else if (_this.fouransLen == 2)

                    _this.enterTxt = _this.add.text(-14, -20, "" + _this.finalval, { fontSize: '20px' });
                else if (_this.fouransLen == 3)

                    _this.enterTxt = _this.add.text(-19, -20, "" + _this.finalval, { fontSize: '20px' });
                else if (_this.fouransLen == 4)

                    _this.enterTxt = _this.add.text(-27, -20, "" + _this.finalval, { fontSize: '20px' });

                else {
                    _this.enterTxt = _this.add.text(-40, -20, "" + _this.finalval, { fontSize: '20px' });
                    _this.fourNotEntered = true;
                }
                _this.enterTxt.scale.setTo(1.5)
                _this.applyingStyle(_this.enterTxt);
                _this.AnswerBox.addChild(_this.enterTxt);
                _this.AnswerBox.name = ('' + _this.finalval);
            }
        }

    },
    wrongbtnClicked: function (target) {
        _this.clickSound.play();
        _this.disableInputs();
    },
    wrongAnsClicked: function () {
        _this.wrongans.play();
        _this.disableInputs();
    },
    disableInputs: function () {
        if (_this.enterTxt)
            _this.enterTxt.destroy();
        _this.AnswerBox.name = ""
        _this.fourNotEntered = false;
        _this.fouransLen = 0;
        _this.finalval = '';
        _this.dotselected = false;
    },

    tweenNumPad: function () {
        _this.numGroup.visible = true;
        _this.numpadTween.to({ x: 0, y: -43 }, 1000, 'Linear', true, 0);

    },

    //part b validation will do here.
    rightbtnClicked: function () {

        if (_this.objectsArray[_this.count1] == 'sandwich') {
            if (_this.one_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_z) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_z = _this.add.text(522, 186, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_z);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.two_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_x) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_x = _this.add.text(832, 186, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_x);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.three_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_y) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_y = _this.add.text(682, 366, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_y);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.x_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_1) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.side_x_1 = _this.add.text(573, 285, _this.side_1);
                    _this.applyingStyle_blue(_this.side_x_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_x += 1;
                    if (_this.wrong_flag_x == 3) {
                        _this.graphics_x.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_x.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.y_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_2) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.side_y_1 = _this.add.text(683, 154, _this.side_2);
                    _this.applyingStyle_blue(_this.side_y_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_y += 1;
                    if (_this.wrong_flag_y == 3) {
                        _this.graphics_y.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_y.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.z_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_3) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.side_z_1 = _this.add.text(782, 284, _this.side_3);
                    _this.applyingStyle_blue(_this.side_z_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_z += 1;
                    if (_this.wrong_flag_z == 3) {
                        _this.graphics_z.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_z.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.anim_flag == 3) {
                _this.time.events.add(800, () => {
                    // console.log("animation...");
                    _this.sandwichAnim();
                });
            }
        }

        else if (_this.objectsArray[_this.count1] == 'waffer') {
            if (_this.one_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_z) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_z = _this.add.text(517, 146, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_z);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.two_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_x) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_x = _this.add.text(807, 146, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_x);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.three_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_y) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_y = _this.add.text(675, 395, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_y);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.x_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_1) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.side_x_1 = _this.add.text(572, 275, _this.side_1);
                    _this.applyingStyle_blue(_this.side_x_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_x += 1;
                    if (_this.wrong_flag_x == 3) {
                        _this.graphics_x.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_x.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.y_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_2) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.side_y_1 = _this.add.text(663, 119, _this.side_2);
                    _this.applyingStyle_blue(_this.side_y_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_y += 1;
                    if (_this.wrong_flag_y == 3) {
                        _this.graphics_y.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_y.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.z_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_3) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.side_z_1 = _this.add.text(782, 265, _this.side_3);
                    _this.applyingStyle_blue(_this.side_z_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_z += 1;
                    if (_this.wrong_flag_z == 3) {
                        _this.graphics_z.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_z.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.anim_flag == 3) {
                _this.time.events.add(800, () => {
                    // console.log("animation...");
                    _this.waffer_Anim();
                });
            }
        }

        else if (_this.objectsArray[_this.count1] == 'cheese') {
            if (_this.one_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_z) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_z = _this.add.text(527, 146, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_z);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.two_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_x) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_x = _this.add.text(797, 146, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_x);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.three_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_y) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_y = _this.add.text(712, 386, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_y);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.x_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_1) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.side_x_1 = _this.add.text(602, 255, _this.side_1);
                    _this.applyingStyle_blue(_this.side_x_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_x += 1;
                    if (_this.wrong_flag_x == 3) {
                        _this.graphics_x.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_x.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.y_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_2) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.side_y_1 = _this.add.text(683, 129, _this.side_2);
                    _this.applyingStyle_blue(_this.side_y_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_y += 1;
                    if (_this.wrong_flag_y == 3) {
                        _this.graphics_y.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_y.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.z_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_3) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.side_z_1 = _this.add.text(762, 254, _this.side_3);
                    _this.applyingStyle_blue(_this.side_z_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_z += 1;
                    if (_this.wrong_flag_z == 3) {
                        _this.graphics_z.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_z.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.anim_flag == 3) {
                _this.time.events.add(800, () => {
                    // console.log("animation...");
                    _this.cheese_Anim();
                });
            }
        }

        else if (_this.objectsArray[_this.count1] == 'pizza') {
            if (_this.one_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_z) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_z = _this.add.text(552, 116, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_z);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.two_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_x) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_x = _this.add.text(812, 186, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_x);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.three_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_y) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_y = _this.add.text(612, 401, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_y);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.x_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_1) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.side_x_1 = _this.add.text(562, 254, _this.side_1);
                    _this.applyingStyle_blue(_this.side_x_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_x += 1;
                    if (_this.wrong_flag_x == 3) {
                        _this.graphics_x.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_x.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.y_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_2) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.side_y_1 = _this.add.text(693, 123, _this.side_2);
                    _this.applyingStyle_blue(_this.side_y_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_y += 1;
                    if (_this.wrong_flag_y == 3) {
                        _this.graphics_y.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_y.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.z_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_3) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.side_z_1 = _this.add.text(742, 284, _this.side_3);
                    _this.applyingStyle_blue(_this.side_z_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_z += 1;
                    if (_this.wrong_flag_z == 3) {
                        _this.graphics_z.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_z.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.anim_flag == 3) {
                _this.time.events.add(800, () => {
                    // console.log("animation...");
                    _this.pizza_Anim();
                });
            }
        }

        else if (_this.objectsArray[_this.count1] == 'biscuit') {
            if (_this.one_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_z) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_one.destroy();
                    _this.one.destroy();
                    _this.angle_z = _this.add.text(552, 146, _this.object_Angle_z + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_z);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.two_b_flag == 1) {

                if (_this.AnswerBox.name == _this.object_Angle_x) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_two.destroy();
                    _this.two.destroy();
                    _this.angle_x = _this.add.text(797, 146, _this.object_Angle_x + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_x);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.three_b_flag == 1) {
                if (_this.AnswerBox.name == _this.object_Angle_y) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_three.destroy();
                    _this.three.destroy();
                    _this.angle_y = _this.add.text(692, 376, _this.object_Angle_y + "\u{00B0}");
                    _this.applyingStyle_blue(_this.angle_y);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.x_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_1) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_x.destroy();
                    _this.x_val.destroy();
                    _this.side_x_1 = _this.add.text(602, 255, _this.side_1);
                    _this.applyingStyle_blue(_this.side_x_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_x += 1;
                    if (_this.wrong_flag_x == 3) {
                        _this.graphics_x.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_x.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.y_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_2) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_y.destroy();
                    _this.y_val.destroy();
                    _this.side_y_1 = _this.add.text(673, 129, _this.side_2);
                    _this.applyingStyle_blue(_this.side_y_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_y += 1;
                    if (_this.wrong_flag_y == 3) {
                        _this.graphics_y.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_y.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.z_b_flag == 1) {

                if (_this.AnswerBox.name == _this.side_3) {
                    _this.noofAttempts++;
                    _this.counterCelebrationSound.play();
                    _this.numGroup.destroy();
                    _this.disableInputs();
                    _this.circle_z.destroy();
                    _this.z_val.destroy();
                    _this.side_z_1 = _this.add.text(762, 254, _this.side_3);
                    _this.applyingStyle_blue(_this.side_z_1);
                    // _this.AnswerBox.destroy();
                    // _this.enterTxt.destroy();
                    if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                    if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                    if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                    if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                    if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                    if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                    _this.one_b_flag = 0;
                    _this.two_b_flag = 0;
                    _this.three_b_flag = 0;
                    _this.x_b_flag = 0;
                    _this.y_b_flag = 0;
                    _this.z_b_flag = 0;
                    _this.anim_flag += 1;
                }
                else {
                    _this.wrong_flag_z += 1;
                    if (_this.wrong_flag_z == 3) {
                        _this.graphics_z.visible = true;
                        _this.hintSound.play();
                        _this.time.events.add(2000, () => {
                            _this.graphics_z.visible = false;
                        });
                    }
                    _this.wrongAnsClicked();
                    _this.rightbtn.inputEnabled = true;
                }
            }
            if (_this.anim_flag == 3) {
                _this.time.events.add(800, () => {
                    // console.log("animation...");
                    _this.biscuit_Anim();
                });
            }
        }

        else {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                if (_this.one_b_flag == 1) {
                    if (_this.AnswerBox.name == _this.object_Angle_z) {
                        _this.noofAttempts++;
                        _this.counterCelebrationSound.play();
                        _this.numGroup.destroy();
                        _this.disableInputs();
                        _this.circle_one.destroy();
                        _this.one.destroy();
                        _this.angle_z = _this.add.text(532, 146, _this.object_Angle_z + "\u{00B0}");
                        _this.applyingStyle_blue(_this.angle_z);
                        // _this.AnswerBox.destroy();
                        // _this.enterTxt.destroy();
                        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                        _this.one_b_flag = 0;
                        _this.two_b_flag = 0;
                        _this.three_b_flag = 0;
                        _this.x_b_flag = 0;
                        _this.y_b_flag = 0;
                        _this.z_b_flag = 0;
                        _this.anim_flag += 1;
                    }
                    else {
                        _this.wrongAnsClicked();
                        _this.rightbtn.inputEnabled = true;
                    }
                }
                if (_this.two_b_flag == 1) {

                    if (_this.AnswerBox.name == _this.object_Angle_x) {
                        _this.noofAttempts++;
                        _this.counterCelebrationSound.play();
                        _this.numGroup.destroy();
                        _this.disableInputs();
                        _this.circle_two.destroy();
                        _this.two.destroy();
                        _this.angle_x = _this.add.text(797, 156, _this.object_Angle_x + "\u{00B0}");
                        _this.applyingStyle_blue(_this.angle_x);
                        // _this.AnswerBox.destroy();
                        // _this.enterTxt.destroy();
                        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                        _this.one_b_flag = 0;
                        _this.two_b_flag = 0;
                        _this.three_b_flag = 0;
                        _this.x_b_flag = 0;
                        _this.y_b_flag = 0;
                        _this.z_b_flag = 0;
                        _this.anim_flag += 1;
                    }
                    else {
                        _this.wrongAnsClicked();
                        _this.rightbtn.inputEnabled = true;
                    }
                }
                if (_this.three_b_flag == 1) {
                    if (_this.AnswerBox.name == _this.object_Angle_y) {
                        _this.noofAttempts++;
                        _this.counterCelebrationSound.play();
                        _this.numGroup.destroy();
                        _this.disableInputs();
                        _this.circle_three.destroy();
                        _this.three.destroy();
                        _this.angle_y = _this.add.text(697, 336, _this.object_Angle_y + "\u{00B0}");
                        _this.applyingStyle_blue(_this.angle_y);
                        // _this.AnswerBox.destroy();
                        // _this.enterTxt.destroy();
                        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                        _this.one_b_flag = 0;
                        _this.two_b_flag = 0;
                        _this.three_b_flag = 0;
                        _this.x_b_flag = 0;
                        _this.y_b_flag = 0;
                        _this.z_b_flag = 0;
                        _this.anim_flag += 1;
                    }
                    else {
                        _this.wrongAnsClicked();
                        _this.rightbtn.inputEnabled = true;
                    }
                }
                if (_this.x_b_flag == 1) {

                    if (_this.AnswerBox.name == _this.side_1) {
                        _this.noofAttempts++;
                        _this.counterCelebrationSound.play();
                        _this.numGroup.destroy();
                        _this.disableInputs();
                        _this.circle_x.destroy();
                        _this.x_val.destroy();
                        _this.side_x_1 = _this.add.text(602, 255, _this.side_1);
                        _this.applyingStyle_blue(_this.side_x_1);
                        // _this.AnswerBox.destroy();
                        // _this.enterTxt.destroy();
                        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                        _this.one_b_flag = 0;
                        _this.two_b_flag = 0;
                        _this.three_b_flag = 0;
                        _this.x_b_flag = 0;
                        _this.y_b_flag = 0;
                        _this.z_b_flag = 0;
                        _this.anim_flag += 1;
                    }
                    else {
                        _this.wrong_flag_x += 1;
                        if (_this.wrong_flag_x == 3) {
                            _this.graphics_x.visible = true;
                            _this.hintSound.play();
                            _this.time.events.add(2000, () => {
                                _this.graphics_x.visible = false;
                            });
                        }
                        _this.wrongAnsClicked();
                        _this.rightbtn.inputEnabled = true;
                    }
                }
                if (_this.y_b_flag == 1) {

                    if (_this.AnswerBox.name == _this.side_2) {
                        _this.noofAttempts++;
                        _this.counterCelebrationSound.play();
                        _this.numGroup.destroy();
                        _this.disableInputs();
                        _this.circle_y.destroy();
                        _this.y_val.destroy();
                        _this.side_y_1 = _this.add.text(673, 129, _this.side_2);
                        _this.applyingStyle_blue(_this.side_y_1);
                        // _this.AnswerBox.destroy();
                        // _this.enterTxt.destroy();
                        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                        _this.one_b_flag = 0;
                        _this.two_b_flag = 0;
                        _this.three_b_flag = 0;
                        _this.x_b_flag = 0;
                        _this.y_b_flag = 0;
                        _this.z_b_flag = 0;
                        _this.anim_flag += 1;
                    }
                    else {
                        _this.wrong_flag_y += 1;
                        if (_this.wrong_flag_y == 3) {
                            _this.graphics_y.visible = true;
                            _this.hintSound.play();
                            _this.time.events.add(2000, () => {
                                _this.graphics_y.visible = false;
                            });
                        }
                        _this.wrongAnsClicked();
                        _this.rightbtn.inputEnabled = true;
                    }
                }
                if (_this.z_b_flag == 1) {

                    if (_this.AnswerBox.name == _this.side_3) {
                        _this.noofAttempts++;
                        _this.counterCelebrationSound.play();
                        _this.numGroup.destroy();
                        _this.disableInputs();
                        _this.circle_z.destroy();
                        _this.z_val.destroy();
                        _this.side_z_1 = _this.add.text(762, 254, _this.side_3);
                        _this.applyingStyle_blue(_this.side_z_1);
                        // _this.AnswerBox.destroy();
                        // _this.enterTxt.destroy();
                        if (_this.circle_one.exists) { _this.circle_one.inputEnabled = true; _this.circle_one.input.useHandCursor = true; }
                        if (_this.circle_two.exists) { _this.circle_two.inputEnabled = true; _this.circle_two.input.useHandCursor = true; }
                        if (_this.circle_three.exists) { _this.circle_three.inputEnabled = true; _this.circle_three.input.useHandCursor = true; }
                        if (_this.circle_x.exists) { _this.circle_x.inputEnabled = true; _this.circle_x.input.useHandCursor = true; }
                        if (_this.circle_y.exists) { _this.circle_y.inputEnabled = true; _this.circle_y.input.useHandCursor = true; }
                        if (_this.circle_z.exists) { _this.circle_z.inputEnabled = true; _this.circle_z.input.useHandCursor = true; }
                        _this.one_b_flag = 0;
                        _this.two_b_flag = 0;
                        _this.three_b_flag = 0;
                        _this.x_b_flag = 0;
                        _this.y_b_flag = 0;
                        _this.z_b_flag = 0;
                        _this.anim_flag += 1;
                    }
                    else {
                        _this.wrong_flag_z += 1;
                        if (_this.wrong_flag_z == 3) {
                            _this.graphics_z.visible = true;
                            _this.hintSound.play();
                            _this.time.events.add(2000, () => {
                                _this.graphics_z.visible = false;
                            });
                        }
                        _this.wrongAnsClicked();
                        _this.rightbtn.inputEnabled = true;
                    }
                }
                if (_this.anim_flag == 3) {
                    _this.time.events.add(800, () => {
                        // console.log("animation...");
                        _this.watermelon_Anim();
                    });
                }
            }
        }
    },

    //last screen animation
    sandwichAnim: function () {
        _this.sGroup.destroy();
        _this.angle_1_line.destroy();
        _this.sandwich_2.destroy();
        _this.panel_1.destroy();
        _this.panel_2.destroy();

        _this.angle_1.destroy();
        _this.angle_2.destroy();
        _this.angle_3.destroy();
        _this.side_x.destroy();
        _this.side_y.destroy();
        _this.side_z.destroy();
        if (_this.angle_x) _this.angle_x.destroy();
        if (_this.angle_y) _this.angle_y.destroy();
        if (_this.angle_z) _this.angle_z.destroy();
        if (_this.side_x_1) _this.side_x_1.destroy();
        if (_this.side_y_1) _this.side_y_1.destroy();
        if (_this.side_z_1) _this.side_z_1.destroy();

        _this.sandwich = _this.add.sprite(300, 170, 'sandwichanim');
        _this.sandwich.scale.setTo(1.7);
        _this.biteSound.play();
        _this.sandwich.frame = 1;
        _this.time.events.add(500, () => {
            _this.biteSound.play();
            _this.sandwich.frame = 2;
            _this.time.events.add(500, () => {
                _this.biteSound.play();
                _this.sandwich.frame = 3;
                _this.time.events.add(500, () => {
                    _this.biteSound.play();
                    _this.sandwich.frame = 4;
                    _this.time.events.add(500, () => {
                        _this.biteSound.play();
                        _this.sandwich.destroy();
                        _this.lastScreenCelebration();
                    });
                });

            });
        });
    },
    waffer_Anim: function () {
        _this.sGroup.destroy();
        _this.waffer.destroy();
        _this.tweenGroup.destroy();
        _this.angle_1_line.destroy();
        _this.waffer_2.destroy();
        _this.panel_1.destroy();
        _this.panel_2.destroy();
        _this.angle_1.destroy();
        _this.angle_2.destroy();
        _this.angle_3.destroy();
        _this.side_x.destroy();
        _this.side_y.destroy();
        _this.side_z.destroy();
        if (_this.angle_x) _this.angle_x.destroy();
        if (_this.angle_y) _this.angle_y.destroy();
        if (_this.angle_z) _this.angle_z.destroy();
        if (_this.side_x_1) _this.side_x_1.destroy();
        if (_this.side_y_1) _this.side_y_1.destroy();
        if (_this.side_z_1) _this.side_z_1.destroy();

        _this.waffer = _this.add.sprite(300, 170, 'wafferanim');
        _this.waffer.scale.setTo(1.7);
        _this.biteSound.play();
        _this.waffer.frame = 1;
        _this.time.events.add(500, () => {
            _this.biteSound.play();
            _this.waffer.frame = 2;
            _this.time.events.add(500, () => {
                _this.biteSound.play();
                _this.waffer.frame = 3;
                _this.time.events.add(500, () => {
                    _this.biteSound.play();
                    _this.waffer.frame = 4;
                    _this.time.events.add(500, () => {
                        _this.biteSound.play();
                        _this.waffer.destroy();
                        _this.lastScreenCelebration();
                    });
                });

            });
        });
    },
    cheese_Anim: function () {
        _this.sGroup.destroy();
        _this.cheese.destroy();
        _this.angle_1_line.destroy();
        _this.cheese_2.destroy();
        _this.tweenGroup.destroy();
        _this.panel_1.destroy();
        _this.panel_2.destroy();
        _this.angle_1.destroy();
        _this.angle_2.destroy();
        _this.angle_3.destroy();
        _this.side_x.destroy();
        _this.side_y.destroy();
        _this.side_z.destroy();
        if (_this.angle_x) _this.angle_x.destroy();
        if (_this.angle_y) _this.angle_y.destroy();
        if (_this.angle_z) _this.angle_z.destroy();
        if (_this.side_x_1) _this.side_x_1.destroy();
        if (_this.side_y_1) _this.side_y_1.destroy();
        if (_this.side_z_1) _this.side_z_1.destroy();

        _this.cheese = _this.add.sprite(300, 170, 'cheeseanim');
        _this.cheese.scale.setTo(1.7);
        _this.biteSound.play();
        _this.cheese.frame = 1;
        _this.time.events.add(500, () => {
            _this.biteSound.play();
            _this.cheese.frame = 2;
            _this.time.events.add(500, () => {
                _this.biteSound.play();
                _this.cheese.frame = 3;
                _this.time.events.add(500, () => {
                    _this.biteSound.play();
                    _this.cheese.frame = 4;
                    _this.time.events.add(500, () => {
                        _this.biteSound.play();
                        _this.cheese.destroy();
                        _this.lastScreenCelebration();
                    });
                });

            });
        });
    },
    watermelon_Anim: function () {
        _this.watermelon.destroy();
        _this.sGroup.destroy();
        _this.tweenGroup.destroy();
        _this.angle_1_line.destroy();
        _this.watermelon_2.destroy();
        _this.panel_1.destroy();
        _this.panel_2.destroy();
        _this.angle_1.destroy();
        _this.angle_2.destroy();
        _this.angle_3.destroy();
        _this.side_x.destroy();
        _this.side_y.destroy();
        _this.side_z.destroy();
        if (_this.angle_x) _this.angle_x.destroy();
        if (_this.angle_y) _this.angle_y.destroy();
        if (_this.angle_z) _this.angle_z.destroy();
        if (_this.side_x_1) _this.side_x_1.destroy();
        if (_this.side_y_1) _this.side_y_1.destroy();
        if (_this.side_z_1) _this.side_z_1.destroy();

        _this.watermelon = _this.add.sprite(300, 170, 'watermelonanim');
        _this.watermelon.scale.setTo(1.7);
        _this.biteSound.play();
        _this.watermelon.frame = 1;
        _this.time.events.add(500, () => {
            _this.biteSound.play();
            _this.watermelon.frame = 2;
            _this.time.events.add(500, () => {
                _this.biteSound.play();
                _this.watermelon.frame = 3;
                _this.time.events.add(500, () => {
                    _this.biteSound.play();
                    _this.watermelon.frame = 4;
                    _this.time.events.add(500, () => {
                        _this.biteSound.play();
                        _this.watermelon.destroy();
                        _this.lastScreenCelebration();
                    });
                });

            });
        });
    },
    pizza_Anim: function () {
        _this.sGroup.destroy();
        _this.angle_1_line.destroy();
        _this.pizza_2.destroy();
        _this.panel_1.destroy();
        _this.panel_2.destroy();

        _this.angle_1.destroy();
        _this.angle_2.destroy();
        _this.angle_3.destroy();
        _this.side_x.destroy();
        _this.side_y.destroy();
        _this.side_z.destroy();
        if (_this.angle_x) _this.angle_x.destroy();
        if (_this.angle_y) _this.angle_y.destroy();
        if (_this.angle_z) _this.angle_z.destroy();
        if (_this.side_x_1) _this.side_x_1.destroy();
        if (_this.side_y_1) _this.side_y_1.destroy();
        if (_this.side_z_1) _this.side_z_1.destroy();

        _this.pizza = _this.add.sprite(300, 170, 'pizza_anim');
        //_this.pizza.scale.setTo(1.7);
        _this.pizza.frame = 0;
        _this.biteSound.play();
        _this.time.events.add(500, () => {
            _this.biteSound.play();
            _this.pizza.frame = 1;
            _this.time.events.add(500, () => {
                _this.biteSound.play();
                _this.pizza.frame = 2;
                _this.time.events.add(500, () => {
                    _this.biteSound.play();
                    _this.pizza.frame = 3;
                    _this.time.events.add(500, () => {
                        _this.biteSound.play();
                        _this.pizza.destroy();
                        _this.lastScreenCelebration();
                    });
                });

            });
        });
    },
    biscuit_Anim: function () {
        _this.biscuit.destroy();
        _this.sGroup.destroy();
        _this.tweenGroup.destroy();
        _this.angle_1_line.destroy();
        _this.biscuit_2.destroy();
        _this.panel_1.destroy();
        _this.panel_2.destroy();
        _this.angle_1.destroy();
        _this.angle_2.destroy();
        _this.angle_3.destroy();
        _this.side_x.destroy();
        _this.side_y.destroy();
        _this.side_z.destroy();
        if (_this.angle_x) _this.angle_x.destroy();
        if (_this.angle_y) _this.angle_y.destroy();
        if (_this.angle_z) _this.angle_z.destroy();
        if (_this.side_x_1) _this.side_x_1.destroy();
        if (_this.side_y_1) _this.side_y_1.destroy();
        if (_this.side_z_1) _this.side_z_1.destroy();

        _this.biscuit = _this.add.sprite(300, 170, 'biscuit');
        _this.biscuit.scale.setTo(1.7);
        _this.biteSound.play();
        _this.biscuit.frame = 1;
        _this.time.events.add(500, () => {
            _this.biteSound.play();
            _this.biscuit.frame = 2;
            _this.time.events.add(500, () => {
                _this.biteSound.play();
                _this.biscuit.frame = 3;
                _this.time.events.add(500, () => {
                    _this.biteSound.play();
                    _this.biscuit.frame = 4;
                    _this.time.events.add(500, () => {
                        _this.biteSound.play();
                        _this.biscuit.destroy();
                        _this.lastScreenCelebration();
                    });
                });

            });
        });
    },

    box_1Clicked: function () {
        _this.clickSound.play();

        if (_this.box_1.frame == 2)
            _this.box_1.frame = 0;
        else {
            _this.box_1.frame = 2;
            _this.box_2.frame = 0;
            _this.box_3.frame = 0;
        }
    },
    box_2Clicked: function () {
        _this.clickSound.play();

        if (_this.box_2.frame == 2) {
            _this.box_2.frame = 0;
        }
        else {
            _this.box_1.frame = 0;
            _this.box_2.frame = 2;
            _this.box_3.frame = 0;
        }
    },
    box_3Clicked: function () {
        _this.clickSound.play();
        if (_this.box_3.frame == 2)
            _this.box_3.frame = 0;
        else {
            _this.box_1.frame = 0;
            _this.box_2.frame = 0;
            _this.box_3.frame = 2;
        }
    },

    lastScreenCelebration: function () {
        _this.celebrationSound.play();
        telInitializer.tele_saveAssessment(_this.questionid, "yes", _this.AnsTimerCount, _this.noofAttempts, _this.sceneCount);
        _this.starActions();
        _this.time.events.add(2000, () => {
            _this.clearAll();
            if (_this.count1 == 6) {
                _this.state.start('score', true, false, gameID, _this.microConcepts);
                console.log("score");
            }
            else {
                _this.time.events.add(800, () => {
                    _this.Initial_randomizing();
                });
            }
        });
    },

    clearAll: function () {
        console.log("ClearAll");

        if (_this.objectsArray[_this.count1] == 'sandwich') {
            if (_this.count1 <= 2) {
                _this.sandwich_4.destroy();
            }
        }
        else if (_this.objectsArray[_this.count1] == 'waffer') {
            if (_this.count1 <= 2) {
                _this.waffer_4.destroy();
            }
        }
        else if (_this.objectsArray[_this.count1] == 'cheese') {
            if (_this.count1 <= 2) {
                _this.cheese_4.destroy();
            }
        }
        else if (_this.objectsArray[_this.count1] == 'pizza') {
            if (_this.count1 <= 2) {
                _this.pizza_4.destroy();
            }
        }
        else if (_this.objectsArray[_this.count1] == 'buiscut') {
            if (_this.count1 <= 2) {
                _this.buiscut_4.destroy();
            }
        }
        else {
            if (_this.objectsArray[_this.count1] == 'watermelon') {
                if (_this.count1 <= 2) {
                    _this.watermelon_4.destroy();
                }
            }
        }
        if (_this.count1 <= 2) {
            _this.box_1.destroy();
            _this.box_2.destroy();
            _this.box_3.destroy();
            _this.box_4.destroy();
            _this.angle_z.destroy();
            _this.angle_x.destroy();
            _this.angle_y.destroy();
            _this.side_op_x.destroy();
            _this.side_op_y.destroy();
            _this.side_op_z.destroy();
            _this.angle_z_2.destroy();
            _this.angle_x_2.destroy();
            _this.angle_y_2.destroy();
            _this.side_op_x_2.destroy();
            _this.side_op_y_2.destroy();
            _this.side_op_z_2.destroy();
            _this.angle_z_3.destroy();
            _this.angle_x_3.destroy();
            _this.angle_y_3.destroy();
            _this.side_op_x_3.destroy();
            _this.side_op_y_3.destroy();
            _this.side_op_z_3.destroy();
            _this.angle_z_4.destroy();
            _this.angle_x_4.destroy();
            _this.angle_y_4.destroy();
            _this.side_op_x_4.destroy();
            _this.side_op_y_4.destroy();
            _this.side_op_z_4.destroy();
            _this.tick.destroy();
        }
        _this.count1++;
        _this.optionCounter = 0;
        _this.findingCongarence = [];
        // _this.scale_flag = 0;
        // _this.potractor_flag = 0;
        _this.option_one_flag = 0;
        _this.option_two_flag = 0;
        _this.option_three_flag = 0;
        _this.input_x_flag = 0;
        _this.input_y_flag = 0;
        _this.input_z_flag = 0;

        _this.one_b_flag = 0;
        _this.two_b_flag = 0;
        _this.three_b_flag = 0;
        _this.x_b_flag = 0;
        _this.y_b_flag = 0;
        _this.z_b_flag = 0;
        _this.anim_flag = 0;
        _this.wrong_flag_x = 0;
        _this.wrong_flag_y = 0;
        _this.wrong_flag_z = 0;
    },


    applyingStyle: function (target) {
        target.align = 'right';
        target.font = "Akzidenz-Grotesk BQ";
        target.fill = '#65B4C3';
        target.fontWeight = 'normal';
        target.visible = true;
        // target.fontSize = '25px';
    },
    applyingStyle_Pink: function (target) {
        target.align = 'right';
        target.font = "Akzidenz-Grotesk BQ";
        target.fill = '#E11584';
        target.fontWeight = 'normal';
        target.visible = true;
        target.fontSize = '18px';
    },
    applyingStyle_White: function (target) {
        target.align = 'right';
        target.font = "Akzidenz-Grotesk BQ";
        target.fill = '#ffffff';
        target.fontWeight = 'normal';
        target.visible = true;
    },

    applyingStyle_Orange: function (target) {
        target.align = 'right';
        target.font = "Akzidenz-Grotesk BQ";
        target.fill = '#ff8c00';
        target.fontWeight = 'normal';
        target.visible = true;
        target.fontSize = '25px';
    },

    applyingStyle_blue: function (target) {
        target.align = 'right';
        target.font = "Akzidenz-Grotesk BQ";
        target.fill = '#65B4C3';
        target.fontWeight = 'normal';
        target.visible = true;
        target.fontSize = '25px';
    },

    checkOverlap: function (spriteA, spriteB) {
        _this.boundsA = spriteA.getBounds();
        _this.boundsB = spriteB.getBounds();
        return Phaser.Rectangle.intersects(_this.boundsA, _this.boundsB);
    },


    starActions: function (target) {
        console.log("get a star")
        starAnim = _this.starsGroup.getChildAt(_this.count1);
        starAnim.smoothed = false;
        anim = starAnim.animations.add('star');
        //_this.anim.play();
        _this.microConcepts = "GeometryG7";
        anim.play();
    },


    shutdown: function () {
        _this.stopAudio_QV();
        // _this.stopVoice();
        //RI.gotoEndPage();
        //telInitializer.tele_end();
    },

    DemoVideo: function () {


        // DEMO AUDIOS
        _this.demoAudio1 = document.createElement('audio');
        _this.demoAudio1src = document.createElement('source');
        _this.demoAudio1src.setAttribute("src", window.baseUrl + "questionSounds/NSF-UNLAD-G7/" + _this.languageSelected + "/GMLA_06_G7_a1.mp3");
        _this.demoAudio1.appendChild(_this.demoAudio1src);

        _this.demoAudio2 = document.createElement('audio');
        _this.demoAudio2src = document.createElement('source');
        _this.demoAudio2src.setAttribute("src", window.baseUrl + "questionSounds/NSF-UNLAD-G7/" + _this.languageSelected + "/GMLA_06_G7_a2.mp3");
        _this.demoAudio2.appendChild(_this.demoAudio2src);

        // QUESTION AUDIOS
        _this.q1Sound = document.createElement('audio');
        _this.q1Soundsrc = document.createElement('source');
        _this.q1Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/NSF-UNLAD-G7/" +
            _this.languageSelected + "/GMLA_06_G7_a1.mp3");
        _this.q1Sound.appendChild(_this.q1Soundsrc);

        _this.q2Sound = document.createElement('audio');
        _this.q2Soundsrc = document.createElement('source');
        _this.q2Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/NSF-UNLAD-G7/" +
            _this.languageSelected + "/GMLA_06_G7_a2.mp3");
        _this.q2Sound.appendChild(_this.q2Soundsrc);

        _this.q3Sound = document.createElement('audio');
        _this.q3Soundsrc = document.createElement('source');
        _this.q3Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/NSF-UNLAD-G7/" +
            _this.languageSelected + "/GMLA_06_G7_a3.mp3");
        _this.q3Sound.appendChild(_this.q3Soundsrc);


        _this.video_playing = 0;
        _this.showDemoVideo();  //* call the function to show the video


        _this.skip = _this.add.image(870, 390, 'skipArrow');       //* skip button shown at the bottom
        _this.skip.inputEnabled = true;
        _this.skip.input.useHandCursor = true;
        _this.skip.events.onInputDown.add(function () {
            _this.stopAudio();

            if (_this.demoVideo_2)
                _this.demoVideo_2.stop(false);
            if (_this.demoVideo_1)
                _this.demoVideo_1.stop(false);
            if (_this.videoWorld_1)
                _this.videoWorld_1.destroy();
            if (_this.videoWorld_2)
                _this.videoWorld_2.destroy();

            _this.game.paused = false;  //* restart the game
        });
    },
    stopAudio: function () {
        //* clear all the timers first

        if (_this.demoAudio1Timer) clearTimeout(_this.demoAudio1Timer);
        if (_this.demoVideo1PauseTimer) clearTimeout(_this.demoVideo1PauseTimer);
        if (_this.q1Timer) clearTimeout(_this.q1Timer);
        if (_this.demoAudio2Timer) clearTimeout(_this.demoAudio2Timer);
        if (_this.q2Timer) clearTimeout(_this.q2Timer);

        if (_this.demoAudio1) {
            //// console.log("removing the demo audio1");
            _this.demoAudio1.pause();
            _this.demoAudio1 = null;
            _this.demoAudio1src = null;
        }

        if (_this.demoAudio2) {
            //// console.log("removing the demo audio1");
            _this.demoAudio2.pause();
            _this.demoAudio2 = null;
            _this.demoAudio2src = null;
        }


        if (_this.q1Sound) {
            //// console.log("removing the q1");
            _this.q1Sound.pause();
            _this.q1Sound = null;
            _this.q1Soundsrc = null;
        }

        if (_this.q2Sound) {
            //// console.log("removing the q2");
            _this.q2Sound.pause();
            _this.q2Sound = null;
            _this.q2Soundsrc = null;
        }

        if (_this.q3Sound) {
            //// console.log("removing the q3");
            _this.q3Sound.pause();
            _this.q3Sound = null;
            _this.q3Soundsrc = null;
        }

        _this.skip.events.onInputDown.removeAll();
        _this.skip.destroy();                //* skip button destroyed

    },

    showDemoVideo: function () {



        // _this.demoVideo_1 = _this.add.video('ML1_1');
        // _this.demoVideo_1.play(false);
        // _this.demoVideo_1.changeSource("demoVideos/ML1-G7_1.mp4");
        // _this.video_playing = 1;
        // _this.videoWorld_1 = _this.demoVideo_1.addToWorld();

        // //* play the demo audio1 after 4 sec delay
        // _this.demoAudio1Timer = setTimeout(function ()    //* demoAudio1 js timer to play demoAudio1Timer after 4 seconds.
        // {
        //     //// console.log("inside demoAudio1sound.....")
        //     _this.demoVideo_1.playbackRate = 0;     //* pausing the video after 4sec
        //     clearTimeout(_this.demoAudio1Timer);         //* clear the time once its used.
        //     _this.demoAudio1.play();
        // }, 4000);

        // _this.demoVideo1PauseTimer = setTimeout(function () {
        //     //// console.log("inside demoAudio1sound.....")
        //     _this.demoVideo_1.playbackRate = 1;  //* resuming the video after 9 sec
        //     clearTimeout(_this.demoVideo1PauseTimer);
        // }, 9000);

        // _this.q1Timer = setTimeout(function ()    //* q1 js timer to play q1 after 11 seconds.
        // {
        //     //// console.log("inside q1sound.....")
        //     clearTimeout(_this.q1Timer);         //* clear the time once its used.
        //     _this.q1Sound.play();
        // }, 11000);

        // _this.demoAudio2Timer = setTimeout(function ()    //* demo audio2 js timer to play demo audio2 after 10 seconds.
        // {
        //     //// console.log("inside demoau2sound.....")
        //     clearTimeout(_this.demoAudio2Timer);         //* clear the time once its used.
        //     _this.demoAudio2.play();
        // }, 19000);

        // _this.q2Timer = setTimeout(function ()    //* q2 js timer to play q2 after 15 seconds.
        // {
        //     //// console.log("inside q2sound.....")
        //     clearTimeout(_this.q2Timer);         //* clear the time once its used.
        //     _this.q2Sound.play();
        // }, 24000);

        // _this.demoVideo_1.onComplete.add(function () {
        //     //// console.log("audio2 ended - pause video1");
        //     _this.demoVideo_2 = _this.add.video('ML1_2');
        //     _this.demoVideo_2.play(false);
        //     _this.demoVideo_2.changeSource("demoVideos/ML1-G7_2.mp4");  //* phaser needs this.to run in mobile
        //     _this.video_playing = 2;
        //     _this.videoWorld_2 = _this.demoVideo_2.addToWorld();

        //     _this.skip.bringToTop();
        //     _this.q3Sound.play();
        //     _this.demoVideo_2.onComplete.add(function () {
        //         //// console.log("demovideo 2 completed......!!!1")
        //         _this.stopAudio();
        //         _this.demoVideo_2.stop(false);
        //         _this.demoVideo_1.stop(false);
        //         _this.videoWorld_1.destroy();
        //         _this.videoWorld_2.destroy();
        //         _this.game.paused = false;

        //     });
        // });
    },

    ViewHintInstruction: function () {
        //* pause the game before going to the demovideo 
        _this.game.paused = true;
        _this.HintInstructions();
        //* at the end of demo video/skip pressed, it will unpause the game.
    },

    HintInstructions: function () {
        _this.video_playing = 0;
        _this.addGraphics = _this.add.group();

        _this.showHintInstructions();  //* call the function to show the hint instr

        _this.skip = _this.add.image(820, 110, 'close');       //* skip button shown at the bottom
        _this.skip.scale.setTo(0.9, 0.9);
        _this.skip.inputEnabled = true;
        _this.skip.input.useHandCursor = true;
        _this.skip.events.onInputDown.add(function () {
            _this.stopAudio2();
            console.log('skip arrow')
            _this.pauseVoice();

            if (_this.hintBtn) {
                _this.hintBtn.inputEnabled = true;
                _this.hintBtn.input.useHandCursor = true;
            }
            _this.game.paused = false;  //* restart the game
            console.log(_this.game.paused, '_this.game.paused')
        });
    },

    showHintInstructions: function () {
        _this.pauseVoice();

        _this.q1Sound = document.createElement('audio');
        _this.q1Soundsrc = document.createElement('source');
        _this.q1Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/GMLA-06-G7/" +
            _this.languageSelected + "/GMLA_06_G7_h1.mp3");
        _this.q1Sound.appendChild(_this.q1Soundsrc);

        _this.q2Sound = document.createElement('audio');
        _this.q2Soundsrc = document.createElement('source');
        _this.q2Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/GMLA-06-G7/" +
            _this.languageSelected + "/GMLA_06_G7_h2.mp3");
        _this.q2Sound.appendChild(_this.q2Soundsrc);

        _this.q3Sound = document.createElement('audio');
        _this.q3Soundsrc = document.createElement('source');
        _this.q3Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/GMLA-06-G7/" +
            _this.languageSelected + "/GMLA_06_G7_h3.mp3");
        _this.q3Sound.appendChild(_this.q3Soundsrc);

        _this.q4Sound = document.createElement('audio');
        _this.q4Soundsrc = document.createElement('source');
        _this.q4Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/GMLA-06-G7/" +
            _this.languageSelected + "/GMLA_06_G7_h4.mp3");
        _this.q4Sound.appendChild(_this.q4Soundsrc);

        _this.q5Sound = document.createElement('audio');
        _this.q5Soundsrc = document.createElement('source');
        _this.q5Soundsrc.setAttribute("src", window.baseUrl + "questionSounds/GMLA-06-G7/" +
            _this.languageSelected + "/GMLA_06_G7_h5.mp3");
        _this.q5Sound.appendChild(_this.q5Soundsrc);

        _this.playCount = 0;

        _this.background_demo = _this.add.tileSprite(0, 0, _this.world.width, _this.world.height, 'BG1');

        _this.screenVal = 0;

        _this.bgBox = _this.add.image(70, 80, 'bgbox2');

        _this.background_demo.addChild(_this.bgBox);

        _this.nextScreen = _this.add.image(780, 390, 'skipArrow');       //* skip button shown at the bottom
        _this.nextScreen.inputEnabled = true;
        _this.nextScreen.input.useHandCursor = true;

        _this.nextScreen.events.onInputDown.add(function () {
            _this.pauseVoice();
            _this.navigateToNextScreen();
        });

        _this.previousScreen = _this.add.image(180, 440, 'skipArrow');       //* back to first screen
        _this.previousScreen.alpha = 0;
        _this.previousScreen.angle = 180;
        _this.previousScreen.inputEnabled = true;
        _this.previousScreen.input.useHandCursor = true;

        _this.previousScreen.events.onInputDown.add(function () {
            _this.pauseVoice();
            _this.navigateToPrevScreen();
        });

        _this.drawTriangleSSS();
        _this.drawTriangleSSS2();



    },

    stopAudio2: function () {
        if (_this.background_demo) _this.background_demo.destroy();
        _this.Question_flag = 2;
        _this.speakerbtn.inputEnabled = true;

        if (_this.q1Sound) {
            _this.q1Sound.pause();
            _this.q1Sound = null;
            _this.q1Soundsrc = null;
        }
        if (_this.q2Sound) {
            _this.q2Sound.pause();
            _this.q2Sound = null;
            _this.q2Soundsrc = null;
        }
        if (_this.q3Sound) {
            _this.q3Sound.pause();
            _this.q3Sound = null;
            _this.q3Soundsrc = null;
        }
        if (_this.q4Sound) {
            _this.q4Sound.pause();
            _this.q4Sound = null;
            _this.q4Soundsrc = null;
        }
        if (_this.q5Sound) {
            _this.q5Sound.pause();
            _this.q5Sound = null;
            _this.q5Soundsrc = null;
        }

        if (_this.group1) _this.group1.destroy();
        if (_this.group2) _this.group2.destroy();
        if (_this.group3) _this.group3.destroy();
        if (_this.group4) _this.group4.destroy();

        _this.nextScreen.destroy();
        _this.previousScreen.destroy();

        _this.skip.events.onInputDown.removeAll();
        _this.skip.destroy();                //* skip button destroyed

    },

    drawTriangleSSS: function () {
        _this.q1Sound.play();
        _this.q3Sound.pause();
        _this.q4Sound.pause();
        _this.q5Sound.pause();
        _this.screenVal = 1;

        _this.previousScreen.alpha = 0;
        _this.group1 = _this.add.group();

        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        // graphics.beginFill(0xD3D3D3); // Grey color in hexadecimal
        // graphics.drawPolygon(triangleVertices);
        // graphics.endFill();

        // // Draw the border of the triangle with black color
        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels

        // // Draw the border by connecting the vertices and back to the starting point
        // graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        // for (var i = 1; i < triangleVertices.length; i++) {
        //     graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        // }
        // graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

        // graphics.endFill();

        drawTriangle(0xD3D3D3, 0x4472c4);


        var text = _this.add.text(230, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text2 = _this.add.text(360, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(290, 360, "6", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });


        function drawTriangle(fillColor, borderColor) {
            graphics.clear();

            // Draw filled triangle
            graphics.beginFill(fillColor);
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw triangle border
            graphics.lineStyle(2, borderColor);
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 0; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            console.log(triangleVertices.length)
        }

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 9000);

        function changeTriangleColor() {
            _this.HighLight(0xD3D3D3, 0xFF0000); // Red color
        }

        setTimeout(changeTriangleColor2, 11000);

        function changeTriangleColor2() {
            _this.HighLight2(0xD3D3D3, 0x006400); // green color
        }

        setTimeout(changeTriangleColor3, 13000);

        function changeTriangleColor3() {
            _this.HighLight3(0xD3D3D3, 0xFFFF00); // yellow color
        }

        // // Draw an angle symbol at the first vertex of the triangle
        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        // graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        // graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);


        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        // graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        // graphics.lineTo(255, 350);

        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[2].x - 9, triangleVertices[2].y - 20);
        // graphics.lineTo(triangleVertices[2].x - 27, triangleVertices[2].y - 20);
        // graphics.lineTo(353, 350);

        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group1.addChild(graphics);
        _this.group1.addChild(text);
        _this.group1.addChild(text2);
        _this.group1.addChild(text3);
    },

    HighLight: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        for (var i = 1; i < 2; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

        _this.group1.addChild(graphics);
    },
    HighLight2: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[2].x, triangleVertices[2].y);
        for (var i = 0; i < 1; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[2].x, triangleVertices[2].y);

        _this.group1.addChild(graphics);
    },

    HighLight3: function (fillColor, borderColor) {
        // graphics.clear();

        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        // Draw filled triangle
        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[1].x, triangleVertices[1].y);
        for (var i = 2; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[1].x, triangleVertices[1].y);

        _this.group1.addChild(graphics);

    },

    HighLight4: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        for (var i = 1; i < 2; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

        _this.group1.addChild(graphics);
    },
    HighLight5: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[2].x, triangleVertices[2].y);
        for (var i = 0; i < 1; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[2].x, triangleVertices[2].y);

        _this.group1.addChild(graphics);
    },

    HighLight6: function (fillColor, borderColor) {
        // graphics.clear();

        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        // Draw filled triangle
        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[1].x, triangleVertices[1].y);
        for (var i = 2; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[1].x, triangleVertices[1].y);

        _this.group1.addChild(graphics);

    },

    drawTriangleSSS2: function () {
        _this.screenVal = 1;

        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        // graphics.beginFill(0xD3D3D3); // Grey color in hexadecimal
        // graphics.drawPolygon(triangleVertices);
        // graphics.endFill();

        // // Draw the border of the triangle with black color
        // graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels

        // // Draw the border by connecting the vertices and back to the starting point
        // graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        // for (var i = 1; i < triangleVertices.length; i++) {
        //     graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        // }
        // graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

        // graphics.endFill();

        drawTriangle(0xD3D3D3, 0x4472c4);

        var text = _this.add.text(480, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text2 = _this.add.text(610, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(540, 360, "6", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        function drawTriangle(fillColor, borderColor) {
            graphics.clear();

            // Draw filled triangle
            graphics.beginFill(fillColor);
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw triangle border
            graphics.lineStyle(2, borderColor);
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 0; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            console.log(triangleVertices.length)
        }

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 9000);

        function changeTriangleColor() {
            _this.HighLight4(0xD3D3D3, 0xFF0000); // Red color
        }

        setTimeout(changeTriangleColor2, 11000);

        function changeTriangleColor2() {
            _this.HighLight5(0xD3D3D3, 0x006400); // white color
        }

        setTimeout(changeTriangleColor3, 13000);

        function changeTriangleColor3() {
            _this.HighLight6(0xD3D3D3, 0xFFFF00); // Red color
        }

        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group1.addChild(graphics);
        _this.group1.addChild(text);
        _this.group1.addChild(text2);
        _this.group1.addChild(text3);
    },

    drawTriangleSAS: function () {
        _this.q1Sound.pause();
        _this.q4Sound.pause();
        _this.q5Sound.pause();
        _this.q3Sound.play();

        _this.group2 = _this.add.group();
        _this.previousScreen.alpha = 1;

        var graphics = _this.add.graphics(0, 0);

        _this.screenVal = 2;

        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        drawTriangle(0xD3D3D3, 0x4472c4);

        function drawTriangle(fillColor, borderColor) {
            graphics.beginFill(fillColor); // Grey color in hexadecimal
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw the border of the triangle with black color
            graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

            // Draw the border by connecting the vertices and back to the starting point
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 1; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            graphics.endFill();
        }



        var text = _this.add.text(230, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text2 = _this.add.text(260, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(290, 360, "6", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 3000);

        function changeTriangleColor() {
            _this.HighLightAngle(0xD3D3D3, 0x006400); // Red color
        }

        // // Draw an angle symbol at the first vertex of the triangle
        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        // graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        // graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);


        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(255, 350);

        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[2].x - 9, triangleVertices[2].y - 20);
        // graphics.lineTo(triangleVertices[2].x - 27, triangleVertices[2].y - 20);
        // graphics.lineTo(353, 350);

        // setTimeout(changeTriangleColor, 1000);
        // _this.HighLightAngle();


        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group2.addChild(graphics);
        _this.group2.addChild(text);
        _this.group2.addChild(text2);
        _this.group2.addChild(text3);
    },

    HighLightAngle: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        for (var i = 1; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[1].x, triangleVertices[1].y);

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(255, 350);

        var text = _this.add.text(260, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#006400"
        });

        _this.group2.addChild(graphics);
        _this.group2.addChild(text);
    },

    drawTriangleSAS2: function () {
        _this.screenVal = 2;

        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        drawTriangle(0xD3D3D3, 0x4472c4);

        function drawTriangle(fillColor, borderColor) {
            graphics.beginFill(fillColor); // Grey color in hexadecimal
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw the border of the triangle with black color
            graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

            // Draw the border by connecting the vertices and back to the starting point
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 1; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            graphics.endFill();
        }
        var text = _this.add.text(480, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text2 = _this.add.text(510, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(540, 360, "6", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 3000);

        function changeTriangleColor() {
            _this.HighLightAngle2(0xD3D3D3, 0x006400); // Red color
        }

        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(505, 350);

        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group2.addChild(graphics);
        _this.group2.addChild(text);
        _this.group2.addChild(text2);
        _this.group2.addChild(text3);
    },

    HighLightAngle2: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        for (var i = 1; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[1].x, triangleVertices[1].y);

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(505, 350);

        var text = _this.add.text(510, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#006400"
        });

        _this.group2.addChild(graphics);
        _this.group2.addChild(text);
    },


    drawTriangleASA: function () {
        _this.q1Sound.pause();
        _this.q3Sound.pause();
        _this.q5Sound.pause();
        _this.q4Sound.play();
        _this.group3 = _this.add.group();

        var graphics = _this.add.graphics(0, 0);

        _this.screenVal = 3;

        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        drawTriangle(0xD3D3D3, 0x4472c4);

        function drawTriangle(fillColor, borderColor) {
            graphics.beginFill(fillColor); // Grey color in hexadecimal
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw the border of the triangle with black color
            graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

            // Draw the border by connecting the vertices and back to the starting point
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 1; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            graphics.endFill();
        }

        var text = _this.add.text(230, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text2 = _this.add.text(260, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(290, 200, "35" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 3000);

        function changeTriangleColor() {
            _this.HighLightAngle3(0xD3D3D3, 0x006400); // green color
        }

        // // Draw an angle symbol at the first vertex of the triangle
        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);


        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(255, 350);

        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[2].x - 9, triangleVertices[2].y - 20);
        // graphics.lineTo(triangleVertices[2].x - 27, triangleVertices[2].y - 20);
        // graphics.lineTo(353, 350);

        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group3.addChild(graphics);
        _this.group3.addChild(text);
        _this.group3.addChild(text2);
        _this.group3.addChild(text3);
    },

    HighLightAngle3: function (fillColor, borderColor) {
        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(300, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        for (var i = 1; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[1].x, triangleVertices[1].y);

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(255, 350);

        var text = _this.add.text(260, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#006400"
        });

        var text2 = _this.add.text(290, 200, "35" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#006400"
        });

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(255, 350);

        _this.group3.addChild(graphics);
        _this.group3.addChild(text);
        _this.group3.addChild(text2);
    },

    drawTriangleASA2: function () {
        _this.screenVal = 3;

        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        drawTriangle(0xD3D3D3, 0x4472c4);

        function drawTriangle(fillColor, borderColor) {
            graphics.beginFill(0xD3D3D3); // Grey color in hexadecimal
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw the border of the triangle with black color
            graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels

            // Draw the border by connecting the vertices and back to the starting point
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 1; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            graphics.endFill();
        }


        var text = _this.add.text(480, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text2 = _this.add.text(510, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(535, 200, "35" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 3000);

        function changeTriangleColor() {
            _this.HighLightAngle4(0xD3D3D3, 0x006400); // green color
        }


        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);


        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(505, 350);


        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group3.addChild(graphics);
        _this.group3.addChild(text);
        _this.group3.addChild(text2);
        _this.group3.addChild(text3);
    },

    HighLightAngle4: function (fillColor, borderColor) {
        var triangleVertices = [
            new Phaser.Point(550, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        var graphics = _this.add.graphics(0, 0);

        graphics.beginFill(fillColor);
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw triangle border
        graphics.lineStyle(4, borderColor);
        graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
        for (var i = 1; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[1].x, triangleVertices[1].y);

        graphics.lineStyle(2, 0x006400); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 7, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 25, triangleVertices[1].y - 20);
        graphics.lineTo(505, 350);

        var text = _this.add.text(510, 310, "75" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#006400"
        });

        var text2 = _this.add.text(535, 200, "35" + '\u00B0', {
            font: "20px Akzidenz-Grotesk BQ",
            fill: "#006400"
        });

        _this.group3.addChild(graphics);
        _this.group3.addChild(text);
        _this.group3.addChild(text2);
    },

    drawTriangleRHS: function () {
        _this.q1Sound.pause();
        _this.q3Sound.pause();
        _this.q4Sound.pause();
        _this.q5Sound.play();

        _this.group4 = _this.add.group();
        _this.nextScreen.alpha = 0;

        var graphics = _this.add.graphics(0, 0);

        _this.screenVal = 4;

        var triangleVertices = [
            new Phaser.Point(230, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        drawTriangle(0xD3D3D3, 0x4472c4);

        function drawTriangle(fillColor, borderColor) {
            graphics.beginFill(fillColor); // Grey color in hexadecimal
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw the border of the triangle with black color
            graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

            // Draw the border by connecting the vertices and back to the starting point
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 1; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            graphics.endFill();
        }

        var text2 = _this.add.text(330, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(290, 360, "3", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 3000);

        function changeTriangleColor() {
            _this.highLightRightAngle(0xD3D3D3, 0x006400); // green color
        }

        // // Draw an angle symbol at the first vertex of the triangle
        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        // graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        // graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);


        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 0, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 20, triangleVertices[1].y - 20);
        graphics.lineTo(250, 350);

        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[2].x - 9, triangleVertices[2].y - 20);
        // graphics.lineTo(triangleVertices[2].x - 27, triangleVertices[2].y - 20);
        // graphics.lineTo(353, 350);

        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group4.addChild(graphics);
        _this.group4.addChild(text2);
        _this.group4.addChild(text3);
    },

    drawTriangleRHS2: function () {
        var graphics = _this.add.graphics(0, 0);

        _this.screenVal = 4;

        var triangleVertices = [
            new Phaser.Point(480, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        drawTriangle(0xD3D3D3, 0x4472c4);

        function drawTriangle(fillColor, borderColor) {
            graphics.beginFill(fillColor); // Grey color in hexadecimal
            graphics.drawPolygon(triangleVertices);
            graphics.endFill();

            // Draw the border of the triangle with black color
            graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

            // Draw the border by connecting the vertices and back to the starting point
            graphics.moveTo(triangleVertices[0].x, triangleVertices[0].y);
            for (var i = 1; i < triangleVertices.length; i++) {
                graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
            }
            graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

            graphics.endFill();
        }

        // Set up a timed event to change the triangle color after 1 second
        setTimeout(changeTriangleColor, 3000);

        function changeTriangleColor() {
            _this.highLightRightAngle2(0xD3D3D3, 0x006400); // green color
        }

        var text2 = _this.add.text(580, 240, "7", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        var text3 = _this.add.text(540, 360, "3", {
            font: "24px Akzidenz-Grotesk BQ",
            fill: "#4472c4"
        });

        // // Draw an angle symbol at the first vertex of the triangle
        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[0].x + 10, triangleVertices[0].y + 25);
        // graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y + 35);
        // graphics.lineTo(triangleVertices[0].x - 10, triangleVertices[0].y + 25);


        graphics.lineStyle(2, 0x4472c4); // Black color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 0, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 20, triangleVertices[1].y - 20);
        graphics.lineTo(500, 350);

        // graphics.lineStyle(2, 0x000000); // Black color in hexadecimal, line thickness of 2 pixels
        // graphics.moveTo(triangleVertices[2].x - 9, triangleVertices[2].y - 20);
        // graphics.lineTo(triangleVertices[2].x - 27, triangleVertices[2].y - 20);
        // graphics.lineTo(353, 350);

        _this.background_demo.addChild(graphics);
        _this.background_demo.addChild(text2);
        _this.background_demo.addChild(text3);

        _this.group4.addChild(graphics);
        _this.group4.addChild(text2);
        _this.group4.addChild(text3);
    },

    highLightRightAngle: function (fillColor, borderColor) {
        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(230, 150),
            new Phaser.Point(230, 350),
            new Phaser.Point(380, 350)
        ];

        graphics.beginFill(fillColor); // Grey color in hexadecimal
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw the border of the triangle with black color
        graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

        // Draw the border by connecting the vertices and back to the starting point
        graphics.moveTo(triangleVertices[2].x, triangleVertices[2].y);
        for (var i = 1; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

        graphics.endFill();

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 0, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 20, triangleVertices[1].y - 20);
        graphics.lineTo(250, 350);

        _this.group4.addChild(graphics);

    },
    highLightRightAngle2: function (fillColor, borderColor) {
        var graphics = _this.add.graphics(0, 0);

        var triangleVertices = [
            new Phaser.Point(480, 150),
            new Phaser.Point(480, 350),
            new Phaser.Point(620, 350)
        ];

        graphics.beginFill(fillColor); // Grey color in hexadecimal
        graphics.drawPolygon(triangleVertices);
        graphics.endFill();

        // Draw the border of the triangle with black color
        graphics.lineStyle(2, borderColor); // Black color in hexadecimal, line thickness of 2 pixels

        // Draw the border by connecting the vertices and back to the starting point
        graphics.moveTo(triangleVertices[2].x, triangleVertices[2].y);
        for (var i = 1; i < 3; i++) {
            graphics.lineTo(triangleVertices[i].x, triangleVertices[i].y);
        }
        graphics.lineTo(triangleVertices[0].x, triangleVertices[0].y);

        graphics.endFill();

        graphics.lineStyle(2, 0x006400); // green color in hexadecimal, line thickness of 2 pixels
        graphics.moveTo(triangleVertices[1].x + 0, triangleVertices[1].y - 20);
        graphics.lineTo(triangleVertices[1].x + 20, triangleVertices[1].y - 20);
        graphics.lineTo(500, 350);

        _this.group4.addChild(graphics);
    },

    navigateToPrevScreen() {
        if (_this.screenVal === 1) {
            _this.previousScreen.alpha = 0;
            _this.nextScreen.alpha = 1;
        }
        else if (_this.screenVal === 2) {
            _this.nextScreen.alpha = 1;
            _this.group2.destroy();
            _this.drawTriangleSSS();
            _this.drawTriangleSSS2();
        }
        else if (_this.screenVal === 3) {
            _this.nextScreen.alpha = 1;
            _this.group3.destroy();
            _this.drawTriangleSAS();
            _this.drawTriangleSAS2();
        }
        else if (_this.screenVal === 4) {
            _this.nextScreen.alpha = 1;
            _this.group4.destroy();
            _this.drawTriangleASA();
            _this.drawTriangleASA2();
        }
    },

    navigateToNextScreen() {
        if (_this.screenVal === 1) {
            _this.group1.destroy();
            _this.drawTriangleSAS();
            _this.drawTriangleSAS2();
        }
        else if (_this.screenVal === 2) {
            _this.group2.destroy();
            _this.drawTriangleASA();
            _this.drawTriangleASA2();
        }
        else if (_this.screenVal === 3) {
            _this.group3.destroy();
            _this.drawTriangleRHS();
            _this.drawTriangleRHS2();
        }
        else if (_this.screenVal === 4) {
            _this.nextScreen.alpha = 0;
        }
    },
}